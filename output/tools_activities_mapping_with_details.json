{
  "Burp Suite": {
    "Activities": [
      {
        "Activity": "Coverage of hidden endpoints",
        "Description": "Coverage of hidden endpoints involves testing and verifying endpoints that are not immediately visible or documented in the application's API. This ensures that all potential access points are secured and free from vulnerabilities. Tools like Burp Suite, OWASP ZAP, Postman, SoapUI, Fiddler, and Insomnia can assist in discovering and testing these hidden endpoints.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for applications",
        "Stages": [
          "Dynamic Application Security Testing (DAST)",
          "Vulnerability and Penetration Testing"
        ]
      },
      {
        "Activity": "Weak password test",
        "Description": "Conducting weak password tests involves assessing the strength of passwords used within the infrastructure to ensure they meet security standards and are resistant to brute-force or guessing attacks. While tools like Hydra, John the Ripper, and Hashcat are effective for password cracking and strength testing, pipeline-compatible tools such as Burp Suite and OWASP ZAP can be integrated into CI/CD workflows to automate password strength assessments.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for infrastructure",
        "Stages": [
          "Dynamic Application Security Testing (DAST)",
          "Vulnerability and Penetration Testing"
        ]
      },
      {
        "Activity": "Simple Scan",
        "Description": "Conducting simple scans involves performing basic security and vulnerability assessments on the application to identify common issues. This helps in maintaining a baseline level of security and ensuring that fundamental vulnerabilities are addressed. Pipeline-compatible tools like OWASP ZAP, Nessus, and Nikto can automate simple scans within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for applications",
        "Stages": ["Dynamic Application Security Testing (DAST)"]
      },
      {
        "Activity": "Usage of multiple scanners",
        "Description": "Usage of multiple scanners involves employing various dynamic analysis tools to comprehensively evaluate applications for security vulnerabilities, performance issues, and compliance with best practices. This multi-scanner approach enhances the detection of diverse issues by leveraging the strengths of different tools. Tools like OWASP ZAP, Burp Suite, and Nikto can be integrated into DevSecOps pipelines to provide layered security testing and thorough application assessments.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for applications",
        "Stages": [
          "Dynamic Application Security Testing (DAST)",
          "Vulnerability and Penetration Testing"
        ]
      }
    ],
    "PossibleStages": [
      "Dynamic Application Security Testing (DAST)",
      "Vulnerability and Penetration Testing"
    ]
  },
  "OpenVAS": {
    "Activities": [
      {
        "Activity": "Reduction of the attack surface",
        "Description": "Reducing the attack surface involves minimizing the number of entry points and potential vulnerabilities in a system. This is achieved by disabling unnecessary services, removing unused software, and limiting exposed interfaces to decrease the opportunities for attackers.",
        "Dimension": "Build and Deployment",
        "SubDimension": "Patch Management",
        "Stages": [
          "Vulnerability and Penetration Testing",
          "Post-Deployment / Operations"
        ]
      },
      {
        "Activity": "Test for exposed services",
        "Description": "Testing for exposed services involves identifying and assessing services that are accessible externally to ensure they are secure and do not expose vulnerabilities. This process helps in minimizing the attack surface by controlling and securing exposed endpoints. Tools like Nmap, Shodan, and OpenVAS can be integrated into DevSecOps pipelines to automate the detection and assessment of exposed services.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for infrastructure",
        "Stages": ["Vulnerability and Penetration Testing"]
      },
      {
        "Activity": "Test of infrastructure components for known vulnerabilities",
        "Description": "Testing infrastructure components for known vulnerabilities involves scanning and assessing all infrastructure elements, such as servers, databases, and networking components, to identify and remediate existing security vulnerabilities. This proactive approach ensures that infrastructure remains secure and resilient against potential threats. Tools like Nessus, OpenVAS, and Qualys can be integrated into DevSecOps pipelines to automate vulnerability scanning and remediation processes.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for infrastructure",
        "Stages": ["Vulnerability and Penetration Testing"]
      }
    ],
    "PossibleStages": [
      "Policy & Governance",
      "Vulnerability and Penetration Testing"
    ]
  },
  "Nessus": {
    "Activities": [
      {
        "Activity": "Reduction of the attack surface",
        "Description": "Reducing the attack surface involves minimizing the number of entry points and potential vulnerabilities in a system. This is achieved by disabling unnecessary services, removing unused software, and limiting exposed interfaces to decrease the opportunities for attackers.",
        "Dimension": "Build and Deployment",
        "SubDimension": "Patch Management",
        "Stages": [
          "Vulnerability and Penetration Testing",
          "Post-Deployment / Operations"
        ]
      },
      {
        "Activity": "Simple Scan",
        "Description": "Conducting simple scans involves performing basic security and vulnerability assessments on the application to identify common issues. This helps in maintaining a baseline level of security and ensuring that fundamental vulnerabilities are addressed. Pipeline-compatible tools like OWASP ZAP, Nessus, and Nikto can automate simple scans within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for applications",
        "Stages": ["Vulnerability and Penetration Testing"]
      },
      {
        "Activity": "Usage of a vulnerability management system",
        "Description": "Usage of a vulnerability management system involves implementing tools that continuously identify, assess, and remediate vulnerabilities within the application and infrastructure. This proactive approach ensures ongoing security and compliance by managing vulnerabilities throughout the software development lifecycle. Tools like Qualys, Nessus, and Snyk can be integrated into DevSecOps pipelines to automate vulnerability scanning and management processes.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": [
          "Policy & Governance",
          "Vulnerability and Penetration Testing"
        ]
      },
      {
        "Activity": "Test of infrastructure components for known vulnerabilities",
        "Description": "Testing infrastructure components for known vulnerabilities involves scanning and assessing all infrastructure elements, such as servers, databases, and networking components, to identify and remediate existing security vulnerabilities. This proactive approach ensures that infrastructure remains secure and resilient against potential threats. Tools like Nessus, OpenVAS, and Qualys can be integrated into DevSecOps pipelines to automate vulnerability scanning and remediation processes.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for infrastructure",
        "Stages": ["Vulnerability and Penetration Testing"]
      }
    ],
    "PossibleStages": [
      "Policy & Governance",
      "Vulnerability and Penetration Testing"
    ]
  },
  "Qualys": {
    "Activities": [
      {
        "Activity": "Reduction of the attack surface",
        "Description": "Reducing the attack surface involves minimizing the number of entry points and potential vulnerabilities in a system. This is achieved by disabling unnecessary services, removing unused software, and limiting exposed interfaces to decrease the opportunities for attackers.",
        "Dimension": "Build and Deployment",
        "SubDimension": "Patch Management",
        "Stages": [
          "Vulnerability and Penetration Testing",
          "Post-Deployment / Operations"
        ]
      },
      {
        "Activity": "Usage of a vulnerability management system",
        "Description": "Usage of a vulnerability management system involves implementing tools that continuously identify, assess, and remediate vulnerabilities within the application and infrastructure. This proactive approach ensures ongoing security and compliance by managing vulnerabilities throughout the software development lifecycle. Tools like Qualys, Nessus, and Snyk can be integrated into DevSecOps pipelines to automate vulnerability scanning and management processes.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": [
          "Policy & Governance",
          "Vulnerability and Penetration Testing"
        ]
      },
      {
        "Activity": "Test of infrastructure components for known vulnerabilities",
        "Description": "Testing infrastructure components for known vulnerabilities involves scanning and assessing all infrastructure elements, such as servers, databases, and networking components, to identify and remediate existing security vulnerabilities. This proactive approach ensures that infrastructure remains secure and resilient against potential threats. Tools like Nessus, OpenVAS, and Qualys can be integrated into DevSecOps pipelines to automate vulnerability scanning and remediation processes.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for infrastructure",
        "Stages": ["Vulnerability and Penetration Testing"]
      }
    ],
    "PossibleStages": [
      "Policy & Governance",
      "Vulnerability and Penetration Testing"
    ]
  },
  "SonarQube": {
    "Activities": [
      {
        "Activity": "Integration of vulnerability issues into the development process",
        "Description": "Integrating vulnerability issues into the development process involves embedding security checks and vulnerability assessments into the software development lifecycle (SDLC). This ensures that vulnerabilities are identified and addressed early, promoting a proactive approach to security. Pipeline-compatible tools like SonarQube, GitLab CI/CD, and Snyk can be integrated to automate vulnerability tracking and remediation.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": [
          "Static Application Security Testing (SAST)",
          "Continuous Integration"
        ]
      },
      {
        "Activity": "Simple false positive treatment",
        "Description": "Simple false positive treatment involves identifying and dismissing alerts or findings that are incorrectly flagged as vulnerabilities. This helps in reducing noise and focusing on genuine security issues. Pipeline-compatible tools like SonarQube and GitLab SAST can automate the dismissal of false positives within CI/CD workflows.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Dead code elimination",
        "Description": "Dead code elimination involves identifying and removing unused or redundant code from the codebase to improve maintainability, reduce potential vulnerabilities, and optimize performance. This process can be integrated into DevSecOps pipelines using static analysis tools that automatically detect and flag dead code during the CI/CD process. Tools like SonarQube, ESLint, and PMD support automated dead code detection and elimination.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Code Quality"]
      },
      {
        "Activity": "Exclusion of source code duplicates",
        "Description": "Excluding source code duplicates involves identifying and removing duplicate code segments to enhance code quality, maintainability, and security. This practice reduces the risk of inconsistencies and vulnerabilities across the codebase. Tools like SonarQube, PMD, and CodeClimate can be integrated into DevSecOps pipelines to automate the detection and exclusion of duplicate code during the CI/CD process.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Code Quality"]
      },
      {
        "Activity": "Security code review",
        "Description": "Conducting security code reviews involves systematically examining source code to identify and remediate security vulnerabilities. This practice ensures that code adheres to security best practices and reduces the risk of introducing vulnerabilities into the application. Pipeline-compatible tools like SonarQube, GitHub CodeQL, and GitLab SAST can automate security code reviews within CI/CD pipelines.",
        "Dimension": "Culture and Organization",
        "SubDimension": "Education and Guidance",
        "Stages": ["Static Application Security Testing (SAST)", "Code Quality"]
      },
      {
        "Activity": "App. Hardening Level 1",
        "Description": "Application Hardening Level 1 involves implementing basic security measures to protect applications from common threats. This includes practices like input validation, error handling, and enforcing secure coding standards. Pipeline-compatible tools like ESLint, SonarQube, and OWASP ZAP can automate the enforcement of these basic security measures within CI/CD pipelines.",
        "Dimension": "Implementation",
        "SubDimension": "Application Hardening",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "App. Hardening Level 1 (50%)",
        "Description": "Application Hardening Level 1 (50%) signifies partial implementation of basic security measures to protect applications. This includes some practices like input validation and error handling but may lack comprehensive coverage. Pipeline-compatible tools like ESLint and SonarQube can assist in automating the enforcement of these partial security measures within CI/CD pipelines.",
        "Dimension": "Implementation",
        "SubDimension": "Application Hardening",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "App. Hardening Level 3",
        "Description": "Application Hardening Level 3 represents the full implementation of advanced security measures to protect applications comprehensively. This includes integrating security into every stage of the development lifecycle, continuous monitoring, and adopting a security-first approach. Pipeline-compatible tools like OWASP ZAP, Fortify, Snyk, and SonarQube can automate and enforce these comprehensive security measures within CI/CD pipelines.",
        "Dimension": "Implementation",
        "SubDimension": "Application Hardening",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Contextualized Encoding",
        "Description": "Contextualized Encoding involves encoding data based on its context to prevent security vulnerabilities like injection attacks. This ensures that data is handled securely depending on where and how it is used within the application. Pipeline-compatible tools like ESLint and SonarQube can assist in enforcing encoding standards within CI/CD pipelines.",
        "Dimension": "Implementation",
        "SubDimension": "Application Hardening",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Usage of multiple analyzers",
        "Description": "Usage of multiple analyzers involves employing various static and dynamic analysis tools to comprehensively evaluate the codebase for vulnerabilities, code quality, and adherence to best practices. This multi-tool approach ensures thorough coverage and reduces the likelihood of missing critical issues. Tools like SonarQube, ESLint, and PMD can be integrated into DevSecOps pipelines to provide diverse analysis capabilities and enhance overall security and quality.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Advanced visualization of defects",
        "Description": "Advanced visualization of defects involves creating detailed and interactive dashboards that display defect metrics, trends, and patterns to provide deeper insights into the quality and security of the software. Pipeline-compatible tools like SonarQube, Jira, and Grafana can automate the aggregation and visualization of defect data within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": ["Code Quality"]
      },
      {
        "Activity": "Fix based on severity",
        "Description": "Fixing defects based on severity involves prioritizing and addressing defects according to their impact and criticality. High-severity defects are resolved promptly to mitigate significant risks, while lower-severity issues are scheduled accordingly. Pipeline-compatible tools like Jira, GitLab, and SonarQube can automate the prioritization and tracking of defect fixes within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": ["Code Quality"]
      },
      {
        "Activity": "Simple visualization of defects",
        "Description": "Simple visualization of defects involves creating basic charts and graphs to display defect metrics, such as defect count over time or defect distribution by category. This provides a straightforward overview of the defect landscape. Pipeline-compatible tools like SonarQube and Grafana can automate the generation of simple defect visualizations within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": ["Code Quality"]
      },
      {
        "Activity": "Fix based on accessibility",
        "Description": "Fixing defects based on accessibility involves prioritizing and addressing defects that impact the accessibility of the application, ensuring it is usable by individuals with disabilities. This enhances the user experience and ensures compliance with accessibility standards. Pipeline-compatible tools like Axe, Lighthouse, and SonarQube can automate the detection and tracking of accessibility-related defects within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": ["Code Quality"]
      },
      {
        "Activity": "High coverage of security related module and integration tests",
        "Description": "Ensuring high coverage of security-related module and integration tests involves thoroughly testing security functionalities and their interactions within the application. This practice helps in identifying and mitigating security vulnerabilities early in the development process. Pipeline-compatible tools like Selenium, OWASP ZAP, and SonarQube can automate security module and integration tests within CI/CD pipelines, ensuring comprehensive test coverage.",
        "Dimension": "Test and Verification",
        "SubDimension": "Application tests",
        "Stages": ["Code Coverage"]
      },
      {
        "Activity": "Security integration tests for important components",
        "Description": "Conducting security integration tests for important components involves testing the security aspects of key application modules and their interactions to ensure they function securely together. This practice helps in identifying and addressing vulnerabilities that may arise from component integrations. Pipeline-compatible tools like OWASP ZAP, Selenium, and SonarQube can automate security integration tests within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Application tests",
        "Stages": ["Functional Testing"]
      },
      {
        "Activity": "Security unit tests for important components",
        "Description": "Conducting security unit tests for important components involves testing individual units or functions of the application for security vulnerabilities. This ensures that each component adheres to security best practices and functions securely in isolation. Pipeline-compatible tools like Jest (with security plugins), SonarQube, and Snyk can automate security unit tests within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Application tests",
        "Stages": ["Functional Testing"]
      },
      {
        "Activity": "Exploit likelihood estimation",
        "Description": "Estimating exploit likelihood involves assessing the probability that identified vulnerabilities can be exploited by attackers. This helps prioritize remediation efforts based on risk levels. Pipeline-compatible tools like Snyk, SonarQube, and OWASP Dependency-Check can automate the estimation of exploit likelihood within CI/CD pipelines by analyzing vulnerabilities and their potential impact.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Static analysis for all components/libraries",
        "Description": "Static analysis for all components and libraries involves thoroughly examining the entire codebase, including all third-party libraries, to identify and remediate security vulnerabilities, code quality issues, and compliance violations. This comprehensive approach ensures that both custom and external code maintain high standards of security and performance. Tools like SonarQube, Fortify, and Coverity can be integrated into DevSecOps pipelines to automate the static analysis of all components and libraries during the CI/CD process.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Static analysis for all self written components",
        "Description": "Static analysis for all self-written components involves evaluating custom-developed code to identify security vulnerabilities, code quality issues, and adherence to coding standards. This ensures that internally developed components are secure and maintainable. Tools like SonarQube, ESLint, and PMD can be integrated into DevSecOps pipelines to automate the static analysis of self-written components during the CI/CD process.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Static analysis for important client side components",
        "Description": "Static analysis for important client-side components involves scrutinizing critical parts of the client-side codebase to identify and address security vulnerabilities and code quality issues. This ensures that essential client-side functionalities are robust and secure. Tools like ESLint, StyleCop, and SonarQube can be integrated into DevSecOps pipelines to automate the static analysis of key client-side components during the CI/CD process.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Static analysis for important server side components",
        "Description": "Static analysis for important server-side components involves evaluating critical parts of the server-side codebase to detect and remediate security vulnerabilities, code quality issues, and compliance violations. This ensures that essential server-side functionalities are secure and maintainable. Tools like SonarQube, Fortify, and Coverity can be integrated into DevSecOps pipelines to automate the static analysis of key server-side components during the CI/CD process.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Static Application Security Testing (SAST)"]
      }
    ],
    "PossibleStages": [
      "Code Quality",
      "Static Application Security Testing (SAST)"
    ]
  },

  "Snyk": {
    "Activities": [
      {
        "Activity": "Integration of vulnerability issues into the development process",
        "Description": "Integrating vulnerability issues into the development process involves embedding security checks and vulnerability assessments into the software development lifecycle (SDLC). This ensures that vulnerabilities are identified and addressed early, promoting a proactive approach to security. Pipeline-compatible tools like SonarQube, GitLab CI/CD, and Snyk can be integrated to automate vulnerability tracking and remediation.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": ["Dependency Scanning", "Continuous Integration"]
      },
      {
        "Activity": "Test libyear",
        "Description": "Testing libyear involves assessing the usage and maintenance of third-party libraries and dependencies to ensure they are up-to-date and free from known vulnerabilities. This practice helps in maintaining the security and stability of applications. Tools like Snyk, Dependabot, and Renovate can be integrated into DevSecOps pipelines to automate the monitoring and updating of library dependencies.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Dependency Scanning"]
      },
      {
        "Activity": "Security code review",
        "Description": "Conducting security code reviews involves systematically examining source code to identify and remediate security vulnerabilities. This practice ensures that code adheres to security best practices and reduces the risk of introducing vulnerabilities into the application. Pipeline-compatible tools like SonarQube, GitHub CodeQL, and GitLab SAST can automate security code reviews within CI/CD pipelines.",
        "Dimension": "Culture and Organization",
        "SubDimension": "Education and Guidance",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Pinning of artifacts",
        "Description": "Pinning of artifacts ensures that only specific, approved versions of dependencies and libraries are used during the build and deployment processes. This practice prevents unauthorized or unintended manipulation of artifacts, which could introduce malicious code or break functionality. By locking dependencies to known, secure versions, the integrity of the artifacts is maintained throughout the delivery pipeline.",
        "Dimension": "Build and Deployment",
        "SubDimension": "Build",
        "Stages": ["Artifact Management"]
      },
      {
        "Activity": "Evaluation of the trust of used components",
        "Description": "Evaluating the trustworthiness of used components ensures that all software and system dependencies are secure and reliable. This involves assessing the source, maintainers, and overall integrity of each component. Pipeline-compatible tools like Black Duck, Snyk, and Sonatype Nexus Lifecycle can automate the evaluation and enforce policies to whitelist trusted artifacts.",
        "Dimension": "Build and Deployment",
        "SubDimension": "Deployment",
        "Stages": ["Dependency Scanning"]
      },
      {
        "Activity": "App. Hardening Level 2",
        "Description": "Application Hardening Level 2 involves implementing advanced security measures to protect applications from a broader range of threats. This includes practices like implementing security headers, using secure authentication mechanisms, and ensuring proper session management. Pipeline-compatible tools like OWASP ZAP, Fortify, and Snyk can automate the enforcement of these advanced security measures within CI/CD pipelines.",
        "Dimension": "Implementation",
        "SubDimension": "Application Hardening",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "App. Hardening Level 2 (75%)",
        "Description": "Application Hardening Level 2 (75%) indicates substantial implementation of advanced security measures to protect applications. This includes comprehensive practices like enforcing strong authentication, implementing robust authorization controls, and ensuring secure data storage. Pipeline-compatible tools like OWASP ZAP, Fortify, and Snyk can assist in automating these advanced security measures within CI/CD pipelines.",
        "Dimension": "Implementation",
        "SubDimension": "Application Hardening",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "App. Hardening Level 3",
        "Description": "Application Hardening Level 3 represents the full implementation of advanced security measures to protect applications comprehensively. This includes integrating security into every stage of the development lifecycle, continuous monitoring, and adopting a security-first approach. Pipeline-compatible tools like OWASP ZAP, Fortify, Snyk, and SonarQube can automate and enforce these comprehensive security measures within CI/CD pipelines.",
        "Dimension": "Implementation",
        "SubDimension": "Application Hardening",
        "Stages": ["Static Application Security Testing (SAST)"]
      },
      {
        "Activity": "Inventory of production dependencies",
        "Description": "Maintaining an inventory of production dependencies involves tracking all third-party libraries, frameworks, and services that applications depend on in the production environment. This ensures that dependencies are up-to-date, secure, and compliant with organizational standards. Pipeline-compatible tools such as Dependabot, Renovate, and Snyk can automate the monitoring and management of production dependencies within CI/CD pipelines.",
        "Dimension": "Build and Deployment",
        "SubDimension": "Deployment",
        "Stages": ["Dependency Scanning"]
      },
      {
        "Activity": "Usage of a vulnerability management system",
        "Description": "Usage of a vulnerability management system involves implementing tools that continuously identify, assess, and remediate vulnerabilities within the application and infrastructure. This proactive approach ensures ongoing security and compliance by managing vulnerabilities throughout the software development lifecycle. Tools like Qualys, Nessus, and Snyk can be integrated into DevSecOps pipelines to automate vulnerability scanning and management processes.",
        "Dimension": "Test and Verification",
        "SubDimension": "Consolidation",
        "Stages": ["Dependency Scanning"]
      },
      {
        "Activity": "Security unit tests for important components",
        "Description": "Conducting security unit tests for important components involves testing individual units or functions of the application for security vulnerabilities. This ensures that each component adheres to security best practices and functions securely in isolation. Pipeline-compatible tools like Jest (with security plugins), SonarQube, and Snyk can automate security unit tests within CI/CD pipelines.",
        "Dimension": "Test and Verification",
        "SubDimension": "Application tests",
        "Stages": ["Functional Testing"]
      },
      {
        "Activity": "Exploit likelihood estimation",
        "Description": "Estimating exploit likelihood involves assessing the probability that identified vulnerabilities can be exploited by attackers. This helps prioritize remediation efforts based on risk levels. Pipeline-compatible tools like Snyk, SonarQube, and OWASP Dependency-Check can automate the estimation of exploit likelihood within CI/CD pipelines by analyzing vulnerabilities and their potential impact.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": [
          "Dependency Scanning",
          "Static Application Security Testing (SAST)"
        ]
      },
      {
        "Activity": "Software Composition Analysis (client side)",
        "Description": "Software Composition Analysis (SCA) for the client side involves scanning client-side dependencies and libraries to identify and remediate known vulnerabilities and license compliance issues. This practice ensures that client applications are secure and adhere to legal requirements. Tools like Snyk, WhiteSource, and Dependabot can be integrated into DevSecOps pipelines to automate the analysis and management of client-side software components.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Dependency Scanning"]
      },
      {
        "Activity": "Software Composition Analysis (server side)",
        "Description": "Software Composition Analysis (SCA) for the server side involves examining server-side dependencies and libraries to detect and address known vulnerabilities and license compliance issues. This ensures that server applications are secure and legally compliant. Tools like Snyk, Black Duck, and OWASP Dependency-Check can be integrated into DevSecOps pipelines to automate the analysis and management of server-side software components.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for applications",
        "Stages": ["Dependency Scanning"]
      },
      {
        "Activity": "Software Composition Analysis",
        "Description": "Software Composition Analysis (SCA) involves scanning and analyzing third-party libraries and dependencies to identify known vulnerabilities and license compliance issues. Implementing SCA ensures that all components used within the infrastructure are secure and legally compliant. Tools like Snyk, Black Duck, and OWASP Dependency-Check can be integrated into DevSecOps pipelines to automate the identification and remediation of vulnerabilities in dependencies.",
        "Dimension": "Test and Verification",
        "SubDimension": "Static depth for infrastructure",
        "Stages": ["Dependency Scanning"]
      }
    ],
    "PossibleStages": [
      "Static Application Security Testing (SAST)",
      "Dependency Scanning"
    ]
  },
  "Nmap": {
    "Activities": [
      {
        "Activity": "Test for exposed services",
        "Description": "Testing for exposed services involves identifying and assessing services that are accessible externally to ensure they are secure and do not expose vulnerabilities. This process helps in minimizing the attack surface by controlling and securing exposed endpoints. Tools like Nmap, Shodan, and OpenVAS can be integrated into DevSecOps pipelines to automate the detection and assessment of exposed services.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for infrastructure",
        "Stages": ["Vulnerability and Penetration Testing"]
      },
      {
        "Activity": "Test network segmentation",
        "Description": "Testing network segmentation involves verifying that different parts of the network are properly isolated to prevent unauthorized access and lateral movement by attackers. This ensures that a breach in one segment does not compromise the entire network. Tools like Wireshark, Cisco Network Analyzer, and Nmap can be integrated into DevSecOps pipelines to automate the testing and validation of network segmentation configurations.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for infrastructure",
        "Stages": [
          "Vulnerability and Penetration Testing",
          "Post-Deployment / Operations"
        ]
      }
    ],
    "PossibleStages": [
      "Vulnerability and Penetration Testing",
      "Post-Deployment / Operations"
    ]
  },
  "Wireshark": {
    "Activities": [
      {
        "Activity": "Test network segmentation",
        "Description": "Testing network segmentation involves verifying that different parts of the network are properly isolated to prevent unauthorized access and lateral movement by attackers. This ensures that a breach in one segment does not compromise the entire network. Tools like Wireshark, Cisco Network Analyzer, and Nmap can be integrated into DevSecOps pipelines to automate the testing and validation of network segmentation configurations.",
        "Dimension": "Test and Verification",
        "SubDimension": "Dynamic depth for infrastructure",
        "Stages": [
          "Post-Deployment / Operations",
          "Vulnerability and Penetration Testing"
        ]
      }
    ],
    "PossibleStages": [
      "Vulnerability and Penetration Testing",
      "Post-Deployment / Operations"
    ]
  }
}
