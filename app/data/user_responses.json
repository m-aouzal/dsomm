{
    "selected_level": "4",
    "stages": [
        "Security and Secret Management",
        "Monitoring & Logging",
        "Backup and Recovery"
    ],
    "tools": {
        "Backup and Recovery": {
            "custom": [],
            "standard": [
                "Azure Backup",
                "Azure Site Recovery",
                "Disaster Recovery Plan Templates (various)"
            ]
        },
        "Monitoring & Logging": {
            "custom": [],
            "standard": [
                "Datadog",
                "ELK Stack (Elasticsearch, Logstash, Kibana)",
                "Fluentd"
            ]
        },
        "Security and Secret Management": {
            "custom": [],
            "standard": [
                "AWS Secrets Manager",
                "Auth0",
                "Azure Key Vault"
            ]
        }
    },
    "activities": [
        {
            "activity": "Definition of simple BCDR practices for critical components",
            "description": "Defining simple Business Continuity and Disaster Recovery (BCDR) practices for critical components involves documenting clear procedures and responsibilities to ensure system and application availability during emergencies. This includes outlining recovery point objectives (RPOs), recovery time objectives (RTOs), service level agreements (SLAs), and failover strategies to minimize downtime and ensure rapid restoration of services.",
            "status": "implemented",
            "custom": [],
            "tools": [
                "Azure Site Recovery",
                "aaa"
            ]
        },
        {
            "activity": "Limitation of system events",
            "description": "Limiting system events involves restricting the types and frequency of system logs and events to essential information. This helps in reducing noise, improving log management efficiency, and focusing on critical security-related events. Tools such as Syslog-ng, Logstash, Splunk, Graylog, ELK Stack, Fluentd, and Nagios can be utilized to manage and filter system events effectively.",
            "status": "implemented",
            "custom": [],
            "tools": [
                "SonarQube",
                "GitLab SAST"
                "ELK Stack (Elasticsearch, Logstash, Kibana)",
                "aaa"
            ]
        },
        {
            "activity": "Centralized application logging",
            "description": "Centralized application logging involves aggregating logs from various applications into a single, centralized system. This facilitates easier monitoring, troubleshooting, and analysis of application behavior and security events. Tools like ELK Stack (Elasticsearch, Logstash, Kibana), Splunk, and Fluentd can be integrated into DevSecOps pipelines to automate the collection and centralization of application logs.",
            "status": "implemented",
            "custom": [],
            "tools": [
                "ESLint",
                "SonarQube"
            ]
        },
        {
            "activity": "Analyze logs",
            "description": "Analyzing logs involves examining system and application log data to identify patterns, detect anomalies, and uncover potential security incidents. This practice is crucial for incident detection, troubleshooting, and ensuring compliance with security policies. Pipeline-compatible tools like ELK Stack, Splunk, and Graylog can automate log analysis within CI/CD pipelines.",
            "status": "implemented",
            "custom": [],
            "tools": [
                "ESLint"
            ]
        },
        {
            "activity": "Handover of confidential parameters",
            "description": "Handover of confidential parameters involves securely transferring sensitive credentials and configuration data to deployment environments. Encryption and credential management systems are essential to protect these parameters from unauthorized access. Pipeline-compatible tools like HashiCorp Vault, AWS Secrets Manager, and Azure Key Vault facilitate secure handling and distribution of confidential parameters within CI/CD pipelines.",
            "status": "implemented",
            "custom": [],
            "tools": [
                "AWS Secrets Manager",
                "aaa"
            ]
        },
        {
            "activity": "Coverage and control metrics",
            "description": "Monitoring coverage and control metrics involves tracking various security-related metrics to assess the effectiveness of security controls and identify areas needing improvement. This ensures continuous improvement and compliance with security standards. Tools such as Prometheus, Grafana, Datadog, New Relic, Splunk, Nagios, and the ELK Stack can be utilized for comprehensive metric monitoring and visualization.",
            "status": "implemented",
            "custom": [],
            "tools": [
                "Bugzilla"
            ]
        },
        {
            "activity": "Test for stored secrets",
            "description": "Testing for stored secrets involves verifying that sensitive information, such as API keys, passwords, and certificates, are securely stored and not exposed in code repositories or configuration files. This practice prevents unauthorized access and potential security breaches. Tools like GitSecrets, TruffleHog, and Vault can be integrated into DevSecOps pipelines to automate the detection and secure storage of secrets.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Security consulting on request",
            "description": "Providing security consulting on request involves offering expert guidance and support to teams as needed to address specific security challenges or queries. This ensures that teams have access to specialized knowledge when implementing security measures. Pipeline-compatible tools like Slack and Microsoft Teams can facilitate communication and consultation requests within CI/CD workflows.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Versioning",
            "description": "Implementing versioning involves managing changes to the source code over time, enabling tracking, collaboration, and rollback capabilities. Proper versioning ensures that all code changes are documented and that teams can collaborate effectively. Pipeline-compatible tools like Git, GitHub, GitLab, and Bitbucket can automate version control processes within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Centralized system logging",
            "description": "Centralized system logging involves aggregating logs from various system components into a single, centralized repository. This enables efficient monitoring, analysis, and troubleshooting of system-level events and issues. Tools like Syslog, Graylog, and Splunk can be integrated into DevSecOps pipelines to automate the collection and centralization of system logs.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple false positive treatment",
            "description": "Simple false positive treatment involves identifying and dismissing alerts or findings that are incorrectly flagged as vulnerabilities. This helps in reducing noise and focusing on genuine security issues. Pipeline-compatible tools like SonarQube and GitLab SAST can automate the dismissal of false positives within CI/CD workflows.",
            "status": "unimplemented",
            "custom": [],
            "tools": [
                "Splunk",
                "Graylog"
            ]
        },
        {
            "activity": "Conduction of simple threat modeling on technical level",
            "description": "Conducting simple threat modeling on a technical level involves identifying potential security threats and vulnerabilities in the system's architecture and design. This helps in proactively addressing security concerns during the design phase. While pipeline-compatible tools for threat modeling are limited, methodologies like STRIDE and tools such as Microsoft Threat Modeling Tool can be utilized to standardize threat identification processes.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "App. Hardening Level 1 (50%)",
            "description": "Application Hardening Level 1 (50%) signifies partial implementation of basic security measures to protect applications. This includes some practices like input validation and error handling but may lack comprehensive coverage. Pipeline-compatible tools like ESLint and SonarQube can assist in automating the enforcement of these partial security measures within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple access control for systems",
            "description": "Implementing simple access control for systems involves setting up basic authentication and authorization mechanisms to restrict access to authorized users only. While pipeline-compatible tools for basic access control are limited, standalone solutions like SSH key management and basic firewall configurations can be employed.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "MFA for admins",
            "description": "Implementing Multi-Factor Authentication (MFA) specifically for administrators ensures that privileged accounts are secured with additional verification layers, reducing the risk of unauthorized access and potential system compromises. Pipeline-compatible tools like Azure Active Directory, Okta, and Duo Security can enforce MFA for admin accounts within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Ad-Hoc Security trainings for software developers",
            "description": "Conducting ad-hoc security trainings for software developers involves providing occasional training sessions focused on security best practices and awareness to enhance the security skills of the development team. While not directly pipeline-compatible, platforms like Pluralsight and Udemy offer security training modules that can be integrated into developer onboarding processes.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Defined build process",
            "description": "A defined build process establishes standardized procedures for compiling, building, and packaging software artifacts. This reduces the likelihood of errors and security misconfigurations by ensuring that each step is consistently executed. Implementing a well-defined build process enhances the reliability and security of the software delivery pipeline.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Contextualized Encoding",
            "description": "Contextualized Encoding involves encoding data based on its context to prevent security vulnerabilities like injection attacks. This ensures that data is handled securely depending on where and how it is used within the application. Pipeline-compatible tools like ESLint and SonarQube can assist in enforcing encoding standards within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "A patch policy is defined",
            "description": "A patch policy for all artifacts (e.g., in images) is defined. This includes specifying how often an image is rebuilt to ensure vulnerabilities are patched in a timely manner.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Automated PRs for patches",
            "description": "Fast patching of third-party components is essential. The DevOps approach is to have automated pull requests for new components, including applications, virtualized operating system components (e.g., container images), operating systems, and Infrastructure as Code/GitOps (e.g., ArgoCD based on a git repository or Terraform). Pipeline-compatible tools like Dependabot and Renovate can automate the creation of pull requests for patching dependencies.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Defined deployment process",
            "description": "Defining a deployment process ensures that there are established criteria in terms of functionalities, security, compliance, and performance, and that the artifacts meet them. This structured approach reduces the risk of deploying insecure or malfunctioning artifacts.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Inventory of production components",
            "description": "Maintaining an inventory of production components involves tracking and managing all software and hardware elements deployed in the production environment. This ensures visibility, facilitates maintenance, and aids in compliance and auditing processes. Pipeline-compatible tools such as Ansible, Puppet, Terraform, and AWS Config can automate the inventory management within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Fix based on severity",
            "description": "Fixing defects based on severity involves prioritizing and addressing defects according to their impact and criticality. High-severity defects are resolved promptly to mitigate significant risks, while lower-severity issues are scheduled accordingly. Pipeline-compatible tools like Jira, GitLab, and SonarQube can automate the prioritization and tracking of defect fixes within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Treatment of defects with severity high or higher",
            "description": "Treatment of defects with high severity or higher focuses on addressing critical and major issues that pose significant risks to the application�s functionality and security. This prioritization ensures that the most impactful defects are resolved promptly to maintain system integrity. Tools like Jira, GitLab Issues, and Bugzilla can be configured to prioritize and manage high-severity defects within DevSecOps pipelines, ensuring timely resolution.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Default settings for intensity",
            "description": "Default settings for test intensity refer to the baseline configuration of test execution frequency and scope without any optimizations. This ensures that all standard tests are executed uniformly across the pipeline. While not optimized for specific project needs, default settings provide a consistent testing foundation. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and CircleCI use default test configurations out-of-the-box.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "High test intensity",
            "description": "High test intensity involves executing an extensive suite of tests, including unit, integration, system, and security tests, to ensure comprehensive coverage and early detection of issues. This approach enhances the reliability and security of the software but may increase pipeline execution time. Tools like Jenkins, GitLab CI/CD, and CircleCI can manage high-intensity test suites by leveraging parallel execution and optimized resource allocation.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of edge encryption at transit",
            "description": "Using encryption at the edge of traffic in transit ensures that confidential information, such as authentication factors like passwords, cannot be easily sniffed by attackers performing man-in-the-middle attacks outside the organization.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple application metrics",
            "description": "Simple application metrics involve tracking basic performance indicators of applications, such as response times, error rates, and throughput. These metrics provide foundational insights into application performance and health. Tools like Prometheus, Grafana, and New Relic can be integrated into DevSecOps pipelines to automate the collection and visualization of simple application metrics.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple budget metrics",
            "description": "Simple budget metrics involve tracking basic financial indicators related to project or infrastructure spending. This includes metrics like monthly expenses, budget adherence, and cost forecasts. Tools like Grafana, Prometheus, and basic reporting features of cloud providers can be integrated into DevSecOps pipelines to automate the collection and visualization of simple budget metrics.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple system metrics",
            "description": "Simple system metrics involve tracking fundamental performance indicators of system components, such as CPU usage, memory consumption, and disk I/O. These metrics provide basic insights into system health and performance. Tools like Prometheus, Grafana, and Nagios can be integrated into DevSecOps pipelines to automate the collection and visualization of simple system metrics.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Baseline Hardening of the environment",
            "description": "Baseline hardening of the environment involves establishing a secure configuration baseline for systems and infrastructure components. This ensures that all environments adhere to organizational security standards and reduces the risk of vulnerabilities. Pipeline-compatible tools like Ansible, Puppet, and Chef can automate the enforcement of baseline configurations within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Reward of good communication",
            "description": "Rewarding good communication involves recognizing and incentivizing effective information sharing and collaboration among team members. This fosters a culture of transparency, encourages proactive security practices, and enhances overall team cohesion. Pipeline-compatible tools like Slack and Microsoft Teams can facilitate communication, while platforms like Bonusly can manage rewards and recognition within CI/CD workflows.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of different roles",
            "description": "Implementing the usage of different roles involves defining and enforcing role-based access controls (RBAC) within the application to ensure that users have appropriate permissions based on their roles. This enhances security by limiting access to sensitive functionalities and data. Pipeline-compatible tools like Auth0, Okta, and AWS IAM can automate the enforcement of role-based access controls within CI/CD pipelines.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Auth0"
            ]
        },
        {
            "activity": "Reduction of the attack surface",
            "description": "Reducing the attack surface involves minimizing the number of entry points and potential vulnerabilities in a system. This is achieved by disabling unnecessary services, removing unused software, and limiting exposed interfaces to decrease the opportunities for attackers.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Applications are running in virtualized environments",
            "description": "Running applications in virtualized environments involves deploying applications within virtual machines or containers to enhance scalability, flexibility, and security. This approach allows for efficient resource utilization and isolation of applications, reducing the risk of cross-application vulnerabilities. Pipeline-compatible tools like Docker, Kubernetes, and VMware vSphere can automate the deployment and management of applications within virtualized environments in CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Isolated networks for virtual environments",
            "description": "Implementing isolated networks for virtual environments involves segmenting network traffic to ensure that different virtual environments do not interfere with each other. This enhances security by preventing unauthorized access and limiting the spread of potential threats across environments. Pipeline-compatible tools like AWS VPC, Azure Virtual Network, and VMware NSX can automate the creation and management of isolated networks within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Virtual environments are limited",
            "description": "Limiting virtual environments involves restricting the use of virtualized resources to enhance security and control over the infrastructure. This ensures that only authorized and necessary virtual environments are deployed, reducing the attack surface. Tools like Terraform and Ansible can manage and enforce policies for virtual environment deployments within DevSecOps pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test the definition of virtualized environments",
            "description": "Testing the definition of virtualized environments involves validating the configurations and settings of virtual environments to ensure they meet security and performance standards. This includes verifying virtualization settings, network configurations, and resource allocations. Tools like Terraform, Ansible, and Packer can be integrated into DevSecOps pipelines to automate the testing and validation of virtual environment definitions.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test of the configuration of cloud environments",
            "description": "Testing the configuration of cloud environments involves verifying that cloud resources are correctly configured according to security and performance standards. This ensures that cloud deployments are secure, efficient, and compliant with organizational policies. Tools like AWS Config, Azure Resource Manager, and Google Cloud Config Connector can be integrated into DevSecOps pipelines to automate the testing and validation of cloud environment configurations.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test cluster deployment resources",
            "description": "Testing cluster deployment resources involves verifying that the resources allocated for cluster deployments are adequate and configured correctly to support application scalability and performance. This ensures that deployments are efficient and resources are optimally utilized. Tools like Terraform, Kubernetes, and Helm can be integrated into DevSecOps pipelines to automate the testing and validation of cluster deployment configurations.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test the cloud configuration",
            "description": "Testing the cloud configuration involves verifying that cloud resources are correctly configured according to security and performance standards. This ensures that cloud deployments are secure, efficient, and compliant with organizational policies. Tools like AWS Config, Azure Resource Manager, and Google Cloud Config Connector can be integrated into DevSecOps pipelines to automate the testing and validation of cloud environment configurations.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Each team has a security champion",
            "description": "Assigning a security champion to each team involves designating a team member responsible for advocating and integrating security best practices within their respective teams. This fosters a security-first mindset and ensures continuous security oversight. Pipeline-compatible tools like Confluence and Jira can support the role of security champions by providing documentation and tracking capabilities.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Regular security training of security champions",
            "description": "Providing regular security training to security champions ensures they are well-equipped with the latest security knowledge and best practices. This enables them to effectively guide their teams and address emerging security challenges. Pipeline-compatible tools like Learning Management Systems (LMS) such as Moodle or Coursera can facilitate ongoing training and certification for security champions.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Require a PR before merging",
            "description": "Requiring a Pull Request (PR) before merging ensures that all code changes are reviewed and approved by peers, maintaining code quality and security standards. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can enforce PR requirements and integrate automated checks within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Visualized logging",
            "description": "Visualized logging involves presenting log data in a visual format, such as dashboards and graphs, to facilitate easier monitoring, analysis, and identification of trends or anomalies. This enhances the ability to quickly interpret and respond to log data. Tools like Kibana, Grafana, and Splunk can be integrated into DevSecOps pipelines to provide visual representations of log data.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test for Time to Patch",
            "description": "Testing for time to patch involves evaluating the efficiency and speed at which patches are applied to address vulnerabilities. This ensures that critical updates are deployed promptly to mitigate security risks. Tools like Jenkins, GitLab CI/CD, and Puppet can be integrated into DevSecOps pipelines to automate and monitor patch deployment processes, enabling faster response times to identified vulnerabilities.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test libyear",
            "description": "Testing libyear involves assessing the usage and maintenance of third-party libraries and dependencies to ensure they are up-to-date and free from known vulnerabilities. This practice helps in maintaining the security and stability of applications. Tools like Snyk, Dependabot, and Renovate can be integrated into DevSecOps pipelines to automate the monitoring and updating of library dependencies.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Security code review",
            "description": "Conducting security code reviews involves systematically examining source code to identify and remediate security vulnerabilities. This practice ensures that code adheres to security best practices and reduces the risk of introducing vulnerabilities into the application. Pipeline-compatible tools like SonarQube, GitHub CodeQL, and GitLab SAST can automate security code reviews within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test of virtualized environments",
            "description": "Testing virtualized environments involves verifying that virtual machines and containers are configured securely and operate within defined security parameters. This ensures that the virtual infrastructure is resilient, compliant with security standards, and free from misconfigurations that could lead to vulnerabilities. Pipeline-compatible tools like Docker, Kubernetes, Ansible, and Terraform can automate the testing and validation of virtualized environments within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "App. Hardening Level 1",
            "description": "Application Hardening Level 1 involves implementing basic security measures to protect applications from common threats. This includes practices like input validation, error handling, and enforcing secure coding standards. Pipeline-compatible tools like ESLint, SonarQube, and OWASP ZAP can automate the enforcement of these basic security measures within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "MFA",
            "description": "Implementing Multi-Factor Authentication (MFA) enhances security by requiring multiple forms of verification before granting access. This reduces the risk of unauthorized access due to compromised credentials. Pipeline-compatible tools like Azure Active Directory, Okta, and Duo Security can automate MFA enforcement within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Regular security training for all",
            "description": "Providing regular security training for all employees ensures that everyone is aware of security policies, best practices, and emerging threats, fostering a security-conscious organizational culture. While pipeline-compatible tools are not directly applicable, Learning Management Systems (LMS) like Moodle or Coursera can facilitate regular training sessions.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Information security targets are communicated",
            "description": "Communicating information security targets involves clearly conveying the organization's security goals, policies, and expectations to all stakeholders, ensuring alignment and understanding across the board. This activity primarily relies on documentation and communication tools rather than pipeline-compatible tools.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple Scan",
            "description": "Conducting simple scans involves performing basic security and vulnerability assessments on the application to identify common issues. This helps in maintaining a baseline level of security and ensuring that fundamental vulnerabilities are addressed. Pipeline-compatible tools like OWASP ZAP, Nessus, and Nikto can automate simple scans within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Building and testing of artifacts in virtual environments",
            "description": "Building and testing artifacts in virtual environments involves creating isolated environments where software artifacts are compiled, built, and tested to ensure functionality and security before deployment. This process mitigates risks associated with malicious third-party systems, vulnerable libraries, or altered components during the delivery phase. Pipeline-compatible tools such as Jenkins, GitLab CI/CD, CircleCI, and Azure Pipelines can automate the build and test processes within CI/CD pipelines, enhancing security and consistency. Additionally, containerization tools like Docker and orchestration tools like Kubernetes provide isolated environments for secure artifact management.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Pinning of artifacts",
            "description": "Pinning of artifacts ensures that only specific, approved versions of dependencies and libraries are used during the build and deployment processes. This practice prevents unauthorized or unintended manipulation of artifacts, which could introduce malicious code or break functionality. By locking dependencies to known, secure versions, the integrity of the artifacts is maintained throughout the delivery pipeline.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "SBOM of components",
            "description": "Creation of a Software Bill of Materials (SBOM) involves documenting all components, dependencies, and their versions used in the application and container images during the build process. This allows for the identification and management of vulnerabilities by providing a clear inventory of all parts of the software. Pipeline-compatible tools like CycloneDX, SPDX, and Syft can automate SBOM generation within CI/CD pipelines, ensuring up-to-date and accurate component tracking.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Evaluation of the trust of used components",
            "description": "Evaluating the trustworthiness of used components ensures that all software and system dependencies are secure and reliable. This involves assessing the source, maintainers, and overall integrity of each component. Pipeline-compatible tools like Black Duck, Snyk, and Sonatype Nexus Lifecycle can automate the evaluation and enforce policies to whitelist trusted artifacts.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Environment depending configuration parameters (secrets)",
            "description": "Managing environment-dependent configuration parameters, especially secrets, is crucial for maintaining security. Using environment variables stored in platform-specific functionalities or secrets management systems ensures that sensitive information is protected. Pipeline-compatible tools like HashiCorp Vault, AWS Secrets Manager, and Kubernetes Secrets automate the management and injection of secrets into deployment environments.",
            "status": "checked",
            "custom": [],
            "tools": [
                "AWS Secrets Manager"
            ]
        },
        {
            "activity": "Regular automated tests",
            "description": "Implementing regular automated tests involves scheduling and executing a suite of tests consistently to ensure ongoing code quality and security. This practice helps in early detection of issues and maintains the reliability of the application. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and GitHub Actions can automate the execution of regular tests within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test for exposed services",
            "description": "Testing for exposed services involves identifying and assessing services that are accessible externally to ensure they are secure and do not expose vulnerabilities. This process helps in minimizing the attack surface by controlling and securing exposed endpoints. Tools like Nmap, Shodan, and OpenVAS can be integrated into DevSecOps pipelines to automate the detection and assessment of exposed services.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test network segmentation",
            "description": "Testing network segmentation involves verifying that network boundaries are properly defined and enforced to limit access between different network segments. This enhances security by containing potential breaches and reducing the lateral movement of attackers. Tools like Wireshark, Cisco Network Analyzer, and Nmap can be integrated into DevSecOps pipelines to automate the testing and validation of network segmentation configurations.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test for image lifetime",
            "description": "Testing for image lifetime involves ensuring that infrastructure images (e.g., container images) are updated and maintained within their valid lifespans to prevent security vulnerabilities and ensure compatibility. This practice helps in maintaining a secure and efficient infrastructure by avoiding the use of outdated or unsupported images. Tools like Trivy, Clair, and Docker Hub can be integrated into DevSecOps pipelines to automate the monitoring and management of image lifetimes.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Automated merge of automated PRs",
            "description": "Automated merging of pull requests for dependency updates ensures that patched dependencies are integrated into the codebase without manual intervention, provided they pass automated tests. This accelerates the patching process and reduces the risk of human error. Pipeline-compatible tools like Dependabot and Renovate often have built-in support for automatic merging of approved PRs.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Nightly build of images (base images)",
            "description": "Regularly rebuilding base images on a nightly basis ensures that any updates or patches to underlying packages are incorporated, reducing the risk of vulnerabilities in running containers. This automated process helps maintain up-to-date and secure base images. Pipeline-compatible tools like Jenkins, GitHub Actions, and GitLab CI/CD can schedule and automate nightly builds.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of a maximum lifetime for images",
            "description": "Setting a maximum lifetime for container images ensures that images are periodically updated, reducing the risk of long-running containers with unpatched vulnerabilities. This practice mitigates the risk of memory leaks and simplifies recovery from compromised containers by enforcing regular restarts or redeployments. Pipeline-compatible tools like Kubernetes and Docker can enforce image lifetimes and facilitate scheduled deployments.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Defined decommissioning process",
            "description": "A clear decommissioning process ensures the removal of unused applications from the `Inventory of production components` and, if implemented, from the `Inventory of production artifacts`. This reduces the risk of vulnerabilities in unused applications being exploited by attackers.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Inventory of production artifacts",
            "description": "A documented inventory of artifacts in production, such as container images, exists and is maintained either manually or automatically. This ensures that in case a vulnerability of high or critical severity exists, it is known where the affected artifacts are deployed.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple visualization of defects",
            "description": "Simple visualization of defects involves creating basic charts and graphs to display defect metrics, such as defect count over time or defect distribution by category. This provides a straightforward overview of the defect landscape. Pipeline-compatible tools like SonarQube and Grafana can automate the generation of simple defect visualizations within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of test and production environments",
            "description": "Usage of test and production environments involves segregating environments to ensure that testing activities do not impact production systems. This separation enhances security and stability by isolating development and testing processes from live operations. Tools like Terraform, Ansible, and Kubernetes can be integrated into DevSecOps pipelines to manage and enforce environment segregation.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Alerting",
            "description": "Alerting involves setting up notifications for specific events or thresholds to ensure timely responses to potential issues or security incidents. This enhances the ability to detect and address problems proactively. Tools like Prometheus, Grafana, and PagerDuty can be integrated into DevSecOps pipelines to automate alerting based on predefined metrics and conditions.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Security unit tests for important components",
            "description": "Conducting security unit tests for important components involves testing individual units or functions of the application for security vulnerabilities. This ensures that each component adheres to security best practices and functions securely in isolation. Pipeline-compatible tools like Jest (with security plugins), SonarQube, and Snyk can automate security unit tests within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Backup",
            "description": "Implementing backups involves creating copies of critical data and system configurations to ensure recovery in case of data loss, corruption, or disasters. This practice enhances data resilience and business continuity. Pipeline-compatible tools like Veeam, AWS Backup, and Azure Backup can automate backup processes within CI/CD pipelines.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Azure Backup"
            ]
        },
        {
            "activity": "Usage of an security account",
            "description": "Using a dedicated security account for security auditing and administrative tasks ensures that critical security operations are isolated from regular infrastructure and application accounts. This separation reduces the risk of unauthorized access and limits the potential impact of compromised accounts by restricting permissions to only necessary security-related activities.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of encryption at rest",
            "description": "Using encryption at rest ensures that data stored on physical hard disks or other storage mediums is protected. This makes it significantly harder for malicious actors to access and read sensitive information, even if they gain physical access to the storage devices.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Coverage of client side dynamic components",
            "description": "Ensuring coverage of client-side dynamic components involves thoroughly testing frontend elements that dynamically update based on user interactions or data changes. This enhances the reliability and security of the user interface by identifying and addressing vulnerabilities in dynamic components. Pipeline-compatible tools like Selenium, Cypress, and Jest can automate the testing of client-side dynamic components within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Software Composition Analysis (server side)",
            "description": "Software Composition Analysis (SCA) for the server side involves examining server-side dependencies and libraries to detect and address known vulnerabilities and license compliance issues. This ensures that server applications are secure and legally compliant. Tools like Snyk, Black Duck, and OWASP Dependency-Check can be integrated into DevSecOps pipelines to automate the analysis and management of server-side software components.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Logging of security events",
            "description": "Logging of security events involves capturing and storing security-related activities and incidents within the system. This practice is crucial for auditing, compliance, and forensic investigations. Tools like Logstash, Fluentd, and Splunk can be integrated into DevSecOps pipelines to automate the logging of security events.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Fluentd"
            ]
        },
        {
            "activity": "Monitoring of costs",
            "description": "Monitoring of costs involves tracking and analyzing the financial expenditures related to infrastructure and application deployments. This practice helps in optimizing resource usage and managing budgets effectively. Tools like AWS Cost Explorer, Azure Cost Management, and Google Cloud Cost Management can be integrated into DevSecOps pipelines to automate the monitoring and reporting of infrastructure and application costs.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Visualized metrics",
            "description": "Visualized metrics involve presenting monitoring data in graphical formats, such as charts and dashboards, to facilitate easier analysis and decision-making. This enhances the ability to quickly interpret complex data and identify trends or anomalies. Tools like Grafana, Kibana, and Datadog can be integrated into DevSecOps pipelines to automate the visualization of various metrics.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Datadog"
            ]
        },
        {
            "activity": "Coverage of hidden endpoints",
            "description": "Coverage of hidden endpoints involves testing and verifying endpoints that are not immediately visible or documented in the application's API. This ensures that all potential access points are secured and free from vulnerabilities. Tools like Burp Suite, OWASP ZAP, Postman, SoapUI, Fiddler, and Insomnia can assist in discovering and testing these hidden endpoints.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Coverage of more input vectors",
            "description": "Coverage of more input vectors involves testing applications with a wide range of input data to identify potential vulnerabilities and ensure the application can handle unexpected or malicious inputs securely. Tools like FuzzDB, Burp Suite Intruder, OWASP ZAP Fuzzer, Radamsa, Wfuzz, AFL (American Fuzzy Lop), and Peach Fuzzer can facilitate comprehensive input vector testing.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Filter outgoing traffic",
            "description": "Filtering outgoing traffic involves implementing network controls to restrict and monitor the data leaving the organization's network. This enhances security by preventing unauthorized data exfiltration and reducing the risk of malware communication. Pipeline-compatible tools like AWS Network Firewall, Azure Firewall, and Cisco ASA can automate the configuration and management of outbound traffic filters within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Approval by reviewing any new version",
            "description": "Implementing an approval process by reviewing any new version involves mandating security and quality checks before deploying new software versions. This ensures that each release meets the organization's security standards and reduces the risk of introducing vulnerabilities. Pipeline-compatible tools like GitHub Actions, GitLab CI/CD, and Jenkins can automate the approval and review process within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Dismiss stale PR approvals",
            "description": "Dismissing stale Pull Request (PR) approvals involves automatically revoking approvals that are no longer valid due to subsequent changes in the codebase. This ensures that PRs are re-reviewed to maintain code quality and security standards. Pipeline-compatible tools like GitHub Actions, GitLab CI/CD, and Jenkins can automate the dismissal of stale PR approvals within CI/CD workflows.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Immutable infrastructure",
            "description": "Implementing immutable infrastructure involves designing systems where components are never modified after deployment. Instead, any updates or changes result in new deployments. This approach enhances security by reducing the attack surface and ensuring consistency across environments. Pipeline-compatible tools like Terraform, Kubernetes, and Docker can automate the deployment of immutable infrastructure within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Infrastructure as Code",
            "description": "Infrastructure as Code (IaC) involves managing and provisioning computing infrastructure through machine-readable configuration files rather than manual processes. This practice ensures consistency, repeatability, and version control of infrastructure deployments, enhancing security and efficiency. Tools like Terraform, Ansible, Puppet, Chef, CloudFormation, Azure Resource Manager (ARM) Templates, Pulumi, SaltStack, and Google Cloud Deployment Manager support IaC implementations.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Deactivation of unused metrics",
            "description": "Deactivation of unused metrics involves identifying and disabling metrics that are no longer relevant or necessary. This optimization reduces resource consumption and focuses monitoring efforts on critical metrics. Tools like Prometheus, Grafana, and Datadog can be configured within DevSecOps pipelines to automate the identification and deactivation of unused metrics.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Datadog"
            ]
        },
        {
            "activity": "Grouping of metrics",
            "description": "Grouping of metrics involves categorizing related metrics together to enhance clarity and facilitate more effective monitoring and analysis. This organization helps in identifying trends and correlations within different metric groups. Tools like Grafana, Prometheus, and Datadog can be integrated into DevSecOps pipelines to automate the grouping and visualization of related metrics.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Datadog"
            ]
        },
        {
            "activity": "Targeted alerting",
            "description": "Implementing targeted alerting involves setting up specific alerts for critical events or thresholds to ensure prompt responses to significant issues. This enhances security and operational efficiency by focusing attention on high-impact events. Pipeline-compatible tools like PagerDuty, Opsgenie, and Datadog can automate targeted alerting within CI/CD pipelines.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Datadog"
            ]
        },
        {
            "activity": "Integration of vulnerability issues into the development process",
            "description": "Integrating vulnerability issues into the development process involves embedding security checks and vulnerability assessments into the software development lifecycle (SDLC). This ensures that vulnerabilities are identified and addressed early, promoting a proactive approach to security. Pipeline-compatible tools like SonarQube, GitLab CI/CD, and Snyk can be integrated to automate vulnerability tracking and remediation.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test for Patch Deployment Time",
            "description": "Testing for patch deployment time involves measuring and optimizing the duration required to deploy security patches to applications. This ensures timely updates and minimizes the window of vulnerability. Tools like Jenkins, GitLab CI/CD, and Ansible can automate patch deployment processes, allowing for continuous monitoring and optimization of deployment times within DevSecOps pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Creation of simple abuse stories",
            "description": "Creating simple abuse stories involves developing basic scenarios where attackers exploit common vulnerabilities. These stories assist in identifying fundamental security gaps and informing the development of effective security controls. Tools like OWASP Threat Dragon can aid in visualizing these scenarios within development workflows.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Creation of threat modeling processes and standards",
            "description": "Creating threat modeling processes and standards involves establishing structured methodologies and guidelines for identifying, assessing, and mitigating security threats during the system design and development phases. This ensures consistency and thoroughness in threat modeling efforts across the organization. Pipeline-compatible tools like Microsoft Threat Modeling Tool can be integrated to standardize threat modeling within development pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Local development security checks performed",
            "description": "Performing local development security checks involves implementing security testing and validation during the development phase on local environments. This practice ensures that security issues are identified and addressed early in the development process. Tools like Git hooks with security linters, Pre-commit hooks, and IDE-integrated security plugins can be used to automate local security checks within DevSecOps workflows.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Weak password test",
            "description": "Conducting weak password tests involves assessing the strength of passwords used within the infrastructure to ensure they meet security standards and are resistant to brute-force or guessing attacks. While tools like Hydra, John the Ripper, and Hashcat are effective for password cracking and strength testing, pipeline-compatible tools such as Burp Suite and OWASP ZAP can be integrated into CI/CD workflows to automate password strength assessments.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Role based authentication and authorization",
            "description": "Implementing role-based authentication and authorization involves defining user roles and permissions to control access to resources within the infrastructure. This ensures that users have only the necessary permissions to perform their tasks, minimizing the risk of unauthorized access. Pipeline-compatible tools such as AWS IAM, Keycloak, and Azure Active Directory can be integrated into CI/CD workflows to automate role management.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Conduction of build-it, break-it, fix-it contests",
            "description": "Conducting build-it, break-it, fix-it contests involves organizing events where teams build applications, attempt to break them by identifying vulnerabilities, and then fix the issues. This hands-on approach promotes practical security skills and fosters a culture of continuous improvement. While not pipeline-compatible, tools like GitHub Actions can automate parts of the contest workflows.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Office Hours",
            "description": "Organizing office hours involves setting aside dedicated time for team members to seek guidance, ask questions, and discuss security-related concerns with security experts or coaches, promoting an open and supportive security culture. This activity does not typically involve pipeline-compatible tools.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Coverage of sequential operations",
            "description": "Ensuring coverage of sequential operations involves testing the execution of processes that occur in a specific order within the application. This helps in identifying vulnerabilities and ensuring the correct functioning of multi-step workflows. Pipeline-compatible tools like Selenium, Cypress, and JUnit can automate the testing of sequential operations within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Conduction of simple threat modeling on business level",
            "description": "Simple threat modeling at the business level involves identifying potential security threats related to business functionalities during the product backlog creation. This early detection helps in addressing security defects before they propagate further into the development and deployment processes, ensuring that business-related security risks are managed proactively.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "App. Hardening Level 2 (75%)",
            "description": "Application Hardening Level 2 (75%) indicates substantial implementation of advanced security measures to protect applications. This includes comprehensive practices like enforcing strong authentication, implementing robust authorization controls, and ensuring secure data storage. Pipeline-compatible tools like OWASP ZAP, Fortify, and Snyk can assist in automating these advanced security measures within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "WAF baseline",
            "description": "WAF baseline implementation involves setting up a fundamental Web Application Firewall configuration that provides essential protection against common threats. This baseline serves as the foundation for further security enhancements and can be integrated into DevSecOps pipelines using tools like AWS WAF, Cloudflare WAF, and ModSecurity to automate baseline rule deployments and updates.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple mob hacking",
            "description": "Conducting simple mob hacking sessions involves organizing interactive team activities where participants collaboratively work on identifying and exploiting vulnerabilities in a controlled environment. These sessions enhance the team's understanding of security principles and improve their ability to recognize and mitigate security threats effectively.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Security Coaching",
            "description": "Security coaching involves guiding teams through security best practices and methodologies to help them internalize security habits within their development processes. By using structured coaching methods, such as the SAMM (Software Assurance Maturity Model) coaching method, teams can adopt and maintain robust security practices, leading to improved overall security posture.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Block force pushes",
            "description": "Blocking force pushes involves preventing users from overwriting commit history in the version control system, ensuring the integrity and traceability of the codebase. This enhances security by avoiding unauthorized or accidental changes that could introduce vulnerabilities. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can enforce branch protection rules to block force pushes within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Require status checks to pass",
            "description": "Requiring status checks to pass before merging ensures that all automated tests, security scans, and quality assessments have successfully completed, maintaining high code standards. Pipeline-compatible tools like GitHub Actions, GitLab CI/CD, and Jenkins can enforce status checks within CI/CD workflows.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Rolling update on deployment",
            "description": "Implementing rolling updates involves updating applications incrementally across servers or instances to minimize downtime and ensure continuous availability. This approach allows for seamless deployments and quick rollbacks in case of issues. Pipeline-compatible tools like Kubernetes, Terraform, and Jenkins can automate rolling updates within CI/CD pipelines, ensuring smooth and reliable deployments.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Security-Lessoned-Learned",
            "description": "Conducting 'lessons learned' sessions after security incidents involves analyzing the events to understand what went wrong and how similar incidents can be prevented in the future. These sessions promote continuous improvement by sharing insights and strategies with the team, thereby enhancing the organization's ability to respond to and recover from security incidents effectively.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Signing of code",
            "description": "Digitally signing commits helps to prevent unauthorized manipulation of source code. This ensures that code changes are authentic and have not been tampered with, enhancing the security and integrity of the codebase.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "API design validation",
            "description": "API design validation involves verifying that the API designs meet the required specifications, adhere to best practices, and maintain security standards. This ensures that APIs are robust, maintainable, and can be effectively integrated into the overall system architecture. Tools like Postman, Swagger (OpenAPI), and Apigee can be integrated into DevSecOps pipelines to automate API testing and validation during the CI/CD process.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test for new image version",
            "description": "Testing for new image versions involves verifying that updated infrastructure images comply with security policies and perform as expected before deployment. This ensures that new image versions do not introduce vulnerabilities or degrade system performance. Tools like Docker Compose, Kubernetes, and Jenkins can be integrated into DevSecOps pipelines to automate the testing and validation of new image versions.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Definition of a change management process",
            "description": "Defining a change management process involves establishing structured procedures for requesting, reviewing, approving, and implementing changes to the infrastructure and applications. This ensures that changes are made systematically, reducing the risk of introducing vulnerabilities or disruptions. Pipeline-compatible tools like Jira, ServiceNow, and GitLab can automate aspects of the change management process within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Automated deployment of automated PRs",
            "description": "Once automated pull requests for patching dependencies are merged, the deployment of these updates is automated to ensure that patched artifacts are deployed without manual intervention. This ensures that vulnerabilities are patched in production environments quickly. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and GitHub Actions can facilitate automated deployments.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test for unauthorized installation",
            "description": "Testing for unauthorized installation involves verifying that no unauthorized software or applications are installed within the infrastructure. This ensures that only approved and secure applications are running, reducing the risk of malicious software compromising the system. Tools like Tripwire, OSSEC, and Sysdig can be integrated into DevSecOps pipelines to automate the detection and prevention of unauthorized installations.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Inventory of production dependencies",
            "description": "Maintaining an inventory of production dependencies involves tracking all third-party libraries, frameworks, and services that applications depend on in the production environment. This ensures that dependencies are up-to-date, secure, and compliant with organizational standards. Pipeline-compatible tools such as Dependabot, Renovate, and Snyk can automate the monitoring and management of production dependencies within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Generation of response statistics",
            "description": "Generating response statistics involves collecting and analyzing data related to security incident responses to evaluate the effectiveness and efficiency of the incident management process. Pipeline-compatible tools like Prometheus and Grafana can automate the collection and visualization of response metrics within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Fix based on accessibility",
            "description": "Fixing defects based on accessibility involves prioritizing and addressing defects that impact the accessibility of the application, ensuring it is usable by individuals with disabilities. This enhances the user experience and ensures compliance with accessibility standards. Pipeline-compatible tools like Axe, Lighthouse, and SonarQube can automate the detection and tracking of accessibility-related defects within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of a vulnerability management system",
            "description": "Usage of a vulnerability management system involves implementing tools that continuously identify, assess, and remediate vulnerabilities within the application and infrastructure. This proactive approach ensures ongoing security and compliance by managing vulnerabilities throughout the software development lifecycle. Tools like Qualys, Nessus, and Snyk can be integrated into DevSecOps pipelines to automate vulnerability scanning and management processes.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Treatment of defects with severity middle",
            "description": "Treatment of defects with middle severity involves addressing issues that have a moderate impact on the application�s functionality and security. This ensures that the application maintains a balanced level of quality while prioritizing critical issues. Tools like Jira, GitLab Issues, and Bugzilla can be utilized to manage and track the resolution of middle-severity defects within DevSecOps pipelines, ensuring systematic and timely fixes.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Security integration tests for important components",
            "description": "Conducting security integration tests for important components involves testing the security aspects of key application modules and their interactions to ensure they function securely together. This practice helps in identifying and addressing vulnerabilities that may arise from component integrations. Pipeline-compatible tools like OWASP ZAP, Selenium, and SonarQube can automate security integration tests within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Deactivating of unneeded tests",
            "description": "Deactivating unneeded tests involves identifying and disabling tests that are redundant, obsolete, or no longer relevant to the current development context. This optimizes the testing process by reducing execution time and resource consumption. Tools like Jenkins and GitLab CI/CD can be configured to selectively run tests based on changes in the codebase, ensuring only necessary tests are executed.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Audit of system events",
            "description": "Auditing system events involves recording and reviewing logs and activities within the infrastructure to detect and investigate security incidents. This ensures accountability, compliance, and timely identification of suspicious activities. Pipeline-compatible tools like ELK Stack, Splunk, and Graylog can automate the collection and analysis of system event audits within CI/CD pipelines.",
            "status": "checked",
            "custom": [],
            "tools": [
                "ELK Stack (Elasticsearch, Logstash, Kibana)"
            ]
        },
        {
            "activity": "Exploit likelihood estimation",
            "description": "Estimating exploit likelihood involves assessing the probability that identified vulnerabilities can be exploited by attackers. This helps prioritize remediation efforts based on risk levels. Pipeline-compatible tools like Snyk, SonarQube, and OWASP Dependency-Check can automate the estimation of exploit likelihood within CI/CD pipelines by analyzing vulnerabilities and their potential impact.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of internal encryption at transit",
            "description": "Using encryption internally, such as within a cluster, ensures that even if an attacker gains internal access, sniffing credentials becomes significantly more difficult. This protects against man-in-the-middle attacks within the organization's internal network.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of security by default for components",
            "description": "Implementing security by default for components, such as images, libraries, and applications, ensures that they are hardened against common vulnerabilities. This involves configuring operating systems and services with security best practices to reduce the attack surface and prevent unauthorized access.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Software Composition Analysis (client side)",
            "description": "Software Composition Analysis (SCA) for the client side involves scanning client-side dependencies and libraries to identify and remediate known vulnerabilities and license compliance issues. This practice ensures that client applications are secure and adhere to legal requirements. Tools like Snyk, WhiteSource, and Dependabot can be integrated into DevSecOps pipelines to automate the analysis and management of client-side software components.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Static analysis for important client side components",
            "description": "Static analysis for important client-side components involves scrutinizing critical parts of the client-side codebase to identify and address security vulnerabilities and code quality issues. This ensures that essential client-side functionalities are robust and secure. Tools like ESLint, StyleCop, and SonarQube can be integrated into DevSecOps pipelines to automate the static analysis of key client-side components during the CI/CD process.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Static analysis for important server side components",
            "description": "Static analysis for important server-side components involves evaluating critical parts of the server-side codebase to detect and remediate security vulnerabilities, code quality issues, and compliance violations. This ensures that essential server-side functionalities are secure and maintainable. Tools like SonarQube, Fortify, and Coverity can be integrated into DevSecOps pipelines to automate the static analysis of key server-side components during the CI/CD process.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Test for malware",
            "description": "Testing for malware involves scanning and analyzing infrastructure components to detect and remediate malicious software or code. This ensures that the infrastructure remains secure and free from malware threats. Tools like ClamAV, Malwarebytes, and Sophos can be integrated into DevSecOps pipelines to automate malware detection and removal processes.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Advanced availability and stability metrics",
            "description": "Advanced availability and stability metrics involve tracking detailed performance indicators to assess the reliability and resilience of systems. This includes metrics like uptime, latency, error rates, and resource utilization. Tools like Prometheus, Grafana, and Datadog can be integrated into DevSecOps pipelines to automate the collection and visualization of advanced availability and stability metrics, enabling proactive system management.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Datadog"
            ]
        },
        {
            "activity": "Conduction of war games",
            "description": "Conducting war games involves simulating real-world cyberattack scenarios to test the organization's incident response capabilities and identify potential security weaknesses. This practice enhances preparedness, improves coordination among teams, and strengthens overall security posture. Pipeline-compatible tools like SimSpace and BattleEye can facilitate the automation and integration of war games within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": ".gitignore",
            "description": "Configuring a .gitignore file involves specifying files and directories that should be excluded from version control to prevent sensitive information, build artifacts, and unnecessary files from being tracked. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can utilize .gitignore configurations to streamline version control processes within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Usage of a chaos monkey",
            "description": "Using a chaos monkey involves intentionally introducing failures into the system to test its resilience and fault tolerance. This practice helps identify weaknesses and ensures that the infrastructure can withstand unexpected disruptions. Pipeline-compatible tools like Gremlin, Chaos Toolkit, and AWS Fault Injection Simulator can automate chaos engineering experiments within CI/CD pipelines.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Screens with metric visualization",
            "description": "Creating screens with metric visualization involves designing and implementing dashboards that display key performance and security metrics. This provides real-time insights into system performance and security posture, enabling timely decision-making and response. Pipeline-compatible tools like Grafana, Kibana, and Datadog can automate the creation and updating of metric visualization dashboards within CI/CD pipelines.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Datadog"
            ]
        },
        {
            "activity": "Conduction of collaborative team security checks",
            "description": "Conducting collaborative team security checks involves teams working together to review and assess the security posture of their applications and infrastructure. This collaborative approach fosters a shared responsibility for security, enhances knowledge sharing, and ensures that diverse perspectives are considered in identifying and mitigating security risks. While not directly pipeline-compatible, tools like Jira and Confluence can facilitate collaboration and tracking of security checks.",
            "status": "unimplemented",
            "custom": [],
            "tools": []
        },
        {
            "activity": "Simple system metrics",
            "description": "Simple system metrics involve tracking fundamental performance indicators of system components, such as CPU usage, memory consumption, and disk I/O. These metrics provide basic insights into system health and performance. Tools like Prometheus, Grafana, and Nagios can be integrated into DevSecOps pipelines to automate the collection and visualization of simple system metrics.",
            "status": "checked",
            "custom": [],
            "tools": [
                "Grafana"
            ]
        }
    ]
}