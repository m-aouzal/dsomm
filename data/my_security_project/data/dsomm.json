[
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for stored secrets",
        "Level": "1",
        "Description": "",
        "Risk": "Stored secrets in git history, in container images or directly in code shouldn't exists because they might be exposed to unauthorized parties.",
        "Measure": "Test for secrets in code, container images and history",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Baseline Hardening of the environment",
        "Level": "2",
        "Description": "",
        "Risk": "Using default configurations for a cluster environment leads to potential risks.",
        "Measure": "Harden environments according to best practices. Level 1 and partially level 2 from hardening practices like 'CIS Kubernetes Bench for Security' should be considered.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Security consulting on request",
        "Level": "1",
        "Description": "",
        "Risk": "Not asking a security expert when questions regarding security appear might lead to flaws.",
        "Measure": "Security consulting to teams is given on request. The security consultants can be internal or external.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage analysis",
        "Level": "5",
        "Description": "",
        "Risk": "Parts of the service are not still covered by tests.",
        "Measure": "Check that there are no missing paths in the application with coverage-tools.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "High",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Reward of good communication",
        "Level": "2",
        "Description": "",
        "Risk": "Employees are not getting excited about security.",
        "Measure": "Good communication and transparency encourages cross-organizational support. Gamification of security is also known to help, examples include T-Shirts, mugs, cups, gift cards and 'High-Fives'.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Coverage and control metrics",
        "Level": "4",
        "Description": "",
        "Risk": "The effectiveness of configuration, patch and vulnerability management is unknown.",
        "Measure": "Usage of Coverage- and control-metrics to show the effectiveness of the security program. Coverage is the degree in which a specific security control for a specific target group is applied with all resources. The control degree shows the actual application of security standards and security-guidelines. Examples are gathering information on anti-virus, anti-rootkits, patch management, server configuration and vulnerability management.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage analysis",
        "Level": "5",
        "Description": "",
        "Risk": "Parts of the service are not still covered by tests.",
        "Measure": "Check that there are no missing paths in the application with coverage-tools.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "High",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage of hidden endpoints",
        "Level": "3",
        "Description": "",
        "Risk": "Hidden endpoints of the service are not getting tracked.",
        "Measure": "Hidden endpoints are getting detected and included in the vulnerability scan.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage of more input vectors",
        "Level": "3",
        "Description": "",
        "Risk": "Parts of the service are not covered. For example specially formatted or coded parameters are not getting detected as parameter (e.g. parameters in REST-like URLs, parameters in JSON-Format or base64-coded parameters).",
        "Measure": "Special parameter and special encodings are defined, so that they get fuzzed by the used vulnerability scanners.",
        "Knowledge": "",
        "Resources": "Low",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Usage of different roles",
        "Level": "2",
        "Description": "",
        "Risk": "Parts of the service are not covered during the scan, because a login is not performed.",
        "Measure": "Integration of authentication with all roles used in the service.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Metrics are combined with tests",
        "Level": "5",
        "Description": "",
        "Risk": "Changes might cause high load due to programming errors.",
        "Measure": "Metrics during tests helps to identify programming errors.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Reduction of the attack surface",
        "Level": "2",
        "Description": "Distroless images are minimal, stripped-down base images that contain only the essential components required to run your application. They do not include package managers, shells, or any other tools that are commonly found in standard Linux distributions. Using distroless images can help reduce the attack surface and overall size of your container images.",
        "Risk": "Components, dependencies, files or file access rights might have vulnerabilities, but the they are not needed.",
        "Measure": "Removal of unneeded components, dependencies, files or file access rights. For container images the usage of distroless images is recommended.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of war games",
        "Level": "4",
        "Description": "",
        "Risk": "Understanding incident response plans during an incident is hard and ineffective.",
        "Measure": "War Games like activities help train for incidents. Security SMEs create attack scenarios in a testing environment enabling the trainees to learn how to react in case of an incident.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Applications are running in virtualized environments",
        "Level": "2",
        "Description": "",
        "Risk": "Through a vulnerability in one service on a server, the attacker gains access to other services running on the same server.",
        "Measure": "Applications are running in a dedicated and isolated virtualized environments.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Filter outgoing traffic",
        "Level": "3",
        "Description": "",
        "Risk": "A compromised infrastructure component might try to send out stolen data.",
        "Measure": "Having a whitelist and explicitly allowing egress traffic provides the ability to stop unauthorized data leakage.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Isolated networks for virtual environments",
        "Level": "2",
        "Description": "",
        "Risk": "Virtual environments in default settings are able to access other virtual environments on the network stack. By using virtual machines, it is often possible to connect to other virtual machines. By using docker, one bridge is used by default so that all containers on one host can communicate with each other.",
        "Measure": "The communication between virtual environments is controlled and regulated.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Virtual environments are limited",
        "Level": "2",
        "Description": "",
        "Risk": "Denial of service (internally by an attacker or unintentionally by a bug) on one service effects other services",
        "Measure": "All virtual environments are using resource limits on hard disks, memory and CPU",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the definition of virtualized environments",
        "Level": "2",
        "Description": "",
        "Risk": "The definition of virtualized environments (e.g. via <i>Dockerfile</i>) might contain unsecure configurations.",
        "Measure": "Test the definition of virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Limitation of system events",
        "Level": "3",
        "Description": "",
        "Risk": "System events (system calls) can lead to privilege escalation.",
        "Measure": "System calls are limited.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test of the configuration of cloud environments",
        "Level": "2",
        "Description": "",
        "Risk": "Standard hardening practices for cloud environments are not performed leading to vulnerabilities.",
        "Measure": "With the help of tools the configuration of virtual environments are tested.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test cluster deployment resources",
        "Level": "2",
        "Description": "",
        "Risk": "The deployment configuration (e.g. kubernetes deployment resources) might contain unsecured configurations.",
        "Measure": "Test the deployment configuration for virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the cloud configuration",
        "Level": "2",
        "Description": "",
        "Risk": "Standard hardening practices for cloud environments are not performed leading to vulnerabilities.",
        "Measure": "With the help of tools, the configuration of virtual environments are tested.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Each team has a security champion",
        "Level": "2",
        "Description": "Implement a program where each software development team has a member considered a âSecurity Championâ who is the liaison between Information Security and developers. Depending on the size and structure of the team the âSecurity Championâ may be a software developer, tester, or a product manager. The âSecurity Championâ has a set number of hours per week for Information Security related activities. They participate in periodic briefings to increase awareness and expertise in different security disciplines. âSecurity Championsâ have additional training to help develop these roles as Software Security subject-matter experts. You may need to customize the way you create and support âSecurity Championsâ for cultural reasons. The goals of the position are to increase effectiveness and efficiency of application security and compliance and to strengthen the relationship between various teams and Information Security. To achieve these objectives, âSecurity Championsâ assist with researching, verifying, and prioritizing security and compliance related software defects. They are involved in all Risk Assessments, Threat Assessments, and Architectural Reviews to help identify opportunities to remediate security defects by making the architecture of the application more resilient and reducing the attack threat surface. Source: [OWASP SAMM](https://owaspsamm.org/model/governance/education-and-guidance/stream-b/)",
        "Risk": "No one feels directly responsible for security and the security champion does not have enough time to allocate to each team.",
        "Measure": "Each team defines an individual to be responsible for security. These individuals are often referred to as 'security champions'",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Regular security training of security champions",
        "Level": "2",
        "Description": "",
        "Risk": "Understanding security is hard, even for security champions.",
        "Measure": "Regular security training of security champions.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Process",
        "Activity": "Approval by reviewing any new version",
        "Level": "3",
        "Description": "",
        "Risk": "An individual might forget to implement security measures to protect source code or infrastructure components.",
        "Measure": "On each new version (e.g. Pull Request) of source code or infrastructure components a security peer review of the changes is performed (two eyes principle) and approval given by the reviewer.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Dismiss stale PR approvals",
        "Level": "3",
        "Description": "",
        "Risk": "Intentional or accidental alterations in critical branches like main (or master) through post-approval code additions.",
        "Measure": "Implement a policy where any commits made after a pull request has been approved automatically revoke that approval, necessitating a fresh review and re-approval process.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Require a PR before merging",
        "Level": "2",
        "Description": "",
        "Risk": "Intentional or accidental alterations in critical branches like main (or master).",
        "Measure": "Define source code management system policies (e.g. branch protection rules, mandatory code reviews from at least one person, ...) to ensure that changes to critical branches are only possible under defined conditions. These policies can be implemented at repository level or organization level, depending on the source code management system.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": ".gitignore",
        "Level": "4",
        "Description": "",
        "Risk": "Unintended leakage of secrets, debug, or workstation specific data",
        "Measure": ".gitignore files help prevent accidental commits of secrets, debug, or workstation specific data",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Versioning",
        "Level": "1",
        "Description": "",
        "Risk": "Deployment of untracked artifacts.",
        "Measure": "Version artifacts in order to identify deployed features and issues. This includes application and infrastructure code, jenkins configuration, container and virtual machine images.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Immutable infrastructure",
        "Level": "3",
        "Description": "",
        "Risk": "The availability of IT systems might be disturbed due to components failures",
        "Measure": "Redundancies in the IT systems",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Infrastructure as Code",
        "Level": "3",
        "Description": "",
        "Risk": "No tracking of changes in systems might lead to errors in the configuration. In additions, it might lead to unauthorized changes. An examples is jenkins.",
        "Measure": "Systems are setup by code. A full environment can be provisioned. In addition, software like Jenkins 2 can be setup and configured in in code too. The code should be stored in a version control system.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of a chaos monkey",
        "Level": "4",
        "Description": "",
        "Risk": "Due to manual changes on a system, they are not replaceable anymore. In case of a crash it might happen that a planned redundant system is unavailable. In addition, it is hard to replay manual changes.",
        "Measure": "A randomized periodically shutdown of systems makes sure, that nobody will perform manual changes to a system.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Centralized application logging",
        "Level": "3",
        "Description": "",
        "Risk": "Local stored logs can be unauthorized manipulated by attackers with system access or might be corrupt after an incident. In addition, it is hard to perform an correlation of logs. This leads attacks, which can be performed silently.",
        "Measure": "A centralized logging system is used and applications logs (including application exceptions) are shipped to it.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Centralized system logging",
        "Level": "1",
        "Description": "",
        "Risk": "Local stored system logs can be unauthorized manipulated by attackers or might be corrupt after an incident. In addition, it is hard to perform a aggregation of logs.",
        "Measure": "By using centralized logging logs are protected against unauthorized modification.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Correlation of security events",
        "Level": "5",
        "Description": "",
        "Risk": "Detection of security related events with hints on different systems/tools/metrics is not possible.",
        "Measure": "Events are correlated on one system. For example the correlation and visualization of failed login attempts combined with successful login attempts.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Very High",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "PII logging concept",
        "Level": "5",
        "Description": "",
        "Risk": "Personal identifiable information (PII) is logged and the privacy law (e.g. General Data Protection Regulation) is not followed.",
        "Measure": "A concept how to log PII is documented and applied.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Visualized logging",
        "Level": "2",
        "Description": "",
        "Risk": "System and application protocols are not visualized properly which leads to no or very limited logging assessment. Specially developers might have difficulty to read applications logs with unusually tools like the Linux tool 'cat'",
        "Measure": "Protocols are visualized in a simple to use real time monitoring system. The GUI gives the ability to search for special attributes in the protocol.",
        "Knowledge": "Low (one discipline)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Deactivation of unused metrics",
        "Level": "3",
        "Description": "",
        "Risk": "High resources are used while gathering unused metrics.",
        "Measure": "Deactivation of unused metrics helps to free resources.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Grouping of metrics",
        "Level": "3",
        "Description": "",
        "Risk": "The analysis of metrics takes long.",
        "Measure": "Meaningful grouping of metrics helps to speed up analysis.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Screens with metric visualization",
        "Level": "4",
        "Description": "",
        "Risk": "Security related information is discovered too late during an incident.",
        "Measure": "By having an internal accessible screen with a security related dashboards helps to visualize incidents.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Targeted alerting",
        "Level": "3",
        "Description": "",
        "Risk": "People are bored (ignorant) of incident alarm messages, as they are not responsible to react.",
        "Measure": "By the definition of target groups for incidents people are only getting alarms for incidents they are in charge for.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Integration of vulnerability issues into the development process",
        "Level": "3",
        "Description": "",
        "Risk": "To read console output of the build server to search for vulnerabilities might be difficult. Also, to check a vulnerability management system might not be a daily task for a developer.",
        "Measure": "Vulnerabilities are tracked in the teams issue system (e.g. jira).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Simple false positive treatment",
        "Level": "1",
        "Description": "",
        "Risk": "As false positive occur during each test, all vulnerabilities might be ignored.",
        "Measure": "False positives are suppressed so they will not show up on the next tests again. Most security tools have the possibility to suppress false positives. A Vulnerability Management System might be used.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Dead code elimination",
        "Level": "5",
        "Description": "",
        "Risk": "Dead code increases the attack surface (use of hard coded credentials and variables, sensitive information)",
        "Measure": "Collection of unused code and then manual removal of unused code.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Exclusion of source code duplicates",
        "Level": "5",
        "Description": "",
        "Risk": "Duplicates in source code might influence the stability of the application.",
        "Measure": "Automatic Detection and manual removal of duplicates in source code.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test for Patch Deployment Time",
        "Level": "3",
        "Description": "",
        "Risk": "Automatic PRs for dependencies are overlooked resulting in known vulnerabilities in production artifacts.",
        "Measure": "Test of the Patch Deployment Time. This activity is not repeated in the Sub-Dimension \"\"Static depth for infrastructure\"\", but it applies to infrastructure as well.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test for Time to Patch",
        "Level": "2",
        "Description": "",
        "Risk": "Automatic PRs for dependencies are overlooked resulting in known vulnerabilities in production artifacts.",
        "Measure": "Test of the Time to Patch (e.g. based on Mean Time to Close automatic PRs) This activity is not repeated in the Sub-Dimension \"\"Static depth for infrastructure\"\", but it applies to infrastructure as well.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test libyear",
        "Level": "2",
        "Description": "",
        "Risk": "Vulnerabilities in running artifacts stay for long and might get exploited.",
        "Measure": "Test `libyear`, which provides a good insight how good patch management is.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of simple threat modeling on technical level",
        "Level": "1",
        "Description": "Threat modeling is a structured activity for identifying, evaluating, and managing system threats, architectural design flaws, and recommended security mitigations. It is typically done as part of the design phase or as part of a security assessment. Threat modeling is a team exercise, including product owners, architects, security champions, and security testers. At this maturity level, expose teams and stakeholders to threat modeling to increase security awareness and to create a shared vision on the security of the system. At maturity level 1, you perform threat modeling ad-hoc for high-risk applications and use simple threat checklists, such as STRIDE. Avoid lengthy workshops and overly detailed lists of low-relevant threats. Perform threat modeling iteratively to align to more iterative development paradigms. If you add new functionality to an existing application, look only into the newly added functions instead of trying to cover the entire scope. A good starting point is the existing diagrams that you annotate during discussion workshops. Always make sure to persist the outcome of a threat modeling discussion for later use. Your most important tool to start threat modeling is a whiteboard, smartboard, or a piece of paper. Aim for security awareness, a simple process, and actionable outcomes that you agree upon with your team. Once requirements are gathered and analysis is performed, implementation specifics need to be defined. The outcome of this stage is usually a diagram outlining data flows and a general system architecture. This presents an opportunity for both threat modeling and attaching security considerations to every ticket and epic that is the outcome of this stage. Source: https://owaspsamm.org/model/design/threat-assessment/stream-b/ There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/) article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling) one. A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/). OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling) on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html). Moreover, if you're following OWASP SAMM, it has a short section on [Threat Assessment](https://owaspsamm.org/model/design/threat-assessment/). There's a few projects that can help with creating Threat Models at this stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec) is another. > Note: _A threat model can be as simple as a data flow diagram with attack vectors on every flow and asset and equivalent remediations. An example can be found below._ ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png \"\"Threat Model\"\") Last, if the organizations maps Features to Epics, the Security Knowledge Framework (SKF) can be used to facilitate this process by leveraging it's questionnaire function. ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png \"\"SKF\"\") This practice has the side effect that it trains non-security specialists to think like attackers. The outcomes of this stage should help lay the foundation of secure design and considerations. **Example Low Maturity Scenario:** Following vague feature requirements the design includes caching data to a local unencrypted database with a hardcoded password. Remote data store access secrets are hardcoded in the configuration files. All communication between backend systems is plaintext. Frontend serves data over GraphQL as a thin layer between caching system and end user. GraphQL queries are dynamically translated to SQL, Elasticsearch and NoSQL queries. Access to data is protected with basic auth set to _1234:1234_ for development purposes. Source: OWASP Project Integration Project",
        "Risk": "Technical related threats are discovered too late in the development and deployment process.",
        "Measure": "Threat modeling of technical features is performed during the product sprint planning.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of advanced abuse stories",
        "Level": "5",
        "Description": "",
        "Risk": "Simple user stories are not going deep enough. Relevant security considerations are performed. Security flaws are discovered too late in the development and deployment process",
        "Measure": "Advanced abuse stories are created as part of threat modeling activities.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of simple abuse stories",
        "Level": "3",
        "Description": "",
        "Risk": "User stories mostly don't consider security implications. Security flaws are discovered too late in the development and deployment process.",
        "Measure": "Abuse stories are created during the creation of user stories.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of threat modeling processes and standards",
        "Level": "3",
        "Description": "",
        "Risk": "Inadequate identification of business and technical risks.",
        "Measure": "Creation of threat modeling processes and standards through the organization helps to enhance the security culture and provide more structure to the threat model exercises.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Microservice-architecture",
        "Level": "5",
        "Description": "",
        "Risk": "Monolithic applications are hard to test.",
        "Measure": "A microservice-architecture helps to have small components, which are more easy to test.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of collaborative team security checks",
        "Level": "4",
        "Description": "",
        "Risk": "Development teams limited insight over security practices.",
        "Measure": "Mutual security testing the security of other teams project enhances security awareness and knowledge.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of collaborative security checks with developers and system administrators",
        "Level": "5",
        "Description": "",
        "Risk": "Security checks by external companies do not increase the understanding of an application/system for internal employees.",
        "Measure": "Periodically security reviews of source code (SCA), in which security SME, developers and operations are involved, are effective at increasing the robustness of software and the security knowledge of the teams involved.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Security code review",
        "Level": "2",
        "Description": "- New vulnerabilities may be found before reaching production. - Old vulnerabilities are found and fixed.",
        "Risk": "Understanding security is hard.",
        "Measure": "The following areas of code tend to have a high-risk of containing security vulnerabilities: - Crypto implementations / usage - Parser, unparser - System configuration - Authentication, authorization - Session management - Request throttling - :unicorn: (self-developed code, only used in that one software)",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Analyze logs",
        "Level": "3",
        "Description": "",
        "Risk": "Not aware of attacks happening.",
        "Measure": "Check logs for keywords.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test of virtualized environments",
        "Level": "2",
        "Description": "",
        "Risk": "Virtualized environments (e.g. via <i>Container Images</i>) might contains unsecure configurations.",
        "Measure": "Test virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 1",
        "Level": "2",
        "Description": "To tackle the security of code developed in-house, OWASP offers an extensive collection of [Cheatsheets](https://cheatsheetseries.owasp.org/) demonstrating how to implement features securely. Moreover, the Security Knowledge Framework[1] offers an extensive library of code patterns spanning several programming languages. These patterns can be used to not only jump-start the development process, but also do so securely. [...] The Requirements gathering process tries to answer the question: _\"\"What is the system going to do?\"\"_ At this stage, the [SAMM project](https://owaspsamm.org/model/) offers 3 distinct maturity levels covering both [in-house](https://owaspsamm.org/model/design/security-requirements/stream-a/) software development and [third party](https://owaspsamm.org/model/design/security-requirements/stream-b/) supplier security. ![SAMM Requirements](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/OWASP-in0.png) Organizations can use these to add solid security considerations at the start of the Software Development or Procurement process. These general security considerations can be audited by using a subsection of the ASVS controls in section V1 as a questionnaire. This process attempts to ensure that every feature has concrete security considerations. In case of internal development and if the organization maps Features to Epics, the [Security Knowledge Framework](https://securityknowledgeframework.org/) can be used to facilitate this process by leveraging its questionnaire function, shown below. Source: [OWASP Project Integration](https://raw.githubusercontent.com/OWASP/www-project-integration-standards/master/writeups/owasp_in_sdlc/index.md)",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 1 * OWASP Mobile Application Security Verification Standard in all applications provides a good baseline. Implement 95%-100% of the recommendations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 1 (50%)",
        "Level": "1",
        "Description": "To tackle the security of code developed in-house, OWASP offers an extensive collection of [Cheatsheets](https://cheatsheetseries.owasp.org/) demonstrating how to implement features securely. Moreover, the Security Knowledge Framework[1] offers an extensive library of code patterns spanning several programming languages. These patterns can be used to not only jumpstart the development process, but also do so securely. [...] The Requirements gathering process tries to answer the question: _\"\"What is the system going to do?\"\"_ At this stage, the [SAMM project](https://owaspsamm.org/model/) offers 3 distinct maturity levels covering both [in-house](https://owaspsamm.org/model/design/security-requirements/stream-a/) software development and [third party](https://owaspsamm.org/model/design/security-requirements/stream-b/) supplier security. ![SAMM Requirements](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/OWASP-in0.png) Organizations can use these to add solid security considerations at the start of the Software Development or Procurement process. These general security considerations can be audited by using a subsection of the ASVS controls in section V1 as a questionnaire. This process attempts to ensure that every feature has concrete security considerations. In case of internal development and if the organization maps Features to Epics, the [Security Knowledge Framework](https://securityknowledgeframework.org/) can be used to facilitate this process by leveraging its questionnaire function, shown below. Source: [OWASP Project Integration](https://raw.githubusercontent.com/OWASP/www-project-integration-standards/master/writeups/owasp_in_sdlc/index.md)",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 1 * OWASP Mobile Application Security Verification Standard in all applications provides a good baseline. Implement 50% of the recommendations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Hardening of the Environment",
        "Level": "4",
        "Description": "",
        "Risk": "Using default configurations for a cluster environment leads to potential risks.",
        "Measure": "Harden environments according to best practices. Level 2 and partially level 3 from hardening practices like 'CIS Kubernetes Bench for Security' should be considered.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "WAF Advanced",
        "Level": "5",
        "Description": "The advanced WAF setup is designed to ensure all data is in the correct format and any superfluous input parameters are automatically rejected. It includes machine learning algorithms to detect anomalies, custom-developed rules for real-time traffic analysis, and seamless integration with existing security infrastructures to adapt to the ever-changing threat landscape.",
        "Risk": "The presence of sophisticated threats necessitates a robust defense strategy where application inputs are meticulously scrutinized for security breaches, including advanced persistent threats and zero-day vulnerabilities.",
        "Measure": "An advanced WAF protection level includes rigorous input validation, rejecting any parameters not explicitly required, and custom rule sets that are dynamically updated in response to emerging threats.",
        "Knowledge": "",
        "Resources": "",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Local development security checks performed",
        "Level": "3",
        "Description": "",
        "Risk": "Creating and developing code contains code smells and quality issues.",
        "Measure": "Integration of quality and linting plugins with interactive development environment (IDEs). Implement pre-commit checks to prevent secrets & other security issues being commit to source code.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Weak password test",
        "Level": "3",
        "Description": "",
        "Risk": "Weak passwords in components like applications or systems, specially for privileged accounts, lead to take over of that account.",
        "Measure": "Automatic brute force attacks are performed. Specially the usage of standard accounts like 'admin' and employee user-ids is recommended.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for stored secrets",
        "Level": "1",
        "Description": "",
        "Risk": "Stored secrets in git history, in container images or directly in code shouldn't exists because they might be exposed to unauthorized parties.",
        "Measure": "Test for secrets in code, container images and history",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Role based authentication and authorization",
        "Level": "3",
        "Description": "",
        "Risk": "Everyone is able to get unauthorized access to information on systems or to modify information unauthorized on systems.",
        "Measure": "The usage of a (role based) access control helps to restrict system access to authorized users.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Simple access control for systems",
        "Level": "1",
        "Description": "",
        "Risk": "Attackers a gaining access to internal systems and application interfaces",
        "Measure": "All internal systems are using simple authentication",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "MFA",
        "Level": "2",
        "Description": "",
        "Risk": "One factor authentication is more vulnerable to brute force attacks and is considered less secure.",
        "Measure": "Two ore more factor authentication for all accounts on all (important) systems and applications",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "MFA for admins",
        "Level": "1",
        "Description": "",
        "Risk": "One factor authentication is more vulnerable to brute force attacks and is considered less secure.",
        "Measure": "Two ore more factor authentication for all privileged accounts on systems and applications",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Ad-Hoc Security trainings for software developers",
        "Level": "1",
        "Description": "",
        "Risk": "Understanding security is hard and personnel needs to be trained on it. Otherwise, flaws like an SQL Injection might be introduced into the software which might get exploited.",
        "Measure": "Provide security awareness training for all personnel involved in software development Ad-Hoc.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of build-it, break-it, fix-it contests",
        "Level": "3",
        "Description": "",
        "Risk": "Understanding security is hard, even for security champions and the conduction of security training often focuses on breaking a component instead of building a component secure.",
        "Measure": "The build-it, break-it, fix-it contest allows to train people with security related roles like security champions the build, break and fix part of a secure application. This increases the learning of building secure components.",
        "Knowledge": "",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Office Hours",
        "Level": "3",
        "Description": "",
        "Risk": "Developers and Operations are not in contact with the security team and therefore do not ask prior implementation of (known or unknown) threats-",
        "Measure": "As a security team, be open for questions and hints during defined office hours. x x d",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Regular security training for all",
        "Level": "2",
        "Description": "Conduct security awareness training for all roles currently involved in the management, development, testing, or auditing of the software. The goal is to increase the awareness of application security threats and risks, security best practices, and secure software design principles. Develop training internally or procure it externally. Ideally, deliver training in person so participants can have discussions as a team, but Computer-Based Training (CBT) is also an option. Course content should include a range of topics relevant to application security and privacy, while remaining accessible to a non-technical audience. Suitable concepts are secure design principles including Least Privilege, Defense-in-Depth, Fail Secure (Safe), Complete Mediation, Session Management, Open Design, and Psychological Acceptability. Additionally, the training should include references to any organization-wide standards, policies, and procedures defined to improve application security. The OWASP Top 10 vulnerabilities should be covered at a high level. Training is mandatory for all employees and contractors involved with software development and includes an auditable sign-off to demonstrate compliance. Consider incorporating innovative ways of delivery (such as gamification) to maximize its effectiveness and combat desensitization. [Source: OWASP SAMM 2](https://owaspsamm.org/model/governance/education-and-guidance/stream-a/)",
        "Risk": "Understanding security is hard.",
        "Measure": "Provide security awareness training for all internal personnel involved in software development on a regular basis like twice in a year for 1-3 days.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Regular security training for externals",
        "Level": "4",
        "Description": "",
        "Risk": "Understanding security is hard.",
        "Measure": "Provide security awareness training for all personnel including externals involved in software development on a regular basis.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Information security targets are communicated",
        "Level": "2",
        "Description": "",
        "Risk": "Employees don't know their organizations security targets. Therefore security is not considered during development and administration as much as it should be.",
        "Measure": "Transparent and timely communication of the security targets by senior management is essential to ensure teams' buy-in and support.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Aligning security in teams",
        "Level": "4",
        "Description": "",
        "Risk": "The concept of Security Champions might suggest that only he/she is responsible for security. However, everyone in the project team should be responsible for security.",
        "Measure": "By aligning security Subject Matter Experts with project teams, a higher security standard can be achieved.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "Very High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage of sequential operations",
        "Level": "3",
        "Description": "",
        "Risk": "Sequential operations like workflows (e.g. login -> put products in the basket",
        "Measure": "Sequential operations are defined and checked by the vulnerability scanner in the defined order.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage of service to service communication",
        "Level": "5",
        "Description": "",
        "Risk": "Service to service communication is not covered.",
        "Measure": "Service to service communication is dumped and checked.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Simple Scan",
        "Level": "2",
        "Description": "",
        "Risk": "Deficient security tests are performed. Simple vulnerabilities are not detected and missing security configurations (e.g. headers) are not set. Fast feedback is not given.",
        "Measure": "A simple scan is performed to get a security baseline. In case the test is done in under 10 minutes, it should be part of the build and deployment process.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Build",
        "Activity": "Building and testing of artifacts in virtual environments",
        "Level": "2",
        "Description": "While building and testing artifacts, third party systems, application frameworks and 3rd party libraries are used. These might be malicious as a result of vulnerable libraries or because they are altered during the delivery phase.",
        "Risk": "While building and testing artifacts, third party systems, application frameworks and 3rd party libraries are used. These might be malicious as a result of vulnerable libraries or because they are altered during the delivery phase.",
        "Measure": "Each step during within the build and testing phase is performed in a separate virtual environments, which is destroyed afterward.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Build",
        "Activity": "Pinning of artifacts",
        "Level": "2",
        "Description": "",
        "Risk": "Unauthorized manipulation of artifacts might be difficult to spot. For example, this may result in using images with malicious code. Also, intended major changes, which are automatically used in an image used might break the functionality.",
        "Measure": "Pinning of artifacts ensure that changes are performed only when intended.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Build",
        "Activity": "Defined build process",
        "Level": "1",
        "Description": "Sample evidence as an attribute in the yaml: The build process is defined in [REPLACE-ME Pipeline](https://replace-me/jenkins/job) in the folder _vars_. Projects are using a _Jenkinsfile_ to use the defined process.",
        "Risk": "Performing builds without a defined process is error prone; for example, as a result of incorrect security related configuration.",
        "Measure": "A well defined build process lowers the possibility of errors during the build process.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Build",
        "Activity": "Defined build process",
        "Level": "1",
        "Description": "Sample evidence as an attribute in the yaml: The build process is defined in [REPLACE-ME Pipeline](https://replace-me/jenkins/job) in the folder _vars_. Projects are using a _Jenkinsfile_ to use the defined process.",
        "Risk": "Performing builds without a defined process is error prone; for example, as a result of incorrect security related configuration.",
        "Measure": "A well defined build process lowers the possibility of errors during the build process.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Build",
        "Activity": "SBOM of components",
        "Level": "2",
        "Description": "SBOM (Software Bill of Materials) is a document that lists all components, libraries, and dependencies used in a software application or container image. Creating an SBOM during the build process can help ensure transparency, security, and license compliance for your application.",
        "Risk": "In case a vulnerability of severity high or critical exists, it needs to be known where an artifacts with that vulnerability is deployed with which dependencies.",
        "Measure": "Creation of an SBOM of components (e.g. application and container image content) during build.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Build",
        "Activity": "SBOM of components",
        "Level": "2",
        "Description": "SBOM (Software Bill of Materials) is a document that lists all components, libraries, and dependencies used in a software application or container image. Creating an SBOM during the build process can help ensure transparency, security, and license compliance for your application.",
        "Risk": "In case a vulnerability of severity high or critical exists, it needs to be known where an artifacts with that vulnerability is deployed with which dependencies.",
        "Measure": "Creation of an SBOM of components (e.g. application and container image content) during build.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Evaluation of the trust of used components",
        "Level": "2",
        "Description": "",
        "Risk": "Application and system components like Open Source libraries or images can have implementation flaws or deployment flaws. Developers or operations might start random images in the production cluster which have malicious code or known vulnerabilities.",
        "Measure": "Each components source is evaluated to be trusted. For example the source, number of developers included, email configuration used by maintainers to prevent maintainer account theft, typo-squatting, ... Create image assessment criteria, perform an evaluation of images and create a whitelist of artifacts/container images/virtual machine images.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of advanced threat modeling",
        "Level": "4",
        "Description": "**Example High Maturity Scenario:** Based on a detailed threat model defined and updated through code, the team decides the following: * Local encrypted caches need to expire and auto-purged. * Communication channels encrypted and authenticated. * All secrets persisted in shared secrets store. * Frontend designed with permissions model integration. * Permissions matrix defined. * Input is escaped output is encoded appropriately using well established libraries. Source: OWASP Project Integration Project",
        "Risk": "Inadequate identification of business and technical risks.",
        "Measure": "Threat modeling is performed by using reviewing user stories and producing security driven data flow diagrams.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of simple threat modeling on business level",
        "Level": "3",
        "Description": "",
        "Risk": "Business related threats are discovered too late in the development and deployment process.",
        "Measure": "Threat modeling of business functionality is performed during the product backlog creation to facilitate early detection of security defects.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of advanced threat modeling",
        "Level": "4",
        "Description": "**Example High Maturity Scenario:** Based on a detailed threat model defined and updated through code, the team decides the following: * Local encrypted caches need to expire and auto-purged. * Communication channels encrypted and authenticated. * All secrets persisted in shared secrets store. * Frontend designed with permissions model integration. * Permissions matrix defined. * Input is escaped output is encoded appropriately using well established libraries. Source: OWASP Project Integration Project",
        "Risk": "Inadequate identification of business and technical risks.",
        "Measure": "Threat modeling is performed by using reviewing user stories and producing security driven data flow diagrams.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of simple threat modeling on business level",
        "Level": "3",
        "Description": "",
        "Risk": "Business related threats are discovered too late in the development and deployment process.",
        "Measure": "Threat modeling of business functionality is performed during the product backlog creation to facilitate early detection of security defects.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Local development linting & style checks performed",
        "Level": "5",
        "Description": "",
        "Risk": "Insecure or unmaintainable code base.",
        "Measure": "Integrate static code analysis tools in IDEs.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 2",
        "Level": "4",
        "Description": "",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 2 * OWASP Mobile Application Security Verification Standard Level 2 Implement 95%-100% of the recommendations.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 2 (75%)",
        "Level": "3",
        "Description": "",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 2 * OWASP Mobile Application Security Verification Standard Level 2 Implement 75% of the recommendations.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 3",
        "Level": "5",
        "Description": "",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 3 * OWASP Mobile Application Security Verification Standard Implement 95%-100% of the recommendations.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "Contextualized Encoding",
        "Level": "1",
        "Description": "Bear in mind that utilizing frameworks is a recommended approach; however, they can develop known security weaknesses over time. Diligent and regular patching is crucial.",
        "Risk": "The generation of interpreter directives from user-provided data poses difficulties and can introduce vulnerabilities to injection attacks.",
        "Measure": "Implementing contextualized encoding, such as employing object-relational mapping tools or utilizing prepared statements, nearly removes the threat of injection vulnerabilities.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "WAF baseline",
        "Level": "3",
        "Description": "Begin with the WAF in a monitoring state to understand the traffic and threats. Progressively enforce blocking actions based on intelligence gathered, ensuring minimal disruption to legitimate traffic.",
        "Risk": "Vulnerable input, such as exploits, can infiltrate the application via numerous entry points, posing a significant security threat.",
        "Measure": "Implementing a web application firewall (WAF) is a critical security control. At a baseline level, the objective is to finely balance the reduction of false positives, maintaining user experience, against a potential increase in the less noticeable false negatives.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "WAF medium",
        "Level": "4",
        "Description": "Maintain the WAF in alert mode initially to ensure a comprehensive understanding of potential threats. With a medium-level configuration, the WAF settings are refined for greater precision in threat detection, with a stronger emphasis on security without significantly impacting legitimate traffic.",
        "Risk": "The threat from malicious inputs remains high, with exploits seeking to exploit any vulnerabilities present at the various points of entry to the application.",
        "Measure": "A WAF deployed with a medium level of protection strengthens the security posture by striking a more advanced balance between the detection of genuine threats and the minimization of false alarms.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Environment depending configuration parameters (secrets)",
        "Level": "2",
        "Description": "",
        "Risk": "Unauthorized access to secrets stored in source code or in artifacts (e.g. container images) through process listing (e.g. ps -ef).",
        "Measure": "Set configuration parameters via environment variables stored using specific platform functionalities or secrets management systems (e.g. Kubernetes secrets or Hashicorp Vault).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Handover of confidential parameters",
        "Level": "3",
        "Description": "",
        "Risk": "Parameters are often used to set credentials, for example by starting containers or applications; these parameters can often be seen by any one listing running processes on the target system.",
        "Measure": "Encryption ensures confidentiality of credentials e.g. from unauthorized access on the file system. Also, the usage of a credential management system can help protect credentials.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Handover of confidential parameters",
        "Level": "3",
        "Description": "",
        "Risk": "Parameters are often used to set credentials, for example by starting containers or applications; these parameters can often be seen by any one listing running processes on the target system.",
        "Measure": "Encryption ensures confidentiality of credentials e.g. from unauthorized access on the file system. Also, the usage of a credential management system can help protect credentials.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of advanced threat modeling",
        "Level": "4",
        "Description": "**Example High Maturity Scenario:** Based on a detailed threat model defined and updated through code, the team decides the following: * Local encrypted caches need to expire and auto-purged. * Communication channels encrypted and authenticated. * All secrets persisted in shared secrets store. * Frontend designed with permissions model integration. * Permissions matrix defined. * Input is escaped output is encoded appropriately using well established libraries. Source: OWASP Project Integration Project",
        "Risk": "Inadequate identification of business and technical risks.",
        "Measure": "Threat modeling is performed by using reviewing user stories and producing security driven data flow diagrams.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of simple threat modeling on business level",
        "Level": "3",
        "Description": "",
        "Risk": "Business related threats are discovered too late in the development and deployment process.",
        "Measure": "Threat modeling of business functionality is performed during the product backlog creation to facilitate early detection of security defects.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Simple mob hacking",
        "Level": "3",
        "Description": "- All exploits happen via the user interface. - No need for security/hacking tools. - No need for deep technical or security knowledge. - Use an insecure training app, e.g., [DVWA](https://dvwa.co.uk/) or [OWASP Juice Shop](https://owasp.org/www-project-juice-shop/). - Encourage active participation, e.g., use small groups. - Allow enough time for everyone to run at least one exploit. - The team gets an idea of how exploits can look like and how easy applications can be attacked. - The team understands functional correct working software can be highly insecure and easy to exploit.",
        "Risk": "Understanding security is hard.",
        "Measure": "Participate with your whole team in a simple mob hacking session organized by the Security Champion Guild. In the session the guild presents a vulnerable application and together you look at possible exploits. Just like in mob programming there is one driver and several navigators.",
        "Knowledge": "",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Security Coaching",
        "Level": "3",
        "Description": "",
        "Risk": "Training does not change behaviour. Therefore, even if security practices are understood, it's likely that they are not performed.",
        "Measure": "By coaching teams on security topics using for example the samman coaching method, teams internalize security practices as new habits in their development process.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Block force pushes",
        "Level": "3",
        "Description": "",
        "Risk": "Misuse of force push can lead to loss of work. It may overwrite remote branches without warning, potentially erasing valuable contributions from team members. This can disrupt collaboration, cause data loss, and create confusion in the development process. Bypassing the pull request process might remove an important code review step. This increases the risk of merging low-quality or buggy code into the main branch, potentially introducing bugs in the codebase.",
        "Measure": "Mandate blocking of force pushes in the version control platform.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Require status checks to pass",
        "Level": "3",
        "Description": "",
        "Risk": "Organizations risk introducing broken builds, quality issues, and security vulnerabilities into their codebase.",
        "Measure": "Mandate passing of security related specified status checks, like successful builds or static application security tests, before proceeding.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Blue/Green Deployment",
        "Level": "5",
        "Description": "",
        "Risk": "A new artifact's version can have unknown defects.",
        "Measure": "Using a blue/green deployment strategy increases application availability and reduces deployment risk by simplifying the rollback process if a deployment fails.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Rolling update on deployment",
        "Level": "3",
        "Description": "",
        "Risk": "While a deployment is performed, the application can not be reached.",
        "Measure": "A deployment without downtime is performed*.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Process",
        "Activity": "Definition of simple BCDR practices for critical components",
        "Level": "1",
        "Description": "",
        "Risk": "In case of an emergency, like a power outage, DR actions to perform are not clear. This leads to reaction and remediation delays.",
        "Measure": "By understanding and documenting a business continuity and disaster recovery (BCDR) plan, the overall availability of systems and applications is increased. Success factors like responsibilities, Service Level Agreements, Recovery Point Objectives, Recovery Time Objectives or Failover must be fully documented and understood.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Security-Lessoned-Learned",
        "Level": "3",
        "Description": "",
        "Risk": "After an incident, a similar incident might reoccur.",
        "Measure": "Running a 'lessons learned' session after an incident helps drive continuous improvement. Regular meetings with security champions are a good place to share and discuss lessons learned.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Same artifact for environments",
        "Level": "4",
        "Description": "",
        "Risk": "Building of an artifact for different environments means that an untested artifact might reach the production environment.",
        "Measure": "Building an artifact once and deploying it to different environments means that only tested artifacts are allowed to reach the production environment",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Usage of feature toggles",
        "Level": "4",
        "Description": "",
        "Risk": "Using environment variables to enable or disable features can lead to a situation where a feature is accidentally enabled in the production environment.",
        "Measure": "Usage of environment independent configuration parameter, called static feature toggles, mitigates the risk of accidentally enabling insecure features in production.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Blue/Green Deployment",
        "Level": "5",
        "Description": "",
        "Risk": "A new artifact's version can have unknown defects.",
        "Measure": "Using a blue/green deployment strategy increases application availability and reduces deployment risk by simplifying the rollback process if a deployment fails.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Usage of feature toggles",
        "Level": "4",
        "Description": "",
        "Risk": "Using environment variables to enable or disable features can lead to a situation where a feature is accidentally enabled in the production environment.",
        "Measure": "Usage of environment independent configuration parameter, called static feature toggles, mitigates the risk of accidentally enabling insecure features in production.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Regular automated tests",
        "Level": "2",
        "Description": "",
        "Risk": "After pushing source code to the version control system, any delay in receiving feedback on defects makes them harder for the developer to remediate.",
        "Measure": "On each push and/or at given intervals automatic security tests are performed.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Same artifact for environments",
        "Level": "4",
        "Description": "",
        "Risk": "Building of an artifact for different environments means that an untested artifact might reach the production environment.",
        "Measure": "Building an artifact once and deploying it to different environments means that only tested artifacts are allowed to reach the production environment",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Usage of feature toggles",
        "Level": "4",
        "Description": "",
        "Risk": "Using environment variables to enable or disable features can lead to a situation where a feature is accidentally enabled in the production environment.",
        "Measure": "Usage of environment independent configuration parameter, called static feature toggles, mitigates the risk of accidentally enabling insecure features in production.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Load tests",
        "Level": "4",
        "Description": "",
        "Risk": "As it is unknown how many requests the systems and applications can serve, due to an unexpected load the availability is disturbed.",
        "Measure": "Load test against the production system or a production near system is performed.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test for exposed services",
        "Level": "2",
        "Description": "",
        "Risk": "Standard network segmentation and firewalling has not been performed, leading to world open cluster management ports.",
        "Measure": "With the help of tools the network configuration of unintentional exposed cluster(s) are tested. To identify clusters, all subdomains might need to be identified with a tool like OWASP Amass to perform port scans based o the result.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test for unused Resources",
        "Level": "5",
        "Description": "",
        "Risk": "Unused resources, specially secrets, might be still valid, but are exposing information. As an attacker, I compromise a system, gather credentials and try to use them.",
        "Measure": "Test for unused resources helps to identify unused resources.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test network segmentation",
        "Level": "2",
        "Description": "",
        "Risk": "Wrong or no network segmentation of pods makes it easier for an attacker to access a database and extract or modify data.",
        "Measure": "Cluster internal test needs to be performed. Integration of fine granulated network segmentation (also between pods in the same namespace).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Build",
        "Activity": "Signing of artifacts",
        "Level": "5",
        "Description": "To perform a push to a GitHub repository, you must be authenticated. It's important to note that GitHub does not verify if the authenticated user's email address matches the one in the commit. To clearly identify the author of a commit for reviewers, commit signing is recommended. GitHub actions such as [semantic-release-action](https://github.com/cycjimmy/semantic-release-action) do not automatically sign commits and may encounter issues as a result. To address this, you can refer to a working configuration example in the [workflow folder](https://github.com/devsecopsmaturitymodel/DevSecOps-MaturityModel/blob/master/.github/workflows/main.yml) of DSOMM, which demonstrates how to use semantic release action in conjunction with [planetscale/ghcommit-action](https://github.com/planetscale/ghcommit-action). For added security, consider using [Fine-grained personal access tokens](https://github.blog/2022-10-18-introducing-fine-grained-personal-access-tokens-for-github/) provided by your organization for a specific repository. Store the Personal Access Token (PAT) as a secret in your project.",
        "Risk": "Execution or usage of malicious code or data e.g. via executables, libraries or container images.",
        "Measure": "Digitally signing artifacts for all steps during the build and especially docker images, helps to ensure their integrity and authenticity.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Build",
        "Activity": "Signing of code",
        "Level": "3",
        "Description": "",
        "Risk": "Execution or usage of malicious code or data e.g. via executables, libraries or container images.",
        "Measure": "Digitally signing commits helps to prevent unauthorized manipulation of source code.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Environment depending configuration parameters (secrets)",
        "Level": "2",
        "Description": "",
        "Risk": "Unauthorized access to secrets stored in source code or in artifacts (e.g. container images) through process listing (e.g. ps -ef).",
        "Measure": "Set configuration parameters via environment variables stored using specific platform functionalities or secrets management systems (e.g. Kubernetes secrets or Hashicorp Vault).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Evaluation of the trust of used components",
        "Level": "2",
        "Description": "",
        "Risk": "Application and system components like Open Source libraries or images can have implementation flaws or deployment flaws. Developers or operations might start random images in the production cluster which have malicious code or known vulnerabilities.",
        "Measure": "Each components source is evaluated to be trusted. For example the source, number of developers included, email configuration used by maintainers to prevent maintainer account theft, typo-squatting, ... Create image assessment criteria, perform an evaluation of images and create a whitelist of artifacts/container images/virtual machine images.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "A patch policy is defined",
        "Level": "1",
        "Description": "",
        "Risk": "Vulnerabilities in running artifacts stay for long and might get exploited.",
        "Measure": "A patch policy for all artifacts (e.g. in images) is defined. How often is an image rebuilt?",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Automated PRs for patches",
        "Level": "1",
        "Description": "",
        "Risk": "Components with known (or unknown) vulnerabilities might stay for long and get exploited, even when a patch is available.",
        "Measure": "Fast patching of third party component is needed. The DevOps way is to have an automated pull request for new components. This includes * Applications * Virtualized operating system components (e.g. container images) * Operating Systems * Infrastructure as Code/GitOps (e.g. argocd based on a git repository or terraform)",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Usage of multiple scanners",
        "Level": "4",
        "Description": "",
        "Risk": "Each vulnerability scanner has different opportunities. By using just one scanner, some vulnerabilities might not be found.",
        "Measure": "Usage of multiple spiders and scanner enhance the coverage and the vulnerabilities.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "API design validation",
        "Level": "3",
        "Description": "",
        "Risk": "Creation of insecure or non-compliant API.",
        "Measure": "Design contract-first APIs using an interface description language such as OpenAPI, AsyncAPI or SOAP and validate the specification using specific tools. Checks should be integrated in IDEs and CI/CD pipelines.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Stylistic analysis",
        "Level": "5",
        "Description": "",
        "Risk": "Unclear or obfuscated code might have unexpected behavior.",
        "Measure": "Analysis of compliance to style guides of the source code ensures that source code formatting rules are met (e.g. indentation, loops, ...).",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Usage of multiple analyzers",
        "Level": "4",
        "Description": "",
        "Risk": "Each vulnerability analyzer has different opportunities. By using just one analyzer, some vulnerabilities might not be found.",
        "Measure": "Usage of multiple static tools to find more vulnerabilities.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for image lifetime",
        "Level": "2",
        "Description": "",
        "Risk": "Old container images in production indicate that patch management is not performed and therefore vulnerabilities might exists.",
        "Measure": "Check the image age of containers in production.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for new image version",
        "Level": "3",
        "Description": "",
        "Risk": "When a new version of an image is available, it might fix security vulnerabilities.",
        "Measure": "Check for new images of containers in production.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Defined deployment process",
        "Level": "1",
        "Description": "",
        "Risk": "Deployment of insecure or malfunctioning artifacts.",
        "Measure": "Defining a deployment process ensures that there are established criteria in terms of functionalities, security, compliance, and performance, and that the artifacts meet them.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Rolling update on deployment",
        "Level": "3",
        "Description": "",
        "Risk": "While a deployment is performed, the application can not be reached.",
        "Measure": "A deployment without downtime is performed*.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Process",
        "Activity": "Definition of a change management process",
        "Level": "3",
        "Description": "",
        "Risk": "The impact of a change is not controlled because these are not recorded or documented.",
        "Measure": "Each change of a system is automatically recorded and adequately logged.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Evaluation of the trust of used components",
        "Level": "2",
        "Description": "",
        "Risk": "Application and system components like Open Source libraries or images can have implementation flaws or deployment flaws. Developers or operations might start random images in the production cluster which have malicious code or known vulnerabilities.",
        "Measure": "Each components source is evaluated to be trusted. For example the source, number of developers included, email configuration used by maintainers to prevent maintainer account theft, typo-squatting, ... Create image assessment criteria, perform an evaluation of images and create a whitelist of artifacts/container images/virtual machine images.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Reduction of the attack surface",
        "Level": "2",
        "Description": "Distroless images are minimal, stripped-down base images that contain only the essential components required to run your application. They do not include package managers, shells, or any other tools that are commonly found in standard Linux distributions. Using distroless images can help reduce the attack surface and overall size of your container images.",
        "Risk": "Components, dependencies, files or file access rights might have vulnerabilities, but the they are not needed.",
        "Measure": "Removal of unneeded components, dependencies, files or file access rights. For container images the usage of distroless images is recommended.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of advanced threat modeling",
        "Level": "4",
        "Description": "**Example High Maturity Scenario:** Based on a detailed threat model defined and updated through code, the team decides the following: * Local encrypted caches need to expire and auto-purged. * Communication channels encrypted and authenticated. * All secrets persisted in shared secrets store. * Frontend designed with permissions model integration. * Permissions matrix defined. * Input is escaped output is encoded appropriately using well established libraries. Source: OWASP Project Integration Project",
        "Risk": "Inadequate identification of business and technical risks.",
        "Measure": "Threat modeling is performed by using reviewing user stories and producing security driven data flow diagrams.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of simple threat modeling on business level",
        "Level": "3",
        "Description": "",
        "Risk": "Business related threats are discovered too late in the development and deployment process.",
        "Measure": "Threat modeling of business functionality is performed during the product backlog creation to facilitate early detection of security defects.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Handover of confidential parameters",
        "Level": "3",
        "Description": "",
        "Risk": "Parameters are often used to set credentials, for example by starting containers or applications; these parameters can often be seen by any one listing running processes on the target system.",
        "Measure": "Encryption ensures confidentiality of credentials e.g. from unauthorized access on the file system. Also, the usage of a credential management system can help protect credentials.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Handover of confidential parameters",
        "Level": "3",
        "Description": "",
        "Risk": "Parameters are often used to set credentials, for example by starting containers or applications; these parameters can often be seen by any one listing running processes on the target system.",
        "Measure": "Encryption ensures confidentiality of credentials e.g. from unauthorized access on the file system. Also, the usage of a credential management system can help protect credentials.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "A patch policy is defined",
        "Level": "1",
        "Description": "",
        "Risk": "Vulnerabilities in running artifacts stay for long and might get exploited.",
        "Measure": "A patch policy for all artifacts (e.g. in images) is defined. How often is an image rebuilt?",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Automated PRs for patches",
        "Level": "1",
        "Description": "",
        "Risk": "Components with known (or unknown) vulnerabilities might stay for long and get exploited, even when a patch is available.",
        "Measure": "Fast patching of third party component is needed. The DevOps way is to have an automated pull request for new components. This includes * Applications * Virtualized operating system components (e.g. container images) * Operating Systems * Infrastructure as Code/GitOps (e.g. argocd based on a git repository or terraform)",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Automated deployment of automated PRs",
        "Level": "3",
        "Description": "Automated merges of automated created PRs for outdated dependencies.",
        "Risk": "Even if automated dependencies PRs are merged, they might not be deployed. This results in vulnerabilities in running artifacts stay for too long and might get exploited.",
        "Measure": "After merging of an automated dependency PR, automated deployment is needed,",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Automated merge of automated PRs",
        "Level": "2",
        "Description": "Automated merges of automated created PRs for outdated dependencies.",
        "Risk": "Vulnerabilities in running artifacts stay for too long and might get exploited.",
        "Measure": "A good practice is to merge trusted dependencies (e.g. spring boot) after a grace period like one week. Often, patches, fixes and minor updates are automatically merged. Be aware that automated merging requires a high automated test coverage. Enforcement of merging of pull requests after a grace period.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Nightly build of images (base images)",
        "Level": "2",
        "Description": "A base image is a pre-built image that serves as a starting point for building new images or containers. These base images usually include an operating system, necessary dependencies, libraries, and other components that are required to run a specific application or service. Nightly builds of custom base images refer to an automated process that occurs daily or on a scheduled basis, usually during nighttime or off-peak hours, to create updated versions of custom base images.",
        "Risk": "Vulnerabilities in running containers stay for too long and might get exploited.",
        "Measure": "Custom base images are getting build at least nightly. In case the packages in the base image e.g. <i>centos</i> has changed, the build server triggers the build of depending images.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Usage of a maximum lifetime for images",
        "Level": "2",
        "Description": "The maximum lifetime for a Docker container refers to the duration a container should be allowed to run before it is considered outdated, stale, or insecure. There is not a fixed, universally applicable maximum lifetime for a Docker container, as it varies depending on the specific use case, application requirements, and security needs. As a best practice, it is essential to define a reasonable maximum lifetime for containers to ensure that you consistently deploy the most recent, patched, and secure versions of both your custom base images and third-party images.",
        "Risk": "Vulnerabilities in images of running containers stay for too long and might get exploited. Long running containers have potential memory leaks. A compromised container might get killed by restarting the container (e.g. in case the attacker has not reached the persistence layer).",
        "Measure": "A short maximum lifetime for images is defined, e.g. 30 days. The project images, based on the nightly builded images, are deployed at leased once within the defined lifetime. Third Party images are deployed at leased once within the defined lifetime.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "Usage of a short maximum lifetime for images",
        "Level": "4",
        "Description": "The maximum lifetime for a Docker container refers to the duration a container should be allowed to run before it is considered outdated, stale, or insecure. There is not a fixed, universally applicable maximum lifetime for a Docker container, as it varies depending on the specific use case, application requirements, and security needs. As a best practice, it is essential to define a reasonable maximum lifetime for containers to ensure that you consistently deploy the most recent, patched, and secure versions of both your custom base images and third-party images.",
        "Risk": "Vulnerabilities in running containers stay for too long and might get exploited.",
        "Measure": "A good practice is to perform the build and deployment daily or even just-in-time, when a new component (e.g. package) for the image is available.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test for unauthorized installation",
        "Level": "3",
        "Description": "",
        "Risk": "Unapproved components are used.",
        "Measure": "Components must be whitelisted. Regular scans on the docker infrastructure (e.g. cluster) need to be performed, to verify that only standardized base images are used.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Blue/Green Deployment",
        "Level": "5",
        "Description": "",
        "Risk": "A new artifact's version can have unknown defects.",
        "Measure": "Using a blue/green deployment strategy increases application availability and reduces deployment risk by simplifying the rollback process if a deployment fails.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Patch Management",
        "Activity": "A patch policy is defined",
        "Level": "1",
        "Description": "",
        "Risk": "Vulnerabilities in running artifacts stay for long and might get exploited.",
        "Measure": "A patch policy for all artifacts (e.g. in images) is defined. How often is an image rebuilt?",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Blue/Green Deployment",
        "Level": "5",
        "Description": "",
        "Risk": "A new artifact's version can have unknown defects.",
        "Measure": "Using a blue/green deployment strategy increases application availability and reduces deployment risk by simplifying the rollback process if a deployment fails.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Same artifact for environments",
        "Level": "4",
        "Description": "",
        "Risk": "Building of an artifact for different environments means that an untested artifact might reach the production environment.",
        "Measure": "Building an artifact once and deploying it to different environments means that only tested artifacts are allowed to reach the production environment",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Usage of feature toggles",
        "Level": "4",
        "Description": "",
        "Risk": "Using environment variables to enable or disable features can lead to a situation where a feature is accidentally enabled in the production environment.",
        "Measure": "Usage of environment independent configuration parameter, called static feature toggles, mitigates the risk of accidentally enabling insecure features in production.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Blue/Green Deployment",
        "Level": "5",
        "Description": "",
        "Risk": "A new artifact's version can have unknown defects.",
        "Measure": "Using a blue/green deployment strategy increases application availability and reduces deployment risk by simplifying the rollback process if a deployment fails.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Blue/Green Deployment",
        "Level": "5",
        "Description": "",
        "Risk": "A new artifact's version can have unknown defects.",
        "Measure": "Using a blue/green deployment strategy increases application availability and reduces deployment risk by simplifying the rollback process if a deployment fails.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Defined deployment process",
        "Level": "1",
        "Description": "",
        "Risk": "Deployment of insecure or malfunctioning artifacts.",
        "Measure": "Defining a deployment process ensures that there are established criteria in terms of functionalities, security, compliance, and performance, and that the artifacts meet them.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Defined decommissioning process",
        "Level": "2",
        "Description": "The decommissioning process in the context of Docker and Kubernetes involves retiring Docker containers, images, and Kubernetes resources that are no longer needed or have been replaced. This process must be carefully executed to avoid impacting other services and applications.",
        "Risk": "Unused applications are not maintained and may contain vulnerabilities. Once exploited they can be used to attack other applications or to perform lateral movements within the organization.",
        "Measure": "A clear decommissioning process ensures the removal of unused applications from the `Inventory of production components` and if implemented from `Inventory of production artifacts`.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Handover of confidential parameters",
        "Level": "3",
        "Description": "",
        "Risk": "Parameters are often used to set credentials, for example by starting containers or applications; these parameters can often be seen by any one listing running processes on the target system.",
        "Measure": "Encryption ensures confidentiality of credentials e.g. from unauthorized access on the file system. Also, the usage of a credential management system can help protect credentials.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Inventory of production artifacts",
        "Level": "2",
        "Description": "",
        "Risk": "In case a vulnerability of severity high or critical exists, it needs to be known where an artifacts (e.g. container image) with that vulnerability is deployed.",
        "Measure": "A documented inventory of artifacts in production like container images exists (gathered manually or automatically).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Inventory of production components",
        "Level": "1",
        "Description": "",
        "Risk": "An organization is unaware of components like applications in production. Not knowing existing applications in production leads to not assessing it.",
        "Measure": "A documented inventory of components in production exists (gathered manually or automatically). For example a manually created document with applications in production. In a kubernetes cluster, namespaces can be automatically gathered and documented, e.g. in a JSON in a S3 bucket/git repository, dependency track.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Inventory of production dependencies",
        "Level": "3",
        "Description": "",
        "Risk": "Delayed identification of components and their vulnerabilities in production. In case a vulnerability is known by the organization, it needs to be known where an artifacts with that vulnerability is deployed with which dependencies.",
        "Measure": "A documented inventory of dependencies used in artifacts like container images and containers exists.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Inventory of production artifacts",
        "Level": "2",
        "Description": "",
        "Risk": "In case a vulnerability of severity high or critical exists, it needs to be known where an artifacts (e.g. container image) with that vulnerability is deployed.",
        "Measure": "A documented inventory of artifacts in production like container images exists (gathered manually or automatically).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Inventory of production components",
        "Level": "1",
        "Description": "",
        "Risk": "An organization is unaware of components like applications in production. Not knowing existing applications in production leads to not assessing it.",
        "Measure": "A documented inventory of components in production exists (gathered manually or automatically). For example a manually created document with applications in production. In a kubernetes cluster, namespaces can be automatically gathered and documented, e.g. in a JSON in a S3 bucket/git repository, dependency track.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Inventory of production dependencies",
        "Level": "3",
        "Description": "",
        "Risk": "Delayed identification of components and their vulnerabilities in production. In case a vulnerability is known by the organization, it needs to be known where an artifacts with that vulnerability is deployed with which dependencies.",
        "Measure": "A documented inventory of dependencies used in artifacts like container images and containers exists.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of simple threat modeling on technical level",
        "Level": "1",
        "Description": "Threat modeling is a structured activity for identifying, evaluating, and managing system threats, architectural design flaws, and recommended security mitigations. It is typically done as part of the design phase or as part of a security assessment. Threat modeling is a team exercise, including product owners, architects, security champions, and security testers. At this maturity level, expose teams and stakeholders to threat modeling to increase security awareness and to create a shared vision on the security of the system. At maturity level 1, you perform threat modeling ad-hoc for high-risk applications and use simple threat checklists, such as STRIDE. Avoid lengthy workshops and overly detailed lists of low-relevant threats. Perform threat modeling iteratively to align to more iterative development paradigms. If you add new functionality to an existing application, look only into the newly added functions instead of trying to cover the entire scope. A good starting point is the existing diagrams that you annotate during discussion workshops. Always make sure to persist the outcome of a threat modeling discussion for later use. Your most important tool to start threat modeling is a whiteboard, smartboard, or a piece of paper. Aim for security awareness, a simple process, and actionable outcomes that you agree upon with your team. Once requirements are gathered and analysis is performed, implementation specifics need to be defined. The outcome of this stage is usually a diagram outlining data flows and a general system architecture. This presents an opportunity for both threat modeling and attaching security considerations to every ticket and epic that is the outcome of this stage. Source: https://owaspsamm.org/model/design/threat-assessment/stream-b/ There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/) article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling) one. A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/). OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling) on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html). Moreover, if you're following OWASP SAMM, it has a short section on [Threat Assessment](https://owaspsamm.org/model/design/threat-assessment/). There's a few projects that can help with creating Threat Models at this stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec) is another. > Note: _A threat model can be as simple as a data flow diagram with attack vectors on every flow and asset and equivalent remediations. An example can be found below._ ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png \"\"Threat Model\"\") Last, if the organizations maps Features to Epics, the Security Knowledge Framework (SKF) can be used to facilitate this process by leveraging it's questionnaire function. ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png \"\"SKF\"\") This practice has the side effect that it trains non-security specialists to think like attackers. The outcomes of this stage should help lay the foundation of secure design and considerations. **Example Low Maturity Scenario:** Following vague feature requirements the design includes caching data to a local unencrypted database with a hardcoded password. Remote data store access secrets are hardcoded in the configuration files. All communication between backend systems is plaintext. Frontend serves data over GraphQL as a thin layer between caching system and end user. GraphQL queries are dynamically translated to SQL, Elasticsearch and NoSQL queries. Access to data is protected with basic auth set to _1234:1234_ for development purposes. Source: OWASP Project Integration Project",
        "Risk": "Technical related threats are discovered too late in the development and deployment process.",
        "Measure": "Threat modeling of technical features is performed during the product sprint planning.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of advanced abuse stories",
        "Level": "5",
        "Description": "",
        "Risk": "Simple user stories are not going deep enough. Relevant security considerations are performed. Security flaws are discovered too late in the development and deployment process",
        "Measure": "Advanced abuse stories are created as part of threat modeling activities.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of simple abuse stories",
        "Level": "3",
        "Description": "",
        "Risk": "User stories mostly don't consider security implications. Security flaws are discovered too late in the development and deployment process.",
        "Measure": "Abuse stories are created during the creation of user stories.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of threat modeling processes and standards",
        "Level": "3",
        "Description": "",
        "Risk": "Inadequate identification of business and technical risks.",
        "Measure": "Creation of threat modeling processes and standards through the organization helps to enhance the security culture and provide more structure to the threat model exercises.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of advanced abuse stories",
        "Level": "5",
        "Description": "",
        "Risk": "Simple user stories are not going deep enough. Relevant security considerations are performed. Security flaws are discovered too late in the development and deployment process",
        "Measure": "Advanced abuse stories are created as part of threat modeling activities.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of simple abuse stories",
        "Level": "3",
        "Description": "",
        "Risk": "User stories mostly don't consider security implications. Security flaws are discovered too late in the development and deployment process.",
        "Measure": "Abuse stories are created during the creation of user stories.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Test KPI",
        "Activity": "Generation of response statistics",
        "Level": "3",
        "Description": "",
        "Risk": "No or delayed reaction to findings leads to potential exploitation of findings.",
        "Measure": "Creation and response statistics (e.g. Mean Time to Resolution) of findings. This is also referred to as _Mean Time to Resolve_.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Advanced visualization of defects",
        "Level": "4",
        "Description": "",
        "Risk": "Correlation of the vulnerabilities of different tools to have an overview of the the overall security level per component/project/team is not given.",
        "Measure": "Findings are visualized per component/project/team.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Fix based on severity",
        "Level": "1",
        "Description": "",
        "Risk": "Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.",
        "Measure": "Implement a very simple risk-based prioritization framework for vulnerability remediation based on the severity of the findings. On level one, fix only critical findings.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Reproducible defect tickets",
        "Level": "4",
        "Description": "",
        "Risk": "Vulnerability descriptions are hard to understand by staff from operations and development.",
        "Measure": "Vulnerabilities include the test procedure to give the staff from operations and development the ability to reproduce vulnerabilities. This enhances the understanding of vulnerabilities and therefore the fix have a higher quality.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Simple visualization of defects",
        "Level": "2",
        "Description": "",
        "Risk": "The security level of a component is not visible. Therefore, the motivation to enhance the security is not give.",
        "Measure": "Vulnerabilities are simple visualized.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Advanced visualization of defects",
        "Level": "4",
        "Description": "",
        "Risk": "Correlation of the vulnerabilities of different tools to have an overview of the the overall security level per component/project/team is not given.",
        "Measure": "Findings are visualized per component/project/team.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Reproducible defect tickets",
        "Level": "4",
        "Description": "",
        "Risk": "Vulnerability descriptions are hard to understand by staff from operations and development.",
        "Measure": "Vulnerabilities include the test procedure to give the staff from operations and development the ability to reproduce vulnerabilities. This enhances the understanding of vulnerabilities and therefore the fix have a higher quality.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Simple visualization of defects",
        "Level": "2",
        "Description": "",
        "Risk": "The security level of a component is not visible. Therefore, the motivation to enhance the security is not give.",
        "Measure": "Vulnerabilities are simple visualized.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of simple threat modeling on technical level",
        "Level": "1",
        "Description": "Threat modeling is a structured activity for identifying, evaluating, and managing system threats, architectural design flaws, and recommended security mitigations. It is typically done as part of the design phase or as part of a security assessment. Threat modeling is a team exercise, including product owners, architects, security champions, and security testers. At this maturity level, expose teams and stakeholders to threat modeling to increase security awareness and to create a shared vision on the security of the system. At maturity level 1, you perform threat modeling ad-hoc for high-risk applications and use simple threat checklists, such as STRIDE. Avoid lengthy workshops and overly detailed lists of low-relevant threats. Perform threat modeling iteratively to align to more iterative development paradigms. If you add new functionality to an existing application, look only into the newly added functions instead of trying to cover the entire scope. A good starting point is the existing diagrams that you annotate during discussion workshops. Always make sure to persist the outcome of a threat modeling discussion for later use. Your most important tool to start threat modeling is a whiteboard, smartboard, or a piece of paper. Aim for security awareness, a simple process, and actionable outcomes that you agree upon with your team. Once requirements are gathered and analysis is performed, implementation specifics need to be defined. The outcome of this stage is usually a diagram outlining data flows and a general system architecture. This presents an opportunity for both threat modeling and attaching security considerations to every ticket and epic that is the outcome of this stage. Source: https://owaspsamm.org/model/design/threat-assessment/stream-b/ There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/) article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling) one. A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/). OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling) on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html). Moreover, if you're following OWASP SAMM, it has a short section on [Threat Assessment](https://owaspsamm.org/model/design/threat-assessment/). There's a few projects that can help with creating Threat Models at this stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec) is another. > Note: _A threat model can be as simple as a data flow diagram with attack vectors on every flow and asset and equivalent remediations. An example can be found below._ ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png \"\"Threat Model\"\") Last, if the organizations maps Features to Epics, the Security Knowledge Framework (SKF) can be used to facilitate this process by leveraging it's questionnaire function. ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png \"\"SKF\"\") This practice has the side effect that it trains non-security specialists to think like attackers. The outcomes of this stage should help lay the foundation of secure design and considerations. **Example Low Maturity Scenario:** Following vague feature requirements the design includes caching data to a local unencrypted database with a hardcoded password. Remote data store access secrets are hardcoded in the configuration files. All communication between backend systems is plaintext. Frontend serves data over GraphQL as a thin layer between caching system and end user. GraphQL queries are dynamically translated to SQL, Elasticsearch and NoSQL queries. Access to data is protected with basic auth set to _1234:1234_ for development purposes. Source: OWASP Project Integration Project",
        "Risk": "Technical related threats are discovered too late in the development and deployment process.",
        "Measure": "Threat modeling of technical features is performed during the product sprint planning.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of threat modeling processes and standards",
        "Level": "3",
        "Description": "",
        "Risk": "Inadequate identification of business and technical risks.",
        "Measure": "Creation of threat modeling processes and standards through the organization helps to enhance the security culture and provide more structure to the threat model exercises.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Advanced visualization of defects",
        "Level": "4",
        "Description": "",
        "Risk": "Correlation of the vulnerabilities of different tools to have an overview of the the overall security level per component/project/team is not given.",
        "Measure": "Findings are visualized per component/project/team.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Reproducible defect tickets",
        "Level": "4",
        "Description": "",
        "Risk": "Vulnerability descriptions are hard to understand by staff from operations and development.",
        "Measure": "Vulnerabilities include the test procedure to give the staff from operations and development the ability to reproduce vulnerabilities. This enhances the understanding of vulnerabilities and therefore the fix have a higher quality.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Simple visualization of defects",
        "Level": "2",
        "Description": "",
        "Risk": "The security level of a component is not visible. Therefore, the motivation to enhance the security is not give.",
        "Measure": "Vulnerabilities are simple visualized.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of advanced abuse stories",
        "Level": "5",
        "Description": "",
        "Risk": "Simple user stories are not going deep enough. Relevant security considerations are performed. Security flaws are discovered too late in the development and deployment process",
        "Measure": "Advanced abuse stories are created as part of threat modeling activities.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of simple abuse stories",
        "Level": "3",
        "Description": "",
        "Risk": "User stories mostly don't consider security implications. Security flaws are discovered too late in the development and deployment process.",
        "Measure": "Abuse stories are created during the creation of user stories.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of collaborative security checks with developers and system administrators",
        "Level": "5",
        "Description": "",
        "Risk": "Security checks by external companies do not increase the understanding of an application/system for internal employees.",
        "Measure": "Periodically security reviews of source code (SCA), in which security SME, developers and operations are involved, are effective at increasing the robustness of software and the security knowledge of the teams involved.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of collaborative team security checks",
        "Level": "4",
        "Description": "",
        "Risk": "Development teams limited insight over security practices.",
        "Measure": "Mutual security testing the security of other teams project enhances security awareness and knowledge.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of war games",
        "Level": "4",
        "Description": "",
        "Risk": "Understanding incident response plans during an incident is hard and ineffective.",
        "Measure": "War Games like activities help train for incidents. Security SMEs create attack scenarios in a testing environment enabling the trainees to learn how to react in case of an incident.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of advanced abuse stories",
        "Level": "5",
        "Description": "",
        "Risk": "Simple user stories are not going deep enough. Relevant security considerations are performed. Security flaws are discovered too late in the development and deployment process",
        "Measure": "Advanced abuse stories are created as part of threat modeling activities.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of simple abuse stories",
        "Level": "3",
        "Description": "",
        "Risk": "User stories mostly don't consider security implications. Security flaws are discovered too late in the development and deployment process.",
        "Measure": "Abuse stories are created during the creation of user stories.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Information security targets are communicated",
        "Level": "2",
        "Description": "",
        "Risk": "Employees don't know their organizations security targets. Therefore security is not considered during development and administration as much as it should be.",
        "Measure": "Transparent and timely communication of the security targets by senior management is essential to ensure teams' buy-in and support.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of war games",
        "Level": "4",
        "Description": "",
        "Risk": "Understanding incident response plans during an incident is hard and ineffective.",
        "Measure": "War Games like activities help train for incidents. Security SMEs create attack scenarios in a testing environment enabling the trainees to learn how to react in case of an incident.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Reward of good communication",
        "Level": "2",
        "Description": "",
        "Risk": "Employees are not getting excited about security.",
        "Measure": "Good communication and transparency encourages cross-organizational support. Gamification of security is also known to help, examples include T-Shirts, mugs, cups, gift cards and 'High-Fives'.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Fix based on accessibility",
        "Level": "3",
        "Description": "",
        "Risk": "Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.",
        "Measure": "Implement a simple risk-based prioritization framework for vulnerability remediation based on accessibility of the applications.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Fix based on accessibility",
        "Level": "3",
        "Description": "",
        "Risk": "Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.",
        "Measure": "Implement a simple risk-based prioritization framework for vulnerability remediation based on accessibility of the applications.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Fix based on severity",
        "Level": "1",
        "Description": "",
        "Risk": "Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.",
        "Measure": "Implement a very simple risk-based prioritization framework for vulnerability remediation based on the severity of the findings. On level one, fix only critical findings.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Fix based on accessibility",
        "Level": "3",
        "Description": "",
        "Risk": "Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.",
        "Measure": "Implement a simple risk-based prioritization framework for vulnerability remediation based on accessibility of the applications.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Fix based on severity",
        "Level": "1",
        "Description": "",
        "Risk": "Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.",
        "Measure": "Implement a very simple risk-based prioritization framework for vulnerability remediation based on the severity of the findings. On level one, fix only critical findings.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Each team has a security champion",
        "Level": "2",
        "Description": "Implement a program where each software development team has a member considered a âSecurity Championâ who is the liaison between Information Security and developers. Depending on the size and structure of the team the âSecurity Championâ may be a software developer, tester, or a product manager. The âSecurity Championâ has a set number of hours per week for Information Security related activities. They participate in periodic briefings to increase awareness and expertise in different security disciplines. âSecurity Championsâ have additional training to help develop these roles as Software Security subject-matter experts. You may need to customize the way you create and support âSecurity Championsâ for cultural reasons. The goals of the position are to increase effectiveness and efficiency of application security and compliance and to strengthen the relationship between various teams and Information Security. To achieve these objectives, âSecurity Championsâ assist with researching, verifying, and prioritizing security and compliance related software defects. They are involved in all Risk Assessments, Threat Assessments, and Architectural Reviews to help identify opportunities to remediate security defects by making the architecture of the application more resilient and reducing the attack threat surface. Source: [OWASP SAMM](https://owaspsamm.org/model/governance/education-and-guidance/stream-b/)",
        "Risk": "No one feels directly responsible for security and the security champion does not have enough time to allocate to each team.",
        "Measure": "Each team defines an individual to be responsible for security. These individuals are often referred to as 'security champions'",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Regular security training of security champions",
        "Level": "2",
        "Description": "",
        "Risk": "Understanding security is hard, even for security champions.",
        "Measure": "Regular security training of security champions.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Each team has a security champion",
        "Level": "2",
        "Description": "Implement a program where each software development team has a member considered a âSecurity Championâ who is the liaison between Information Security and developers. Depending on the size and structure of the team the âSecurity Championâ may be a software developer, tester, or a product manager. The âSecurity Championâ has a set number of hours per week for Information Security related activities. They participate in periodic briefings to increase awareness and expertise in different security disciplines. âSecurity Championsâ have additional training to help develop these roles as Software Security subject-matter experts. You may need to customize the way you create and support âSecurity Championsâ for cultural reasons. The goals of the position are to increase effectiveness and efficiency of application security and compliance and to strengthen the relationship between various teams and Information Security. To achieve these objectives, âSecurity Championsâ assist with researching, verifying, and prioritizing security and compliance related software defects. They are involved in all Risk Assessments, Threat Assessments, and Architectural Reviews to help identify opportunities to remediate security defects by making the architecture of the application more resilient and reducing the attack threat surface. Source: [OWASP SAMM](https://owaspsamm.org/model/governance/education-and-guidance/stream-b/)",
        "Risk": "No one feels directly responsible for security and the security champion does not have enough time to allocate to each team.",
        "Measure": "Each team defines an individual to be responsible for security. These individuals are often referred to as 'security champions'",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Security consulting on request",
        "Level": "1",
        "Description": "",
        "Risk": "Not asking a security expert when questions regarding security appear might lead to flaws.",
        "Measure": "Security consulting to teams is given on request. The security consultants can be internal or external.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Security consulting on request",
        "Level": "1",
        "Description": "",
        "Risk": "Not asking a security expert when questions regarding security appear might lead to flaws.",
        "Measure": "Security consulting to teams is given on request. The security consultants can be internal or external.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Process",
        "Activity": "Approval by reviewing any new version",
        "Level": "3",
        "Description": "",
        "Risk": "An individual might forget to implement security measures to protect source code or infrastructure components.",
        "Measure": "On each new version (e.g. Pull Request) of source code or infrastructure components a security peer review of the changes is performed (two eyes principle) and approval given by the reviewer.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Dismiss stale PR approvals",
        "Level": "3",
        "Description": "",
        "Risk": "Intentional or accidental alterations in critical branches like main (or master) through post-approval code additions.",
        "Measure": "Implement a policy where any commits made after a pull request has been approved automatically revoke that approval, necessitating a fresh review and re-approval process.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Require a PR before merging",
        "Level": "2",
        "Description": "",
        "Risk": "Intentional or accidental alterations in critical branches like main (or master).",
        "Measure": "Define source code management system policies (e.g. branch protection rules, mandatory code reviews from at least one person, ...) to ensure that changes to critical branches are only possible under defined conditions. These policies can be implemented at repository level or organization level, depending on the source code management system.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Security consulting on request",
        "Level": "1",
        "Description": "",
        "Risk": "Not asking a security expert when questions regarding security appear might lead to flaws.",
        "Measure": "Security consulting to teams is given on request. The security consultants can be internal or external.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Production near environments are used by developers",
        "Level": "4",
        "Description": "",
        "Risk": "In case an errors occurs in production, the developer need to be able to create a production near environment on a local development environment.",
        "Measure": "Usage of infrastructure as code helps to create a production near environment. The developer needs to be trained in order to setup a local development environment. In addition, it should be possible to create production like test data. Often personal identifiable information is anonymized in order to comply with data protection laws.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of test and production environments",
        "Level": "2",
        "Description": "",
        "Risk": "Security tests are not running regularly because test environments are missing",
        "Measure": "A test and a production like environment is used",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Integration of vulnerability issues into the development process",
        "Level": "3",
        "Description": "",
        "Risk": "To read console output of the build server to search for vulnerabilities might be difficult. Also, to check a vulnerability management system might not be a daily task for a developer.",
        "Measure": "Vulnerabilities are tracked in the teams issue system (e.g. jira).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Simple false positive treatment",
        "Level": "1",
        "Description": "",
        "Risk": "As false positive occur during each test, all vulnerabilities might be ignored.",
        "Measure": "False positives are suppressed so they will not show up on the next tests again. Most security tools have the possibility to suppress false positives. A Vulnerability Management System might be used.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Usage of a vulnerability management system",
        "Level": "3",
        "Description": "For known vulnerabilities a processes to estimate the exploit ability of a vulnerability is recommended. To implement a security culture including training, office hours and security champions can help integrating security scanning at scale. Such activities help to understand why a vulnerability is potentially critical and needs handling.",
        "Risk": "Maintenance of false positives in each tool enforces a high workload. In addition a correlation of the same finding from different tools is not possible.",
        "Measure": "Aggregation of vulnerabilities in one tool reduce the workload to handle them, e.g. mark as false positives.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of war games",
        "Level": "4",
        "Description": "",
        "Risk": "Understanding incident response plans during an incident is hard and ineffective.",
        "Measure": "War Games like activities help train for incidents. Security SMEs create attack scenarios in a testing environment enabling the trainees to learn how to react in case of an incident.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Integration of vulnerability issues into the development process",
        "Level": "3",
        "Description": "",
        "Risk": "To read console output of the build server to search for vulnerabilities might be difficult. Also, to check a vulnerability management system might not be a daily task for a developer.",
        "Measure": "Vulnerabilities are tracked in the teams issue system (e.g. jira).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Alerting",
        "Level": "2",
        "Description": "",
        "Risk": "Incidents are discovered after they happened.",
        "Measure": "Thresholds for metrics are set. In case the thresholds are reached, alarms are send out. Which should get attention due to the critically.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Test KPI",
        "Activity": "Patching mean time to resolution via production",
        "Level": "4",
        "Description": "",
        "Risk": "Without measuring Mean Time to Resolution (MTTR) related to patching, it is challenging to identify delays in the patching process. Unaddressed vulnerabilities can be exploited by attackers, leading to potential security breaches and data loss.",
        "Measure": "Measurement and communication of the time from the availability of a patch to its deployment in production in alignment with Service Level Agreements (SLAs), conducted at least on a quarterly basis. Average time to patch is visualized per component/project/team.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Advanced visualization of defects",
        "Level": "4",
        "Description": "",
        "Risk": "Correlation of the vulnerabilities of different tools to have an overview of the the overall security level per component/project/team is not given.",
        "Measure": "Findings are visualized per component/project/team.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Fix based on accessibility",
        "Level": "3",
        "Description": "",
        "Risk": "Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.",
        "Measure": "Implement a simple risk-based prioritization framework for vulnerability remediation based on accessibility of the applications.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Fix based on severity",
        "Level": "1",
        "Description": "",
        "Risk": "Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.",
        "Measure": "Implement a very simple risk-based prioritization framework for vulnerability remediation based on the severity of the findings. On level one, fix only critical findings.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Integration of vulnerability issues into the development process",
        "Level": "3",
        "Description": "",
        "Risk": "To read console output of the build server to search for vulnerabilities might be difficult. Also, to check a vulnerability management system might not be a daily task for a developer.",
        "Measure": "Vulnerabilities are tracked in the teams issue system (e.g. jira).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Reproducible defect tickets",
        "Level": "4",
        "Description": "",
        "Risk": "Vulnerability descriptions are hard to understand by staff from operations and development.",
        "Measure": "Vulnerabilities include the test procedure to give the staff from operations and development the ability to reproduce vulnerabilities. This enhances the understanding of vulnerabilities and therefore the fix have a higher quality.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Simple visualization of defects",
        "Level": "2",
        "Description": "",
        "Risk": "The security level of a component is not visible. Therefore, the motivation to enhance the security is not give.",
        "Measure": "Vulnerabilities are simple visualized.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Treatment of all defects",
        "Level": "5",
        "Description": "",
        "Risk": "Vulnerabilities with severity low are not visible.",
        "Measure": "All vulnerabilities are added to the quality gate.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Treatment of defects with severity high or higher",
        "Level": "1",
        "Description": "",
        "Risk": "Vulnerabilities with severity high or higher are not visible.",
        "Measure": "Vulnerabilities with severity high or higher are added to the quality gate.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Treatment of defects with severity middle",
        "Level": "3",
        "Description": "",
        "Risk": "Vulnerabilities with severity middle are not visible.",
        "Measure": "Vulnerabilities with severity middle are added to the quality gate.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Application tests",
        "Activity": "High coverage of security related module and integration tests",
        "Level": "5",
        "Description": "",
        "Risk": "Vulnerabilities are rising due to code changes in a complex microservice environment in not important components.",
        "Measure": "Implementation of security related tests via unit tests and integration tests. Including the test of libraries, in case the are not tested already.",
        "Knowledge": "",
        "Resources": "High",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Application tests",
        "Activity": "Security integration tests for important components",
        "Level": "3",
        "Description": "",
        "Risk": "Vulnerabilities are rising due to code changes in a complex microservice environment.",
        "Measure": "Implementation of essential security related integration tests. For example for authentication and authorization.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Application tests",
        "Activity": "Security unit tests for important components",
        "Level": "2",
        "Description": "",
        "Risk": "Vulnerabilities are rising due to code changes.",
        "Measure": "Usage of unit tests to test important security related features like authentication and authorization.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Application tests",
        "Activity": "Smoke Test",
        "Level": "4",
        "Description": "",
        "Risk": "During a deployment an error might happen which leads to non-availability of the system, a part of the system or a feature.",
        "Measure": "Integration tests are performed against the production environment after each deployment.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Regular automated tests",
        "Level": "2",
        "Description": "",
        "Risk": "After pushing source code to the version control system, any delay in receiving feedback on defects makes them harder for the developer to remediate.",
        "Measure": "On each push and/or at given intervals automatic security tests are performed.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Creation and application of a testing concept",
        "Level": "4",
        "Description": "",
        "Risk": "Scans might use a too small or too high test intensity.",
        "Measure": "A testing concept considering the amount of time per scan/intensity is created and applied. A dynamic analysis needs more time than a static analysis. The dynamic scan, depending on the test intensity might be performed on every commit, every night, every week or once in a month.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Deactivating of unneeded tests",
        "Level": "3",
        "Description": "",
        "Risk": "As tools cover a wide range of different vulnerability tests, they might not match the used components. Therefore, they need more time and resources as they need and the feedback loops takes too much time.",
        "Measure": "Unneeded tests are deactivated. For example in case the service is using a Mongo database and no mysql database, the dynamic scan doesn't need to test for sql injections.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Default settings for intensity",
        "Level": "1",
        "Description": "",
        "Risk": "Time pressure and ignorance might lead to false predictions for the test intensity.",
        "Measure": "The intensity of the used tools are not modified to safe time.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "High test intensity",
        "Level": "1",
        "Description": "",
        "Risk": "A too small intensity or a too high confidence might lead to not visible vulnerabilities.",
        "Measure": "A deep scan with high test intensity and a low confidence threshold is performed.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Regular automated tests",
        "Level": "2",
        "Description": "",
        "Risk": "After pushing source code to the version control system, any delay in receiving feedback on defects makes them harder for the developer to remediate.",
        "Measure": "On each push and/or at given intervals automatic security tests are performed.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": ".gitignore",
        "Level": "4",
        "Description": "",
        "Risk": "Unintended leakage of secrets, debug, or workstation specific data",
        "Measure": ".gitignore files help prevent accidental commits of secrets, debug, or workstation specific data",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Versioning",
        "Level": "1",
        "Description": "",
        "Risk": "Deployment of untracked artifacts.",
        "Measure": "Version artifacts in order to identify deployed features and issues. This includes application and infrastructure code, jenkins configuration, container and virtual machine images.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Conduction of simple threat modeling on technical level",
        "Level": "1",
        "Description": "Threat modeling is a structured activity for identifying, evaluating, and managing system threats, architectural design flaws, and recommended security mitigations. It is typically done as part of the design phase or as part of a security assessment. Threat modeling is a team exercise, including product owners, architects, security champions, and security testers. At this maturity level, expose teams and stakeholders to threat modeling to increase security awareness and to create a shared vision on the security of the system. At maturity level 1, you perform threat modeling ad-hoc for high-risk applications and use simple threat checklists, such as STRIDE. Avoid lengthy workshops and overly detailed lists of low-relevant threats. Perform threat modeling iteratively to align to more iterative development paradigms. If you add new functionality to an existing application, look only into the newly added functions instead of trying to cover the entire scope. A good starting point is the existing diagrams that you annotate during discussion workshops. Always make sure to persist the outcome of a threat modeling discussion for later use. Your most important tool to start threat modeling is a whiteboard, smartboard, or a piece of paper. Aim for security awareness, a simple process, and actionable outcomes that you agree upon with your team. Once requirements are gathered and analysis is performed, implementation specifics need to be defined. The outcome of this stage is usually a diagram outlining data flows and a general system architecture. This presents an opportunity for both threat modeling and attaching security considerations to every ticket and epic that is the outcome of this stage. Source: https://owaspsamm.org/model/design/threat-assessment/stream-b/ There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/) article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling) one. A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/). OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling) on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html). Moreover, if you're following OWASP SAMM, it has a short section on [Threat Assessment](https://owaspsamm.org/model/design/threat-assessment/). There's a few projects that can help with creating Threat Models at this stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec) is another. > Note: _A threat model can be as simple as a data flow diagram with attack vectors on every flow and asset and equivalent remediations. An example can be found below._ ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png \"\"Threat Model\"\") Last, if the organizations maps Features to Epics, the Security Knowledge Framework (SKF) can be used to facilitate this process by leveraging it's questionnaire function. ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png \"\"SKF\"\") This practice has the side effect that it trains non-security specialists to think like attackers. The outcomes of this stage should help lay the foundation of secure design and considerations. **Example Low Maturity Scenario:** Following vague feature requirements the design includes caching data to a local unencrypted database with a hardcoded password. Remote data store access secrets are hardcoded in the configuration files. All communication between backend systems is plaintext. Frontend serves data over GraphQL as a thin layer between caching system and end user. GraphQL queries are dynamically translated to SQL, Elasticsearch and NoSQL queries. Access to data is protected with basic auth set to _1234:1234_ for development purposes. Source: OWASP Project Integration Project",
        "Risk": "Technical related threats are discovered too late in the development and deployment process.",
        "Measure": "Threat modeling of technical features is performed during the product sprint planning.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Design",
        "Activity": "Creation of threat modeling processes and standards",
        "Level": "3",
        "Description": "",
        "Risk": "Inadequate identification of business and technical risks.",
        "Measure": "Creation of threat modeling processes and standards through the organization helps to enhance the security culture and provide more structure to the threat model exercises.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Process",
        "Activity": "Approval by reviewing any new version",
        "Level": "3",
        "Description": "",
        "Risk": "An individual might forget to implement security measures to protect source code or infrastructure components.",
        "Measure": "On each new version (e.g. Pull Request) of source code or infrastructure components a security peer review of the changes is performed (two eyes principle) and approval given by the reviewer.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Block force pushes",
        "Level": "3",
        "Description": "",
        "Risk": "Misuse of force push can lead to loss of work. It may overwrite remote branches without warning, potentially erasing valuable contributions from team members. This can disrupt collaboration, cause data loss, and create confusion in the development process. Bypassing the pull request process might remove an important code review step. This increases the risk of merging low-quality or buggy code into the main branch, potentially introducing bugs in the codebase.",
        "Measure": "Mandate blocking of force pushes in the version control platform.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Dismiss stale PR approvals",
        "Level": "3",
        "Description": "",
        "Risk": "Intentional or accidental alterations in critical branches like main (or master) through post-approval code additions.",
        "Measure": "Implement a policy where any commits made after a pull request has been approved automatically revoke that approval, necessitating a fresh review and re-approval process.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Require a PR before merging",
        "Level": "2",
        "Description": "",
        "Risk": "Intentional or accidental alterations in critical branches like main (or master).",
        "Measure": "Define source code management system policies (e.g. branch protection rules, mandatory code reviews from at least one person, ...) to ensure that changes to critical branches are only possible under defined conditions. These policies can be implemented at repository level or organization level, depending on the source code management system.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Require status checks to pass",
        "Level": "3",
        "Description": "",
        "Risk": "Organizations risk introducing broken builds, quality issues, and security vulnerabilities into their codebase.",
        "Measure": "Mandate passing of security related specified status checks, like successful builds or static application security tests, before proceeding.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 1",
        "Level": "2",
        "Description": "To tackle the security of code developed in-house, OWASP offers an extensive collection of [Cheatsheets](https://cheatsheetseries.owasp.org/) demonstrating how to implement features securely. Moreover, the Security Knowledge Framework[1] offers an extensive library of code patterns spanning several programming languages. These patterns can be used to not only jump-start the development process, but also do so securely. [...] The Requirements gathering process tries to answer the question: _\"\"What is the system going to do?\"\"_ At this stage, the [SAMM project](https://owaspsamm.org/model/) offers 3 distinct maturity levels covering both [in-house](https://owaspsamm.org/model/design/security-requirements/stream-a/) software development and [third party](https://owaspsamm.org/model/design/security-requirements/stream-b/) supplier security. ![SAMM Requirements](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/OWASP-in0.png) Organizations can use these to add solid security considerations at the start of the Software Development or Procurement process. These general security considerations can be audited by using a subsection of the ASVS controls in section V1 as a questionnaire. This process attempts to ensure that every feature has concrete security considerations. In case of internal development and if the organization maps Features to Epics, the [Security Knowledge Framework](https://securityknowledgeframework.org/) can be used to facilitate this process by leveraging its questionnaire function, shown below. Source: [OWASP Project Integration](https://raw.githubusercontent.com/OWASP/www-project-integration-standards/master/writeups/owasp_in_sdlc/index.md)",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 1 * OWASP Mobile Application Security Verification Standard in all applications provides a good baseline. Implement 95%-100% of the recommendations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 1 (50%)",
        "Level": "1",
        "Description": "To tackle the security of code developed in-house, OWASP offers an extensive collection of [Cheatsheets](https://cheatsheetseries.owasp.org/) demonstrating how to implement features securely. Moreover, the Security Knowledge Framework[1] offers an extensive library of code patterns spanning several programming languages. These patterns can be used to not only jumpstart the development process, but also do so securely. [...] The Requirements gathering process tries to answer the question: _\"\"What is the system going to do?\"\"_ At this stage, the [SAMM project](https://owaspsamm.org/model/) offers 3 distinct maturity levels covering both [in-house](https://owaspsamm.org/model/design/security-requirements/stream-a/) software development and [third party](https://owaspsamm.org/model/design/security-requirements/stream-b/) supplier security. ![SAMM Requirements](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/OWASP-in0.png) Organizations can use these to add solid security considerations at the start of the Software Development or Procurement process. These general security considerations can be audited by using a subsection of the ASVS controls in section V1 as a questionnaire. This process attempts to ensure that every feature has concrete security considerations. In case of internal development and if the organization maps Features to Epics, the [Security Knowledge Framework](https://securityknowledgeframework.org/) can be used to facilitate this process by leveraging its questionnaire function, shown below. Source: [OWASP Project Integration](https://raw.githubusercontent.com/OWASP/www-project-integration-standards/master/writeups/owasp_in_sdlc/index.md)",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 1 * OWASP Mobile Application Security Verification Standard in all applications provides a good baseline. Implement 50% of the recommendations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 2",
        "Level": "4",
        "Description": "",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 2 * OWASP Mobile Application Security Verification Standard Level 2 Implement 95%-100% of the recommendations.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 2 (75%)",
        "Level": "3",
        "Description": "",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 2 * OWASP Mobile Application Security Verification Standard Level 2 Implement 75% of the recommendations.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "App. Hardening Level 3",
        "Level": "5",
        "Description": "",
        "Risk": "Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.",
        "Measure": "Following frameworks like the * OWASP Application Security Verification Standard Level 3 * OWASP Mobile Application Security Verification Standard Implement 95%-100% of the recommendations.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Application Hardening",
        "Activity": "Contextualized Encoding",
        "Level": "1",
        "Description": "Bear in mind that utilizing frameworks is a recommended approach; however, they can develop known security weaknesses over time. Diligent and regular patching is crucial.",
        "Risk": "The generation of interpreter directives from user-provided data poses difficulties and can introduce vulnerabilities to injection attacks.",
        "Measure": "Implementing contextualized encoding, such as employing object-relational mapping tools or utilizing prepared statements, nearly removes the threat of injection vulnerabilities.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Applications are running in virtualized environments",
        "Level": "2",
        "Description": "",
        "Risk": "Through a vulnerability in one service on a server, the attacker gains access to other services running on the same server.",
        "Measure": "Applications are running in a dedicated and isolated virtualized environments.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Defense metrics",
        "Level": "4",
        "Description": "",
        "Risk": "IDS/IPS systems like packet- or application-firewalls detect and prevent attacks. It is not known how many attacks has been detected and blocked.",
        "Measure": "Gathering of defense metrics like TCP/UDP sources enables to assume the geographic location of the request. Assuming a Kubernetes cluster with an egress-traffic filter (e.g. IP/domain based), an alert might be send out in case of every violation. For ingress-traffic, alerting might not even be considered.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of collaborative security checks with developers and system administrators",
        "Level": "5",
        "Description": "",
        "Risk": "Security checks by external companies do not increase the understanding of an application/system for internal employees.",
        "Measure": "Periodically security reviews of source code (SCA), in which security SME, developers and operations are involved, are effective at increasing the robustness of software and the security knowledge of the teams involved.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Education and Guidance",
        "Activity": "Conduction of collaborative security checks with developers and system administrators",
        "Level": "5",
        "Description": "",
        "Risk": "Security checks by external companies do not increase the understanding of an application/system for internal employees.",
        "Measure": "Periodically security reviews of source code (SCA), in which security SME, developers and operations are involved, are effective at increasing the robustness of software and the security knowledge of the teams involved.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Audit of system events",
        "Level": "3",
        "Description": "",
        "Risk": "System events (system calls) trends and attacks are not detected.",
        "Measure": "Gathering of system calls.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Exploit likelihood estimation",
        "Level": "3",
        "Description": "",
        "Risk": "Without proper prioritization, organizations may waste time and effort on low-risk vulnerabilities while neglecting critical ones.",
        "Measure": "Estimate the likelihood of exploitation by using data (CISA KEV) from the past or prediction models (EPSS).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Build and Deployment",
        "Sub Dimension": "Deployment",
        "Activity": "Rolling update on deployment",
        "Level": "3",
        "Description": "",
        "Risk": "While a deployment is performed, the application can not be reached.",
        "Measure": "A deployment without downtime is performed*.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Process",
        "Activity": "Definition of a change management process",
        "Level": "3",
        "Description": "",
        "Risk": "The impact of a change is not controlled because these are not recorded or documented.",
        "Measure": "Each change of a system is automatically recorded and adequately logged.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Culture and Organization",
        "Sub Dimension": "Process",
        "Activity": "Definition of a change management process",
        "Level": "3",
        "Description": "",
        "Risk": "The impact of a change is not controlled because these are not recorded or documented.",
        "Measure": "Each change of a system is automatically recorded and adequately logged.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": ".gitignore",
        "Level": "4",
        "Description": "",
        "Risk": "Unintended leakage of secrets, debug, or workstation specific data",
        "Measure": ".gitignore files help prevent accidental commits of secrets, debug, or workstation specific data",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Versioning",
        "Level": "1",
        "Description": "",
        "Risk": "Deployment of untracked artifacts.",
        "Measure": "Version artifacts in order to identify deployed features and issues. This includes application and infrastructure code, jenkins configuration, container and virtual machine images.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": ".gitignore",
        "Level": "4",
        "Description": "",
        "Risk": "Unintended leakage of secrets, debug, or workstation specific data",
        "Measure": ".gitignore files help prevent accidental commits of secrets, debug, or workstation specific data",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Development and Source Control",
        "Activity": "Versioning",
        "Level": "1",
        "Description": "",
        "Risk": "Deployment of untracked artifacts.",
        "Measure": "Version artifacts in order to identify deployed features and issues. This includes application and infrastructure code, jenkins configuration, container and virtual machine images.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Backup",
        "Level": "2",
        "Description": "",
        "Risk": "If errors are experienced during the deployment process you want to deploy an old release. However, due to changes in the database this is often unfeasible.",
        "Measure": "Performing automated periodical backups are used. Backup before deployment can help facilitate deployments whilst testing the backup restore processes.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "MFA",
        "Level": "2",
        "Description": "",
        "Risk": "One factor authentication is more vulnerable to brute force attacks and is considered less secure.",
        "Measure": "Two ore more factor authentication for all accounts on all (important) systems and applications",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "MFA for admins",
        "Level": "1",
        "Description": "",
        "Risk": "One factor authentication is more vulnerable to brute force attacks and is considered less secure.",
        "Measure": "Two ore more factor authentication for all privileged accounts on systems and applications",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Immutable infrastructure",
        "Level": "3",
        "Description": "",
        "Risk": "The availability of IT systems might be disturbed due to components failures",
        "Measure": "Redundancies in the IT systems",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of a chaos monkey",
        "Level": "4",
        "Description": "",
        "Risk": "Due to manual changes on a system, they are not replaceable anymore. In case of a crash it might happen that a planned redundant system is unavailable. In addition, it is hard to replay manual changes.",
        "Measure": "A randomized periodically shutdown of systems makes sure, that nobody will perform manual changes to a system.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Backup",
        "Level": "2",
        "Description": "",
        "Risk": "If errors are experienced during the deployment process you want to deploy an old release. However, due to changes in the database this is often unfeasible.",
        "Measure": "Performing automated periodical backups are used. Backup before deployment can help facilitate deployments whilst testing the backup restore processes.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "MFA",
        "Level": "2",
        "Description": "",
        "Risk": "One factor authentication is more vulnerable to brute force attacks and is considered less secure.",
        "Measure": "Two ore more factor authentication for all accounts on all (important) systems and applications",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "MFA for admins",
        "Level": "1",
        "Description": "",
        "Risk": "One factor authentication is more vulnerable to brute force attacks and is considered less secure.",
        "Measure": "Two ore more factor authentication for all privileged accounts on systems and applications",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Baseline Hardening of the environment",
        "Level": "2",
        "Description": "",
        "Risk": "Using default configurations for a cluster environment leads to potential risks.",
        "Measure": "Harden environments according to best practices. Level 1 and partially level 2 from hardening practices like 'CIS Kubernetes Bench for Security' should be considered.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Filter outgoing traffic",
        "Level": "3",
        "Description": "",
        "Risk": "A compromised infrastructure component might try to send out stolen data.",
        "Measure": "Having a whitelist and explicitly allowing egress traffic provides the ability to stop unauthorized data leakage.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Hardening of the Environment",
        "Level": "4",
        "Description": "",
        "Risk": "Using default configurations for a cluster environment leads to potential risks.",
        "Measure": "Harden environments according to best practices. Level 2 and partially level 3 from hardening practices like 'CIS Kubernetes Bench for Security' should be considered.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Isolated networks for virtual environments",
        "Level": "2",
        "Description": "",
        "Risk": "Virtual environments in default settings are able to access other virtual environments on the network stack. By using virtual machines, it is often possible to connect to other virtual machines. By using docker, one bridge is used by default so that all containers on one host can communicate with each other.",
        "Measure": "The communication between virtual environments is controlled and regulated.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Advanced app. metrics",
        "Level": "4",
        "Description": "",
        "Risk": "People are not looking into tests results. Vulnerabilities not recolonized, even they are detected by tools.",
        "Measure": "All defects from the dimension Test- and Verification are instrumented.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Production near environments are used by developers",
        "Level": "4",
        "Description": "",
        "Risk": "In case an errors occurs in production, the developer need to be able to create a production near environment on a local development environment.",
        "Measure": "Usage of infrastructure as code helps to create a production near environment. The developer needs to be trained in order to setup a local development environment. In addition, it should be possible to create production like test data. Often personal identifiable information is anonymized in order to comply with data protection laws.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Infrastructure as Code",
        "Level": "3",
        "Description": "",
        "Risk": "No tracking of changes in systems might lead to errors in the configuration. In additions, it might lead to unauthorized changes. An examples is jenkins.",
        "Measure": "Systems are setup by code. A full environment can be provisioned. In addition, software like Jenkins 2 can be setup and configured in in code too. The code should be stored in a version control system.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Infrastructure as Code",
        "Level": "3",
        "Description": "",
        "Risk": "No tracking of changes in systems might lead to errors in the configuration. In additions, it might lead to unauthorized changes. An examples is jenkins.",
        "Measure": "Systems are setup by code. A full environment can be provisioned. In addition, software like Jenkins 2 can be setup and configured in in code too. The code should be stored in a version control system.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of an security account",
        "Level": "2",
        "Description": "",
        "Risk": "Having security auditing in the same account as infrastructure and applications at the cloud provide might cause evil administrators (or threat actors taking over an account of an administrator) to alter evidence like audit logs.",
        "Measure": "Usage of a separate account dedicated for security activities.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of edge encryption at transit",
        "Level": "1",
        "Description": "",
        "Risk": "Evil actors might be able to perform a man in the middle attack and sniff confidential information (e.g. authentication factors like passwords)",
        "Measure": "By using encryption at the edge of traffic in transit, it is impossible or at least harder to sniff credentials being outside of the organization.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of encryption at rest",
        "Level": "2",
        "Description": "",
        "Risk": "Evil actors might be able to access data and read information, e.g. from physical hard disks.",
        "Measure": "By using encryption at rest, it is impossible or at least harder to to read information.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of internal encryption at transit",
        "Level": "3",
        "Description": "",
        "Risk": "Evil actors within the organization of traffic in transit might be able to perform a man in the middle attack and sniff confidential information (e.g. authentication factors like passwords)",
        "Measure": "By using encryption internally, e.g. inside of a cluster, it is impossible or at least harder to sniff credentials.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "Very High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of security by default for components",
        "Level": "3",
        "Description": "",
        "Risk": "Components (images, libraries, applications) are not hardened.",
        "Measure": "Hardening of components is important, specially for image on which other teams base on. Hardening should be performed on the operation system and on the services inside (e.g. Nginx or a Java-Application).",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of test and production environments",
        "Level": "2",
        "Description": "",
        "Risk": "Security tests are not running regularly because test environments are missing",
        "Measure": "A test and a production like environment is used",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "PII logging concept",
        "Level": "5",
        "Description": "",
        "Risk": "Personal identifiable information (PII) is logged and the privacy law (e.g. General Data Protection Regulation) is not followed.",
        "Measure": "A concept how to log PII is documented and applied.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Virtual environments are limited",
        "Level": "2",
        "Description": "",
        "Risk": "Denial of service (internally by an attacker or unintentionally by a bug) on one service effects other services",
        "Measure": "All virtual environments are using resource limits on hard disks, memory and CPU",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Screens with metric visualization",
        "Level": "4",
        "Description": "",
        "Risk": "Security related information is discovered too late during an incident.",
        "Measure": "By having an internal accessible screen with a security related dashboards helps to visualize incidents.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Targeted alerting",
        "Level": "3",
        "Description": "",
        "Risk": "People are bored (ignorant) of incident alarm messages, as they are not responsible to react.",
        "Measure": "By the definition of target groups for incidents people are only getting alarms for incidents they are in charge for.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Usage of a vulnerability management system",
        "Level": "3",
        "Description": "For known vulnerabilities a processes to estimate the exploit ability of a vulnerability is recommended. To implement a security culture including training, office hours and security champions can help integrating security scanning at scale. Such activities help to understand why a vulnerability is potentially critical and needs handling.",
        "Risk": "Maintenance of false positives in each tool enforces a high workload. In addition a correlation of the same finding from different tools is not possible.",
        "Measure": "Aggregation of vulnerabilities in one tool reduce the workload to handle them, e.g. mark as false positives.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Test KPI",
        "Activity": "Generation of response statistics",
        "Level": "3",
        "Description": "",
        "Risk": "No or delayed reaction to findings leads to potential exploitation of findings.",
        "Measure": "Creation and response statistics (e.g. Mean Time to Resolution) of findings. This is also referred to as _Mean Time to Resolve_.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Usage of a vulnerability management system",
        "Level": "3",
        "Description": "For known vulnerabilities a processes to estimate the exploit ability of a vulnerability is recommended. To implement a security culture including training, office hours and security champions can help integrating security scanning at scale. Such activities help to understand why a vulnerability is potentially critical and needs handling.",
        "Risk": "Maintenance of false positives in each tool enforces a high workload. In addition a correlation of the same finding from different tools is not possible.",
        "Measure": "Aggregation of vulnerabilities in one tool reduce the workload to handle them, e.g. mark as false positives.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Usage of a vulnerability management system",
        "Level": "3",
        "Description": "For known vulnerabilities a processes to estimate the exploit ability of a vulnerability is recommended. To implement a security culture including training, office hours and security champions can help integrating security scanning at scale. Such activities help to understand why a vulnerability is potentially critical and needs handling.",
        "Risk": "Maintenance of false positives in each tool enforces a high workload. In addition a correlation of the same finding from different tools is not possible.",
        "Measure": "Aggregation of vulnerabilities in one tool reduce the workload to handle them, e.g. mark as false positives.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Alerting",
        "Level": "2",
        "Description": "",
        "Risk": "Incidents are discovered after they happened.",
        "Measure": "Thresholds for metrics are set. In case the thresholds are reached, alarms are send out. Which should get attention due to the critically.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage of client side dynamic components",
        "Level": "2",
        "Description": "",
        "Risk": "Parts of the service are not covered during the scan, because JavaScript is not getting executed. Therefore, the co",
        "Measure": "Usage of a spider which executes dynamic content like JavaScript, e.g. via Selenium.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Usage of different roles",
        "Level": "2",
        "Description": "",
        "Risk": "Parts of the service are not covered during the scan, because a login is not performed.",
        "Measure": "Integration of authentication with all roles used in the service.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test of the configuration of cloud environments",
        "Level": "2",
        "Description": "",
        "Risk": "Standard hardening practices for cloud environments are not performed leading to vulnerabilities.",
        "Measure": "With the help of tools the configuration of virtual environments are tested.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test cluster deployment resources",
        "Level": "2",
        "Description": "",
        "Risk": "The deployment configuration (e.g. kubernetes deployment resources) might contain unsecured configurations.",
        "Measure": "Test the deployment configuration for virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the cloud configuration",
        "Level": "2",
        "Description": "",
        "Risk": "Standard hardening practices for cloud environments are not performed leading to vulnerabilities.",
        "Measure": "With the help of tools, the configuration of virtual environments are tested.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the definition of virtualized environments",
        "Level": "2",
        "Description": "",
        "Risk": "The definition of virtualized environments (e.g. via <i>Dockerfile</i>) might contain unsecure configurations.",
        "Measure": "Test the definition of virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Dead code elimination",
        "Level": "5",
        "Description": "",
        "Risk": "Dead code increases the attack surface (use of hard coded credentials and variables, sensitive information)",
        "Measure": "Collection of unused code and then manual removal of unused code.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Exclusion of source code duplicates",
        "Level": "5",
        "Description": "",
        "Risk": "Duplicates in source code might influence the stability of the application.",
        "Measure": "Automatic Detection and manual removal of duplicates in source code.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test for Patch Deployment Time",
        "Level": "3",
        "Description": "",
        "Risk": "Automatic PRs for dependencies are overlooked resulting in known vulnerabilities in production artifacts.",
        "Measure": "Test of the Patch Deployment Time. This activity is not repeated in the Sub-Dimension \"\"Static depth for infrastructure\"\", but it applies to infrastructure as well.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test for Time to Patch",
        "Level": "2",
        "Description": "",
        "Risk": "Automatic PRs for dependencies are overlooked resulting in known vulnerabilities in production artifacts.",
        "Measure": "Test of the Time to Patch (e.g. based on Mean Time to Close automatic PRs) This activity is not repeated in the Sub-Dimension \"\"Static depth for infrastructure\"\", but it applies to infrastructure as well.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test libyear",
        "Level": "2",
        "Description": "",
        "Risk": "Vulnerabilities in running artifacts stay for long and might get exploited.",
        "Measure": "Test `libyear`, which provides a good insight how good patch management is.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Application tests",
        "Activity": "High coverage of security related module and integration tests",
        "Level": "5",
        "Description": "",
        "Risk": "Vulnerabilities are rising due to code changes in a complex microservice environment in not important components.",
        "Measure": "Implementation of security related tests via unit tests and integration tests. Including the test of libraries, in case the are not tested already.",
        "Knowledge": "",
        "Resources": "High",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Application tests",
        "Activity": "Security integration tests for important components",
        "Level": "3",
        "Description": "",
        "Risk": "Vulnerabilities are rising due to code changes in a complex microservice environment.",
        "Measure": "Implementation of essential security related integration tests. For example for authentication and authorization.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Application tests",
        "Activity": "Security unit tests for important components",
        "Level": "2",
        "Description": "",
        "Risk": "Vulnerabilities are rising due to code changes.",
        "Measure": "Usage of unit tests to test important security related features like authentication and authorization.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Application tests",
        "Activity": "Smoke Test",
        "Level": "4",
        "Description": "",
        "Risk": "During a deployment an error might happen which leads to non-availability of the system, a part of the system or a feature.",
        "Measure": "Integration tests are performed against the production environment after each deployment.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage of client side dynamic components",
        "Level": "2",
        "Description": "",
        "Risk": "Parts of the service are not covered during the scan, because JavaScript is not getting executed. Therefore, the co",
        "Measure": "Usage of a spider which executes dynamic content like JavaScript, e.g. via Selenium.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage of sequential operations",
        "Level": "3",
        "Description": "",
        "Risk": "Sequential operations like workflows (e.g. login -> put products in the basket",
        "Measure": "Sequential operations are defined and checked by the vulnerability scanner in the defined order.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Coverage of service to service communication",
        "Level": "5",
        "Description": "",
        "Risk": "Service to service communication is not covered.",
        "Measure": "Service to service communication is dumped and checked.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Medium",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Simple Scan",
        "Level": "2",
        "Description": "",
        "Risk": "Deficient security tests are performed. Simple vulnerabilities are not detected and missing security configurations (e.g. headers) are not set. Fast feedback is not given.",
        "Measure": "A simple scan is performed to get a security baseline. In case the test is done in under 10 minutes, it should be part of the build and deployment process.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Usage of different roles",
        "Level": "2",
        "Description": "",
        "Risk": "Parts of the service are not covered during the scan, because a login is not performed.",
        "Measure": "Integration of authentication with all roles used in the service.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Load tests",
        "Level": "4",
        "Description": "",
        "Risk": "As it is unknown how many requests the systems and applications can serve, due to an unexpected load the availability is disturbed.",
        "Measure": "Load test against the production system or a production near system is performed.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test for exposed services",
        "Level": "2",
        "Description": "",
        "Risk": "Standard network segmentation and firewalling has not been performed, leading to world open cluster management ports.",
        "Measure": "With the help of tools the network configuration of unintentional exposed cluster(s) are tested. To identify clusters, all subdomains might need to be identified with a tool like OWASP Amass to perform port scans based o the result.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test for unused Resources",
        "Level": "5",
        "Description": "",
        "Risk": "Unused resources, specially secrets, might be still valid, but are exposing information. As an attacker, I compromise a system, gather credentials and try to use them.",
        "Measure": "Test for unused resources helps to identify unused resources.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test network segmentation",
        "Level": "2",
        "Description": "",
        "Risk": "Wrong or no network segmentation of pods makes it easier for an attacker to access a database and extract or modify data.",
        "Measure": "Cluster internal test needs to be performed. Integration of fine granulated network segmentation (also between pods in the same namespace).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test of the configuration of cloud environments",
        "Level": "2",
        "Description": "",
        "Risk": "Standard hardening practices for cloud environments are not performed leading to vulnerabilities.",
        "Measure": "With the help of tools the configuration of virtual environments are tested.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test cluster deployment resources",
        "Level": "2",
        "Description": "",
        "Risk": "The deployment configuration (e.g. kubernetes deployment resources) might contain unsecured configurations.",
        "Measure": "Test the deployment configuration for virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the cloud configuration",
        "Level": "2",
        "Description": "",
        "Risk": "Standard hardening practices for cloud environments are not performed leading to vulnerabilities.",
        "Measure": "With the help of tools, the configuration of virtual environments are tested.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the definition of virtualized environments",
        "Level": "2",
        "Description": "",
        "Risk": "The definition of virtualized environments (e.g. via <i>Dockerfile</i>) might contain unsecure configurations.",
        "Measure": "Test the definition of virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Creation and application of a testing concept",
        "Level": "4",
        "Description": "",
        "Risk": "Scans might use a too small or too high test intensity.",
        "Measure": "A testing concept considering the amount of time per scan/intensity is created and applied. A dynamic analysis needs more time than a static analysis. The dynamic scan, depending on the test intensity might be performed on every commit, every night, every week or once in a month.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Creation and application of a testing concept",
        "Level": "4",
        "Description": "",
        "Risk": "Scans might use a too small or too high test intensity.",
        "Measure": "A testing concept considering the amount of time per scan/intensity is created and applied. A dynamic analysis needs more time than a static analysis. The dynamic scan, depending on the test intensity might be performed on every commit, every night, every week or once in a month.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "API design validation",
        "Level": "3",
        "Description": "",
        "Risk": "Creation of insecure or non-compliant API.",
        "Measure": "Design contract-first APIs using an interface description language such as OpenAPI, AsyncAPI or SOAP and validate the specification using specific tools. Checks should be integrated in IDEs and CI/CD pipelines.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Dead code elimination",
        "Level": "5",
        "Description": "",
        "Risk": "Dead code increases the attack surface (use of hard coded credentials and variables, sensitive information)",
        "Measure": "Collection of unused code and then manual removal of unused code.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Exclusion of source code duplicates",
        "Level": "5",
        "Description": "",
        "Risk": "Duplicates in source code might influence the stability of the application.",
        "Measure": "Automatic Detection and manual removal of duplicates in source code.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Stylistic analysis",
        "Level": "5",
        "Description": "",
        "Risk": "Unclear or obfuscated code might have unexpected behavior.",
        "Measure": "Analysis of compliance to style guides of the source code ensures that source code formatting rules are met (e.g. indentation, loops, ...).",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test for Patch Deployment Time",
        "Level": "3",
        "Description": "",
        "Risk": "Automatic PRs for dependencies are overlooked resulting in known vulnerabilities in production artifacts.",
        "Measure": "Test of the Patch Deployment Time. This activity is not repeated in the Sub-Dimension \"\"Static depth for infrastructure\"\", but it applies to infrastructure as well.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test for Time to Patch",
        "Level": "2",
        "Description": "",
        "Risk": "Automatic PRs for dependencies are overlooked resulting in known vulnerabilities in production artifacts.",
        "Measure": "Test of the Time to Patch (e.g. based on Mean Time to Close automatic PRs) This activity is not repeated in the Sub-Dimension \"\"Static depth for infrastructure\"\", but it applies to infrastructure as well.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Test libyear",
        "Level": "2",
        "Description": "",
        "Risk": "Vulnerabilities in running artifacts stay for long and might get exploited.",
        "Measure": "Test `libyear`, which provides a good insight how good patch management is.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Usage of multiple analyzers",
        "Level": "4",
        "Description": "",
        "Risk": "Each vulnerability analyzer has different opportunities. By using just one analyzer, some vulnerabilities might not be found.",
        "Measure": "Usage of multiple static tools to find more vulnerabilities.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Correlate known vulnerabilities in infrastructure with new image versions",
        "Level": "4",
        "Description": "",
        "Risk": "TODO.",
        "Measure": "TODO",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test of infrastructure components for known vulnerabilities",
        "Level": "4",
        "Description": "",
        "Risk": "Infrastructure components might have vulnerabilities.",
        "Measure": "Test for known vulnerabilities in infrastructure components. Often, the only way to respond to known vulnerabilities in operating system packages is to accept the risk and wait for a patch. As the patch needs to be applied fast when it is available, this activity depends on 'Usage of a maximum life for images'.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the definition of virtualized environments",
        "Level": "2",
        "Description": "",
        "Risk": "The definition of virtualized environments (e.g. via <i>Dockerfile</i>) might contain unsecure configurations.",
        "Measure": "Test the definition of virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Creation and application of a testing concept",
        "Level": "4",
        "Description": "",
        "Risk": "Scans might use a too small or too high test intensity.",
        "Measure": "A testing concept considering the amount of time per scan/intensity is created and applied. A dynamic analysis needs more time than a static analysis. The dynamic scan, depending on the test intensity might be performed on every commit, every night, every week or once in a month.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Deactivating of unneeded tests",
        "Level": "3",
        "Description": "",
        "Risk": "As tools cover a wide range of different vulnerability tests, they might not match the used components. Therefore, they need more time and resources as they need and the feedback loops takes too much time.",
        "Measure": "Unneeded tests are deactivated. For example in case the service is using a Mongo database and no mysql database, the dynamic scan doesn't need to test for sql injections.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Default settings for intensity",
        "Level": "1",
        "Description": "",
        "Risk": "Time pressure and ignorance might lead to false predictions for the test intensity.",
        "Measure": "The intensity of the used tools are not modified to safe time.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "High test intensity",
        "Level": "1",
        "Description": "",
        "Risk": "A too small intensity or a too high confidence might lead to not visible vulnerabilities.",
        "Measure": "A deep scan with high test intensity and a low confidence threshold is performed.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Virtual environments are limited",
        "Level": "2",
        "Description": "",
        "Risk": "Denial of service (internally by an attacker or unintentionally by a bug) on one service effects other services",
        "Measure": "All virtual environments are using resource limits on hard disks, memory and CPU",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "WAF Advanced",
        "Level": "5",
        "Description": "The advanced WAF setup is designed to ensure all data is in the correct format and any superfluous input parameters are automatically rejected. It includes machine learning algorithms to detect anomalies, custom-developed rules for real-time traffic analysis, and seamless integration with existing security infrastructures to adapt to the ever-changing threat landscape.",
        "Risk": "The presence of sophisticated threats necessitates a robust defense strategy where application inputs are meticulously scrutinized for security breaches, including advanced persistent threats and zero-day vulnerabilities.",
        "Measure": "An advanced WAF protection level includes rigorous input validation, rejecting any parameters not explicitly required, and custom rule sets that are dynamically updated in response to emerging threats.",
        "Knowledge": "",
        "Resources": "",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "WAF baseline",
        "Level": "3",
        "Description": "Begin with the WAF in a monitoring state to understand the traffic and threats. Progressively enforce blocking actions based on intelligence gathered, ensuring minimal disruption to legitimate traffic.",
        "Risk": "Vulnerable input, such as exploits, can infiltrate the application via numerous entry points, posing a significant security threat.",
        "Measure": "Implementing a web application firewall (WAF) is a critical security control. At a baseline level, the objective is to finely balance the reduction of false positives, maintaining user experience, against a potential increase in the less noticeable false negatives.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "WAF medium",
        "Level": "4",
        "Description": "Maintain the WAF in alert mode initially to ensure a comprehensive understanding of potential threats. With a medium-level configuration, the WAF settings are refined for greater precision in threat detection, with a stronger emphasis on security without significantly impacting legitimate traffic.",
        "Risk": "The threat from malicious inputs remains high, with exploits seeking to exploit any vulnerabilities present at the various points of entry to the application.",
        "Measure": "A WAF deployed with a medium level of protection strengthens the security posture by striking a more advanced balance between the detection of genuine threats and the minimization of false alarms.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test for exposed services",
        "Level": "2",
        "Description": "",
        "Risk": "Standard network segmentation and firewalling has not been performed, leading to world open cluster management ports.",
        "Measure": "With the help of tools the network configuration of unintentional exposed cluster(s) are tested. To identify clusters, all subdomains might need to be identified with a tool like OWASP Amass to perform port scans based o the result.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test for unused Resources",
        "Level": "5",
        "Description": "",
        "Risk": "Unused resources, specially secrets, might be still valid, but are exposing information. As an attacker, I compromise a system, gather credentials and try to use them.",
        "Measure": "Test for unused resources helps to identify unused resources.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test network segmentation",
        "Level": "2",
        "Description": "",
        "Risk": "Wrong or no network segmentation of pods makes it easier for an attacker to access a database and extract or modify data.",
        "Measure": "Cluster internal test needs to be performed. Integration of fine granulated network segmentation (also between pods in the same namespace).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Local development security checks performed",
        "Level": "3",
        "Description": "",
        "Risk": "Creating and developing code contains code smells and quality issues.",
        "Measure": "Integration of quality and linting plugins with interactive development environment (IDEs). Implement pre-commit checks to prevent secrets & other security issues being commit to source code.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Treatment of all defects",
        "Level": "5",
        "Description": "",
        "Risk": "Vulnerabilities with severity low are not visible.",
        "Measure": "All vulnerabilities are added to the quality gate.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Treatment of defects with severity high or higher",
        "Level": "1",
        "Description": "",
        "Risk": "Vulnerabilities with severity high or higher are not visible.",
        "Measure": "Vulnerabilities with severity high or higher are added to the quality gate.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Treatment of defects with severity middle",
        "Level": "3",
        "Description": "",
        "Risk": "Vulnerabilities with severity middle are not visible.",
        "Measure": "Vulnerabilities with severity middle are added to the quality gate.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Consolidation",
        "Activity": "Usage of a vulnerability management system",
        "Level": "3",
        "Description": "For known vulnerabilities a processes to estimate the exploit ability of a vulnerability is recommended. To implement a security culture including training, office hours and security champions can help integrating security scanning at scale. Such activities help to understand why a vulnerability is potentially critical and needs handling.",
        "Risk": "Maintenance of false positives in each tool enforces a high workload. In addition a correlation of the same finding from different tools is not possible.",
        "Measure": "Aggregation of vulnerabilities in one tool reduce the workload to handle them, e.g. mark as false positives.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for applications",
        "Activity": "Usage of multiple scanners",
        "Level": "4",
        "Description": "",
        "Risk": "Each vulnerability scanner has different opportunities. By using just one scanner, some vulnerabilities might not be found.",
        "Measure": "Usage of multiple spiders and scanner enhance the coverage and the vulnerabilities.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test of the configuration of cloud environments",
        "Level": "2",
        "Description": "",
        "Risk": "Standard hardening practices for cloud environments are not performed leading to vulnerabilities.",
        "Measure": "With the help of tools the configuration of virtual environments are tested.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Software Composition Analysis (client side)",
        "Level": "3",
        "Description": "",
        "Risk": "Client side components might have vulnerabilities.",
        "Measure": "Tests for known vulnerabilities in components via Software Composition Analysis of the frontend are performed.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Software Composition Analysis (server side)",
        "Level": "2",
        "Description": "Use a tool like trivy and concentrate on application related vulnerabilities. At this stage, ignore vulnerabilities in container base images used in the service.",
        "Risk": "Server side components might have vulnerabilities.",
        "Measure": "Tests for known vulnerabilities in server side components (e.g. backend/middleware) are performed.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Static analysis for all components/libraries",
        "Level": "5",
        "Description": "",
        "Risk": "Used components like libraries and legacy applications might have vulnerabilities",
        "Measure": "Usage of a static analysis for all used components.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Static analysis for all self written components",
        "Level": "4",
        "Description": "",
        "Risk": "Parts in the source code of the frontend or middleware have vulnerabilities.",
        "Measure": "Usage of static analysis tools for all parts of the middleware and frontend. Static analysis uses for example string matching algorithms and/or dataflow analysis.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Static analysis for important client side components",
        "Level": "3",
        "Description": "",
        "Risk": "Important parts in the source code of the frontend have vulnerabilities.",
        "Measure": "Usage of static analysis tools for important parts of the frontend are used. Static analysis uses for example string matching algorithms and/or dataflow analysis.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Static analysis for important server side components",
        "Level": "3",
        "Description": "",
        "Risk": "Important parts in the source code of the middleware have vulnerabilities.",
        "Measure": "Usage of static analysis tools for important parts of the middleware are used. Static analysis uses for example string matching algorithms and/or dataflow analysis.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Stylistic analysis",
        "Level": "5",
        "Description": "",
        "Risk": "Unclear or obfuscated code might have unexpected behavior.",
        "Measure": "Analysis of compliance to style guides of the source code ensures that source code formatting rules are met (e.g. indentation, loops, ...).",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for applications",
        "Activity": "Usage of multiple analyzers",
        "Level": "4",
        "Description": "",
        "Risk": "Each vulnerability analyzer has different opportunities. By using just one analyzer, some vulnerabilities might not be found.",
        "Measure": "Usage of multiple static tools to find more vulnerabilities.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Correlate known vulnerabilities in infrastructure with new image versions",
        "Level": "4",
        "Description": "",
        "Risk": "TODO.",
        "Measure": "TODO",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Very High",
        "Time": "",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Software Composition Analysis",
        "Level": "4",
        "Description": "Subscribing to Github projects and reading release notes might help. Software Composition Analysis for infrastructure might help, but is often too fine-granular.",
        "Risk": "Known vulnerabilities in infrastructure components like container images might get exploited.",
        "Measure": "Check for known vulnerabilities",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test cluster deployment resources",
        "Level": "2",
        "Description": "",
        "Risk": "The deployment configuration (e.g. kubernetes deployment resources) might contain unsecured configurations.",
        "Measure": "Test the deployment configuration for virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for image lifetime",
        "Level": "2",
        "Description": "",
        "Risk": "Old container images in production indicate that patch management is not performed and therefore vulnerabilities might exists.",
        "Measure": "Check the image age of containers in production.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for new image version",
        "Level": "3",
        "Description": "",
        "Risk": "When a new version of an image is available, it might fix security vulnerabilities.",
        "Measure": "Check for new images of containers in production.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test of infrastructure components for known vulnerabilities",
        "Level": "4",
        "Description": "",
        "Risk": "Infrastructure components might have vulnerabilities.",
        "Measure": "Test for known vulnerabilities in infrastructure components. Often, the only way to respond to known vulnerabilities in operating system packages is to accept the risk and wait for a patch. As the patch needs to be applied fast when it is available, this activity depends on 'Usage of a maximum life for images'.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the cloud configuration",
        "Level": "2",
        "Description": "",
        "Risk": "Standard hardening practices for cloud environments are not performed leading to vulnerabilities.",
        "Measure": "With the help of tools, the configuration of virtual environments are tested.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Medium",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test the definition of virtualized environments",
        "Level": "2",
        "Description": "",
        "Risk": "The definition of virtualized environments (e.g. via <i>Dockerfile</i>) might contain unsecure configurations.",
        "Measure": "Test the definition of virtualized environments for unsecured configurations.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Creation and application of a testing concept",
        "Level": "4",
        "Description": "",
        "Risk": "Scans might use a too small or too high test intensity.",
        "Measure": "A testing concept considering the amount of time per scan/intensity is created and applied. A dynamic analysis needs more time than a static analysis. The dynamic scan, depending on the test intensity might be performed on every commit, every night, every week or once in a month.",
        "Knowledge": "High (two disciplines)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Deactivating of unneeded tests",
        "Level": "3",
        "Description": "",
        "Risk": "As tools cover a wide range of different vulnerability tests, they might not match the used components. Therefore, they need more time and resources as they need and the feedback loops takes too much time.",
        "Measure": "Unneeded tests are deactivated. For example in case the service is using a Mongo database and no mysql database, the dynamic scan doesn't need to test for sql injections.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "Default settings for intensity",
        "Level": "1",
        "Description": "",
        "Risk": "Time pressure and ignorance might lead to false predictions for the test intensity.",
        "Measure": "The intensity of the used tools are not modified to safe time.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Test-Intensity",
        "Activity": "High test intensity",
        "Level": "1",
        "Description": "",
        "Risk": "A too small intensity or a too high confidence might lead to not visible vulnerabilities.",
        "Measure": "A deep scan with high test intensity and a low confidence threshold is performed.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Test for unauthorized installation",
        "Level": "3",
        "Description": "",
        "Risk": "Unapproved components are used.",
        "Measure": "Components must be whitelisted. Regular scans on the docker infrastructure (e.g. cluster) need to be performed, to verify that only standardized base images are used.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Centralized application logging",
        "Level": "3",
        "Description": "",
        "Risk": "Local stored logs can be unauthorized manipulated by attackers with system access or might be corrupt after an incident. In addition, it is hard to perform an correlation of logs. This leads attacks, which can be performed silently.",
        "Measure": "A centralized logging system is used and applications logs (including application exceptions) are shipped to it.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Centralized system logging",
        "Level": "1",
        "Description": "",
        "Risk": "Local stored system logs can be unauthorized manipulated by attackers or might be corrupt after an incident. In addition, it is hard to perform a aggregation of logs.",
        "Measure": "By using centralized logging logs are protected against unauthorized modification.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Correlation of security events",
        "Level": "5",
        "Description": "",
        "Risk": "Detection of security related events with hints on different systems/tools/metrics is not possible.",
        "Measure": "Events are correlated on one system. For example the correlation and visualization of failed login attempts combined with successful login attempts.",
        "Knowledge": "Very High (three or more disciplines)",
        "Resources": "Very High",
        "Time": "Very High",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Logging of security events",
        "Level": "2",
        "Description": "Implement logging of security relevant events. The following events tend to be security relevant: - successful/failed login/logout - creation, change, and deletion of users - errors during input validation and output creation - exceptions and errors with security in their name - transactions of value (e.g., financial transactions, costly operations) - :unicorn: (special things of your application)",
        "Risk": "* No track of security-relevant events makes it harder to analyze an incident. * Security incident analysis takes significantly less time with proper security events, such that an attack can be stopped before the attacker reaches his goal.",
        "Measure": "Security-relevant events like login/logout or creation, change, deletion of users should be logged.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "PII logging concept",
        "Level": "5",
        "Description": "",
        "Risk": "Personal identifiable information (PII) is logged and the privacy law (e.g. General Data Protection Regulation) is not followed.",
        "Measure": "A concept how to log PII is documented and applied.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "Low",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Logging",
        "Activity": "Visualized logging",
        "Level": "2",
        "Description": "",
        "Risk": "System and application protocols are not visualized properly which leads to no or very limited logging assessment. Specially developers might have difficulty to read applications logs with unusually tools like the Linux tool 'cat'",
        "Measure": "Protocols are visualized in a simple to use real time monitoring system. The GUI gives the ability to search for special attributes in the protocol.",
        "Knowledge": "Low (one discipline)",
        "Resources": "High",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Defense metrics",
        "Level": "4",
        "Description": "",
        "Risk": "IDS/IPS systems like packet- or application-firewalls detect and prevent attacks. It is not known how many attacks has been detected and blocked.",
        "Measure": "Gathering of defense metrics like TCP/UDP sources enables to assume the geographic location of the request. Assuming a Kubernetes cluster with an egress-traffic filter (e.g. IP/domain based), an alert might be send out in case of every violation. For ingress-traffic, alerting might not even be considered.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Simple application metrics",
        "Level": "1",
        "Description": "",
        "Risk": "Attacks on an application are not recognized.",
        "Measure": "Gathering of application metrics helps to identify incidents like brute force attacks, login/logout.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for malware",
        "Level": "3",
        "Description": "",
        "Risk": "Third party might include malware. Ether due to the maintainer (e.g. typo squatting of an image name and using the wrong image) or by an attacker on behalf of the maintainer with stolen credentials.",
        "Measure": "Check for malware in components (e.g. container images, VM baseline images, libraries).",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for new image version",
        "Level": "3",
        "Description": "",
        "Risk": "When a new version of an image is available, it might fix security vulnerabilities.",
        "Measure": "Check for new images of containers in production.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Low",
        "Time": "High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Usage of test and production environments",
        "Level": "2",
        "Description": "",
        "Risk": "Security tests are not running regularly because test environments are missing",
        "Measure": "A test and a production like environment is used",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Alerting",
        "Level": "2",
        "Description": "",
        "Risk": "Incidents are discovered after they happened.",
        "Measure": "Thresholds for metrics are set. In case the thresholds are reached, alarms are send out. Which should get attention due to the critically.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Implementation",
        "Sub Dimension": "Infrastructure Hardening",
        "Activity": "Virtual environments are limited",
        "Level": "2",
        "Description": "",
        "Risk": "Denial of service (internally by an attacker or unintentionally by a bug) on one service effects other services",
        "Measure": "All virtual environments are using resource limits on hard disks, memory and CPU",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "High",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Advanced availability and stability metrics",
        "Level": "3",
        "Description": "",
        "Risk": "Trends and advanced attacks are not detected.",
        "Measure": "Advanced metrics are gathered in relation to availability and stability. For example unplanned downtime's per year.",
        "Knowledge": "High (two disciplines)",
        "Resources": "Medium",
        "Time": "High",
        "Usefulness": "Very High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Deactivation of unused metrics",
        "Level": "3",
        "Description": "",
        "Risk": "High resources are used while gathering unused metrics.",
        "Measure": "Deactivation of unused metrics helps to free resources.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "",
        "Time": "",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Grouping of metrics",
        "Level": "3",
        "Description": "",
        "Risk": "The analysis of metrics takes long.",
        "Measure": "Meaningful grouping of metrics helps to speed up analysis.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Very High",
        "Usefulness": "Medium",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Monitoring of costs",
        "Level": "2",
        "Description": "",
        "Risk": "Not monitoring costs might lead to unexpected high resource consumption and a high invoice.",
        "Measure": "Implement cost budgets. Setting of an alert threshold and sending out errors when it is reached. In the best case, a second threshold with a limit is set so that the cost can not go higher.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Simple budget metrics",
        "Level": "1",
        "Description": "",
        "Risk": "Not getting notified about reaching the end of the budget (e.g. due to a denial of service) creates unexpected costs.",
        "Measure": "Cloud providers often provide insight into budgets. A threshold and alarming for the budget is set.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Low",
        "Time": "Low",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Simple system metrics",
        "Level": "1",
        "Description": "",
        "Risk": "Without simple metrics analysis of incidents are hard. In case an application uses a lot of CPU from time to time, it is hard for a developer to find out the source with Linux commands.",
        "Measure": "Gathering of system metrics helps to identify incidents and specially bottlenecks like in CPU usage, memory usage and hard disk usage.",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "",
        "Tools": ""
    },
    {
        "Dimension": "Information Gathering",
        "Sub Dimension": "Monitoring",
        "Activity": "Visualized metrics",
        "Level": "2",
        "Description": "",
        "Risk": "Not visualized metrics lead to restricted usage of metrics.",
        "Measure": "Metrics are visualized in real time in a user friendly way.",
        "Knowledge": "Low (one discipline)",
        "Resources": "Medium",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Dynamic depth for infrastructure",
        "Activity": "Load tests",
        "Level": "4",
        "Description": "",
        "Risk": "As it is unknown how many requests the systems and applications can serve, due to an unexpected load the availability is disturbed.",
        "Measure": "Load test against the production system or a production near system is performed.",
        "Knowledge": "High (two disciplines)",
        "Resources": "",
        "Time": "Medium",
        "Usefulness": "High",
        "Tools": ""
    },
    {
        "Dimension": "Test and Verification",
        "Sub Dimension": "Static depth for infrastructure",
        "Activity": "Test for stored secrets",
        "Level": "1",
        "Description": "",
        "Risk": "Stored secrets in git history, in container images or directly in code shouldn't exists because they might be exposed to unauthorized parties.",
        "Measure": "Test for secrets in code, container images and history",
        "Knowledge": "Medium (two disciplines)",
        "Resources": "Medium",
        "Time": "Low",
        "Usefulness": "Medium",
        "Tools": ""
    }
]