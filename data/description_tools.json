[
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test for stored secrets",
    "Level": "1",
    "Description": "Testing for stored secrets involves identifying hardcoded credentials, API keys, or sensitive data stored insecurely in source code or infrastructure configurations. This practice helps prevent unauthorized access and data breaches by ensuring that secrets are managed securely and not exposed in code or configurations. Tools like GitSecrets, TruffleHog, and Detect Secrets can assist in automating this process.",
    "Tools": [
      {
        "name": "GitSecrets",
        "description": "Prevents committing passwords and other sensitive information in git repositories.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "TruffleHog",
        "description": "Searches through git repositories for high-entropy strings and secrets, such as passwords and API keys.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Detect Secrets",
        "description": "A tool by Yelp to scan for secrets in code repositories.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "GitGuardian",
        "description": "Monitors and protects secrets in code repositories.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Snyk",
        "description": "Scans for secrets and vulnerabilities in code repositories.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "AWS Secrets Manager",
        "description": "Manages and rotates secrets securely in AWS environments.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "HashiCorp Vault",
        "description": "Centralized secrets management solution.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Baseline Hardening of the environment",
    "Level": "2",
    "Description": "Baseline hardening involves applying a minimum security configuration to systems and applications to reduce vulnerabilities and establish a secure foundation. This process includes removing unnecessary services, applying secure settings, and ensuring compliance with security policies. Tools such as Ansible, Puppet, Chef, CIS-CAT, and Terraform can automate and enforce these baselines.",
    "Tools": [
      {
        "name": "Ansible",
        "description": "Automates infrastructure configuration and hardening using playbooks.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Puppet",
        "description": "Configuration management tool to enforce security baselines.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Chef",
        "description": "Automates infrastructure configuration for hardening.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "CIS-CAT",
        "description": "Assesses and validates system configurations against CIS benchmarks.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Terraform",
        "description": "Infrastructure as Code tool to define and manage secure environments.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "SaltStack",
        "description": "Configuration management and orchestration tool for enforcing security baselines.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "OpenSCAP",
        "description": "Security compliance tool for assessing system security.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Security consulting on request",
    "Level": "1",
    "Description": "Providing security consulting on request involves offering expert advice and guidance to teams or individuals seeking to improve their security practices. This ensures that security considerations are integrated into projects and processes as needed.",
    "Tools": []
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Coverage analysis",
    "Level": "5",
    "Description": "Coverage analysis in dynamic testing assesses how much of the application's code is exercised during testing. It helps identify untested parts of the codebase, ensuring comprehensive testing and reducing the risk of undiscovered vulnerabilities. Tools like JaCoCo, Istanbul, Coverage.py, and Codecov can aid in measuring and visualizing code coverage.",
    "Tools": [
      {
        "name": "JaCoCo",
        "description": "Java code coverage library.",
        "opensource": true,
        "languages": ["Java"]
      },
      {
        "name": "Istanbul",
        "description": "JavaScript code coverage tool.",
        "opensource": true,
        "languages": ["JavaScript"]
      },
      {
        "name": "Coverage.py",
        "description": "Code coverage measurement for Python.",
        "opensource": true,
        "languages": ["Python"]
      },
      {
        "name": "Clover",
        "description": "Code coverage tool for Java and Groovy.",
        "opensource": false,
        "languages": ["Java", "Groovy"]
      },
      {
        "name": "Bullseye",
        "description": "Code coverage tool for C and C++.",
        "opensource": false,
        "languages": ["C", "C++"]
      },
      {
        "name": "DotCover",
        "description": "Code coverage tool for .NET applications.",
        "opensource": false,
        "languages": [".NET"]
      },
      {
        "name": "Cobertura",
        "description": "Java tool for measuring test coverage.",
        "opensource": true,
        "languages": ["Java"]
      },
      {
        "name": "Codecov",
        "description": "Cloud service for code coverage reports.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Coveralls",
        "description": "Web service to track code coverage over time.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Reward of good communication",
    "Level": "2",
    "Description": "Rewarding good communication involves recognizing and incentivizing effective information sharing and collaboration within teams. This fosters a culture where security concerns are openly discussed and addressed.",
    "Tools": []
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Coverage and control metrics",
    "Level": "4",
    "Description": "Monitoring coverage and control metrics involves tracking various security-related metrics to assess the effectiveness of security controls and identify areas needing improvement. This ensures continuous improvement and compliance with security standards. Tools such as Prometheus, Grafana, Datadog, New Relic, Splunk, Nagios, and the ELK Stack can be utilized for comprehensive metric monitoring and visualization.",
    "Tools": [
      {
        "name": "Prometheus",
        "description": "Open-source monitoring and alerting toolkit.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Grafana",
        "description": "Open-source platform for monitoring and observability.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Datadog",
        "description": "Monitoring and analytics platform for developers and IT operations.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "New Relic",
        "description": "Application performance monitoring and analytics.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Splunk",
        "description": "Platform for searching, monitoring, and analyzing machine-generated data.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Nagios",
        "description": "Open-source monitoring system for networks, applications, and infrastructure.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Zabbix",
        "description": "Enterprise-class open-source monitoring solution.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "description": "Comprehensive logging and monitoring solution.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Coverage of hidden endpoints",
    "Level": "3",
    "Description": "Coverage of hidden endpoints involves testing and verifying endpoints that are not immediately visible or documented in the application's API. This ensures that all potential access points are secured and free from vulnerabilities. Tools like Burp Suite, OWASP ZAP, Postman, SoapUI, Fiddler, and Insomnia can assist in discovering and testing these hidden endpoints.",
    "Tools": [
      {
        "name": "Burp Suite",
        "description": "Integrated platform for performing security testing of web applications.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "OWASP ZAP",
        "description": "Open-source web application security scanner.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Postman",
        "description": "API development and testing tool.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "SoapUI",
        "description": "Tool for testing SOAP and REST web services.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Fiddler",
        "description": "Web debugging proxy for monitoring and modifying HTTP/HTTPS traffic.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Insomnia",
        "description": "Open-source API client for REST and GraphQL.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Coverage of more input vectors",
    "Level": "3",
    "Description": "Coverage of more input vectors involves testing applications with a wide range of input data to identify potential vulnerabilities and ensure the application can handle unexpected or malicious inputs securely. Tools like FuzzDB, Burp Suite Intruder, OWASP ZAP Fuzzer, Radamsa, Wfuzz, AFL (American Fuzzy Lop), and Peach Fuzzer can facilitate comprehensive input vector testing.",
    "Tools": [
      {
        "name": "FuzzDB",
        "description": "A comprehensive database of attack patterns, predictable resource locations, and more for application security testing.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Burp Suite Intruder",
        "description": "Automated tool for performing fuzzing and other injection attacks.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "OWASP ZAP Fuzzer",
        "description": "Fuzzing tool within OWASP ZAP for dynamic application testing.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Radamsa",
        "description": "Test case generator for robustness testing and fuzzing.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Wfuzz",
        "description": "Web application brute forcer and fuzzing tool.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "AFL (American Fuzzy Lop)",
        "description": "Security-oriented fuzzer for finding vulnerabilities in software.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Peach Fuzzer",
        "description": "Comprehensive fuzzing framework for testing applications.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Usage of different roles",
    "Level": "2",
    "Description": "Using different roles in testing involves simulating various user roles and permissions to ensure that access controls are correctly implemented and that users can only perform actions appropriate to their roles. This helps prevent privilege escalation and unauthorized access. Tools like Postman, Selenium, Cypress, Karate, JUnit, and TestNG support role-based testing scenarios.",
    "Tools": [
      {
        "name": "Postman",
        "description": "API development and testing tool that allows role-based testing through environments and variables.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Selenium",
        "description": "Automates browsers for testing web applications with different user roles.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Cypress",
        "description": "End-to-end testing framework for web applications with support for role-based testing.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Karate",
        "description": "API testing tool that supports role-based scenarios.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "JUnit",
        "description": "Testing framework for Java applications, supporting role-based test cases.",
        "opensource": true,
        "languages": ["Java"]
      },
      {
        "name": "TestNG",
        "description": "Testing framework for Java, allowing for role-based testing configurations.",
        "opensource": true,
        "languages": ["Java"]
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Metrics are combined with tests",
    "Level": "5",
    "Description": "Combining metrics with tests involves integrating performance and security metrics into the testing process to provide a more comprehensive evaluation of the application's behavior and security posture. This approach enables better decision-making based on quantitative data. Tools like Grafana, Prometheus, Datadog, New Relic, ELK Stack, and Splunk can be used to visualize and analyze combined metrics and test results.",
    "Tools": [
      {
        "name": "Grafana",
        "description": "Open-source platform for monitoring and observability, allowing integration with various metrics and testing tools.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Prometheus",
        "description": "Monitoring system and time series database that can be integrated with testing frameworks.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Datadog",
        "description": "Monitoring and analytics platform that integrates with testing tools to combine metrics and test results.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "New Relic",
        "description": "Application performance monitoring tool that can combine metrics with testing data.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "description": "Comprehensive logging and monitoring solution that can integrate with test metrics.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Splunk",
        "description": "Platform for searching, monitoring, and analyzing machine-generated data, including test metrics.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Build and Deployment",
    "Sub Dimension": "Patch Management",
    "Activity": "Reduction of the attack surface",
    "Level": "2",
    "Description": "Reducing the attack surface involves minimizing the number of entry points and potential vulnerabilities in a system. This is achieved by disabling unnecessary services, removing unused software, and limiting exposed interfaces to decrease the opportunities for attackers.",
    "Tools": [
      {
        "name": "Microsoft Baseline Security Analyzer (MBSA)",
        "description": "Scans Windows systems for missing security updates and common security misconfigurations.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "OpenVAS",
        "description": "Open-source vulnerability scanner and manager.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Nessus",
        "description": "Comprehensive vulnerability scanning tool.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Qualys",
        "description": "Cloud-based security and compliance solutions, including attack surface reduction.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Tripwire",
        "description": "Security and compliance automation tool for reducing attack surfaces.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Sysinternals Suite",
        "description": "Collection of utilities to manage, troubleshoot, and diagnose Windows systems.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Lynis",
        "description": "Security auditing tool for Unix-based systems.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of war games",
    "Level": "4",
    "Description": "Conducting war games involves simulating attack scenarios to test an organization's defense mechanisms and response strategies. This practice helps identify weaknesses, improve incident response plans, and enhance overall security preparedness. While specific tools are not directly implemented in the DevSecOps pipeline, frameworks like MITRE ATT&CK and platforms like Cobalt Strike and Metasploit can be used during these exercises.",
    "Tools": []
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Applications are running in virtualized environments",
    "Level": "2",
    "Description": "Running applications in virtualized environments involves deploying them within virtual machines or containers. This isolation enhances security by segregating applications, simplifying management, and enabling the application of security policies at the virtualization layer. Tools such as VMware vSphere, VirtualBox, Docker, Kubernetes, Hyper-V, OpenStack, and LXC (Linux Containers) facilitate the deployment and management of virtualized environments.",
    "Tools": [
      {
        "name": "VMware vSphere",
        "description": "Virtualization platform for building and managing virtualized environments.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "VirtualBox",
        "description": "Open-source virtualization software for running multiple operating systems on a single machine.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Docker",
        "description": "Platform for developing, shipping, and running applications in containers.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Kubernetes",
        "description": "Open-source system for automating deployment, scaling, and management of containerized applications.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Hyper-V",
        "description": "Microsoft's virtualization platform for running virtual machines.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "OpenStack",
        "description": "Open-source cloud computing platform for creating and managing public and private clouds.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "LXC (Linux Containers)",
        "description": "Lightweight virtualization technology for running multiple isolated Linux systems on a single host.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Filter outgoing traffic",
    "Level": "3",
    "Description": "Filtering outgoing traffic involves controlling and monitoring the data leaving the network to prevent data exfiltration, unauthorized communications, and to enforce security policies. This helps in detecting and blocking malicious activities that attempt to send sensitive information outside the organization. Tools like pfSense, Cisco ASA, iptables, Fortinet FortiGate, UFW (Uncomplicated Firewall), Juniper SRX, and Sophos XG Firewall can be used to implement outbound traffic filtering.",
    "Tools": [
      {
        "name": "pfSense",
        "description": "Open-source firewall and router software with advanced traffic filtering capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Cisco ASA",
        "description": "Adaptive Security Appliance for comprehensive network traffic filtering and security.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "iptables",
        "description": "Linux utility for configuring network packet filtering rules.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Fortinet FortiGate",
        "description": "Enterprise-grade firewall with advanced traffic filtering and security features.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "UFW (Uncomplicated Firewall)",
        "description": "Simplified interface for managing iptables firewall rules on Linux.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Juniper SRX",
        "description": "High-performance network security solutions with robust traffic filtering capabilities.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Sophos XG Firewall",
        "description": "Next-generation firewall with comprehensive traffic filtering and security features.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Isolated networks for virtual environments",
    "Level": "2",
    "Description": "Creating isolated networks for virtual environments involves segregating network traffic between different virtual machines or containers to prevent unauthorized access and reduce the risk of lateral movement by attackers within the network. Tools like VMware NSX, Docker Network, Kubernetes Network Policies, Open vSwitch, Cisco ACI, Azure Virtual Network, and AWS VPC (Virtual Private Cloud) facilitate the creation and management of isolated virtual networks.",
    "Tools": [
      {
        "name": "VMware NSX",
        "description": "Network virtualization and security platform for creating isolated virtual networks.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Docker Network",
        "description": "Built-in networking features for isolating container networks.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Kubernetes Network Policies",
        "description": "Defines rules for network traffic isolation between Kubernetes pods.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Open vSwitch",
        "description": "Open-source multilayer virtual switch for creating isolated virtual networks.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Cisco ACI",
        "description": "Advanced network infrastructure for creating isolated and secure virtual networks.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Azure Virtual Network",
        "description": "Microsoft Azure service for creating isolated virtual networks in the cloud.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "AWS VPC (Virtual Private Cloud)",
        "description": "Amazon Web Services service for creating isolated virtual networks in the cloud.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Virtual environments are limited",
    "Level": "2",
    "Description": "Limiting virtual environments involves restricting the number and scope of virtual machines or containers to essential applications only. This minimizes potential attack vectors and simplifies security management by reducing the complexity of the virtual infrastructure. Tools like VMware vCenter, Docker Compose, Kubernetes RBAC (Role-Based Access Control), Terraform, Ansible, Microsoft System Center, and Proxmox VE help enforce these limitations.",
    "Tools": [
      {
        "name": "VMware vCenter",
        "description": "Centralized management platform for VMware virtual environments, allowing control over virtual machine deployment.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Docker Compose",
        "description": "Tool for defining and managing multi-container Docker applications, enabling controlled environment setups.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Kubernetes RBAC (Role-Based Access Control)",
        "description": "Manages permissions and limits access to Kubernetes resources.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Terraform",
        "description": "Infrastructure as Code tool to define and limit virtual environment configurations.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Ansible",
        "description": "Automation tool to enforce limits on virtual environments through playbooks.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Microsoft System Center",
        "description": "Suite of management tools for controlling and limiting virtual environments in Microsoft infrastructures.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Proxmox VE",
        "description": "Open-source server virtualization management platform with capabilities to limit virtual environments.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test the definition of virtualized environments",
    "Level": "2",
    "Description": "Testing the definition of virtualized environments involves verifying that the virtual infrastructure is configured according to security standards and best practices. This ensures that virtual machines and containers are deployed securely and operate within defined security parameters. Tools like Terraform, Ansible, Puppet, Chef, AWS CloudFormation, Azure Resource Manager (ARM) Templates, and Google Cloud Deployment Manager can be used to define and validate these configurations.",
    "Tools": [
      {
        "name": "Terraform",
        "description": "Infrastructure as Code tool used to define and validate virtualized environments.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Ansible",
        "description": "Automation tool for defining and testing virtual environment configurations.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Puppet",
        "description": "Configuration management tool for defining and verifying virtual infrastructure settings.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Chef",
        "description": "Automates the definition and testing of virtualized environments through code.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "AWS CloudFormation",
        "description": "Service for defining and provisioning AWS infrastructure using code.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Azure Resource Manager (ARM) Templates",
        "description": "Defines Azure infrastructure and services using JSON templates.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Google Cloud Deployment Manager",
        "description": "Service for defining and deploying Google Cloud infrastructure using configuration files.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Limitation of system events",
    "Level": "3",
    "Description": "Limiting system events involves restricting the types and frequency of system logs and events to essential information. This helps in reducing noise, improving log management efficiency, and focusing on critical security-related events. Tools such as Syslog-ng, Logstash, Splunk, Graylog, ELK Stack, Fluentd, and Nagios can be utilized to manage and filter system events effectively.",
    "Tools": [
      {
        "name": "Syslog-ng",
        "description": "Enhanced version of the syslog protocol with advanced filtering and processing capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Logstash",
        "description": "Data processing pipeline that ingests, transforms, and forwards logs.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Splunk",
        "description": "Platform for searching, monitoring, and analyzing machine-generated data, with capabilities to filter system events.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Graylog",
        "description": "Open-source log management platform with event filtering capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "description": "Comprehensive logging solution with event filtering and visualization.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Fluentd",
        "description": "Open-source data collector for unified logging.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Nagios",
        "description": "Monitoring tool that can be configured to limit and filter system events.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test of the configuration of cloud environments",
    "Level": "2",
    "Description": "Testing the configuration of cloud environments involves verifying that cloud resources are set up according to security best practices and organizational policies. This includes ensuring proper access controls, network configurations, and resource deployments to prevent misconfigurations and vulnerabilities. Tools like AWS Config, Azure Policy, Google Cloud Security Command Center, Terraform, Ansible, Puppet, Chef, and Cloud Custodian can assist in these verification processes.",
    "Tools": [
      {
        "name": "AWS Config",
        "description": "Service for assessing, auditing, and evaluating the configurations of AWS resources.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Azure Policy",
        "description": "Service for creating, assigning, and managing policies to enforce organizational standards on Azure resources.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Google Cloud Security Command Center",
        "description": "Service for assessing and managing security and compliance of Google Cloud environments.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Terraform",
        "description": "Infrastructure as Code tool used to define and test cloud environment configurations.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Ansible",
        "description": "Automation tool for configuring and testing cloud environments.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Puppet",
        "description": "Configuration management tool for defining and verifying cloud environment settings.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Chef",
        "description": "Automates the configuration and testing of cloud environments through code.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Cloud Custodian",
        "description": "Rules engine for managing cloud environments based on policies.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test cluster deployment resources",
    "Level": "2",
    "Description": "Testing cluster deployment resources involves verifying that the resources allocated for deploying clusters (such as Kubernetes clusters) are configured correctly and securely. This ensures optimal performance, scalability, and security of the clustered environments. Tools like Helm, Kustomize, Terraform, Pulumi, ClusterAPI, Ansible, and Packer can assist in defining and validating cluster deployment configurations.",
    "Tools": [
      {
        "name": "Helm",
        "description": "Package manager for Kubernetes, used to define and manage cluster resources.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Kustomize",
        "description": "Tool for customizing Kubernetes configurations.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Terraform",
        "description": "Infrastructure as Code tool for defining and testing cluster deployment resources.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Pulumi",
        "description": "Infrastructure as Code tool that allows defining cloud resources using programming languages.",
        "opensource": false,
        "languages": ["JavaScript", "TypeScript", "Python", "Go", "C#"]
      },
      {
        "name": "ClusterAPI",
        "description": "Kubernetes project to manage the lifecycle of Kubernetes clusters using declarative APIs.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Ansible",
        "description": "Automation tool for deploying and testing cluster resources.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Packer",
        "description": "Tool for creating identical machine images for multiple platforms from a single source configuration.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test the cloud configuration",
    "Level": "2",
    "Description": "Testing the cloud configuration involves verifying that cloud services and resources are set up securely and according to best practices. This includes ensuring proper access controls, network settings, encryption, and compliance with organizational policies. Tools like AWS Trusted Advisor, Azure Advisor, Google Cloud Security Command Center, Terraform, Ansible, Puppet, Chef, Cloud Custodian, and OpenSCAP can be used to validate cloud configurations.",
    "Tools": [
      {
        "name": "AWS Trusted Advisor",
        "description": "Service that provides real-time guidance to ensure AWS resources are configured following best practices.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Azure Advisor",
        "description": "Personalized cloud consultant that helps follow best practices to optimize Azure deployments.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Google Cloud Security Command Center",
        "description": "Service for managing and improving the security posture of Google Cloud environments.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Terraform",
        "description": "Infrastructure as Code tool used to define and test cloud configurations.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Ansible",
        "description": "Automation tool for configuring and testing cloud environments.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Puppet",
        "description": "Configuration management tool for defining and verifying cloud environment settings.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Chef",
        "description": "Automates the configuration and testing of cloud environments through code.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Cloud Custodian",
        "description": "Rules engine for managing cloud environments based on policies.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "OpenSCAP",
        "description": "Security compliance tool for assessing cloud environment configurations.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Each team has a security champion",
    "Level": "2",
    "Description": "Assigning a security champion to each team ensures that there is a dedicated person responsible for advocating and implementing security best practices within the team. This role promotes security awareness and facilitates the integration of security into the development lifecycle.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Regular security training of security champions",
    "Level": "2",
    "Description": "Regular security training for security champions ensures that they stay updated with the latest security threats, best practices, and tools. This continuous education enables them to effectively guide their teams in maintaining robust security measures.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Process",
    "Activity": "Approval by reviewing any new version",
    "Level": "3",
    "Description": "Implementing a review process for approving new software versions ensures that security assessments are conducted before deployment. This practice helps identify and mitigate vulnerabilities in new releases, maintaining the integrity and security of the application. Tools like Jenkins, GitHub Actions, GitLab CI/CD, CircleCI, Azure DevOps, Bitbucket Pipelines, and Atlassian Bamboo can facilitate automated approval workflows.",
    "Tools": [
      {
        "name": "Jenkins",
        "description": "Automation server for continuous integration and delivery, supporting version approval workflows.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "GitHub Actions",
        "description": "CI/CD workflows integrated with GitHub repositories for version approvals.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "GitLab CI/CD",
        "description": "Continuous integration and delivery tool integrated with GitLab repositories.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "CircleCI",
        "description": "Continuous integration and delivery platform with support for version approval processes.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Azure DevOps",
        "description": "Set of development tools for CI/CD with version approval capabilities.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Bitbucket Pipelines",
        "description": "CI/CD service integrated with Bitbucket repositories for version approvals.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Atlassian Bamboo",
        "description": "Continuous integration server that supports version approval workflows.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Dismiss stale PR approvals",
    "Level": "3",
    "Description": "Dismissing stale Pull Request (PR) approvals ensures that code reviews are up-to-date with the latest changes. This practice prevents outdated approvals from being used when significant modifications have been made, maintaining the integrity of the codebase. Tools like GitHub, GitLab, Bitbucket, Jenkins, Azure DevOps, SonarQube, and Review Board support managing and dismissing stale PR approvals.",
    "Tools": [
      {
        "name": "GitHub",
        "description": "Git repository hosting service with built-in PR management features.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "GitLab",
        "description": "Git repository manager with comprehensive PR/Merge Request features.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Bitbucket",
        "description": "Git repository management solution with PR review capabilities.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Jenkins",
        "description": "Automation server that can be configured to handle PR approvals and dismissals.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Azure DevOps",
        "description": "Set of development tools with PR management and approval workflows.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "SonarQube",
        "description": "Continuous inspection tool that can integrate with PR workflows to manage approvals.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Review Board",
        "description": "Web-based code review tool supporting PR approval management.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Require a PR before merging",
    "Level": "2",
    "Description": "Requiring a Pull Request (PR) before merging ensures that all code changes undergo peer review and approval. This practice promotes code quality, facilitates knowledge sharing, and helps identify potential security vulnerabilities before integration into the main codebase. Tools like GitHub, GitLab, Bitbucket, Phabricator, Gerrit, Review Board, and Azure DevOps support enforcing PR requirements.",
    "Tools": [
      {
        "name": "GitHub",
        "description": "Git repository hosting service with built-in PR features for code review.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "GitLab",
        "description": "Git repository manager with Merge Request capabilities for code review.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Bitbucket",
        "description": "Git repository management solution with PR review features.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Phabricator",
        "description": "Suite of open-source tools for peer code review and project management.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Gerrit",
        "description": "Web-based code review tool integrated with Git repositories.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Review Board",
        "description": "Web-based code review tool supporting PR workflows.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Azure DevOps",
        "description": "Set of development tools with PR and code review features.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": ".gitignore",
    "Level": "4",
    "Description": "Using a .gitignore file involves specifying intentionally untracked files that Git should ignore. This prevents sensitive information, build artifacts, and other unnecessary files from being committed to the repository, enhancing security and maintaining a clean codebase. Tools like Git, gitignore.io, Visual Studio Code, Atom, Sublime Text, GitKraken, and SourceTree assist in managing and generating .gitignore files.",
    "Tools": [
      {
        "name": "Git",
        "description": "Version control system that utilizes .gitignore files to manage ignored files.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "gitignore.io",
        "description": "Online service to generate .gitignore files tailored to specific languages and frameworks.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Visual Studio Code",
        "description": "Code editor with extensions to manage and generate .gitignore files.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Atom",
        "description": "Text editor with packages for managing .gitignore files.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Sublime Text",
        "description": "Text editor with plugins to assist in creating and managing .gitignore files.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "GitKraken",
        "description": "Git client with features to manage .gitignore configurations.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "SourceTree",
        "description": "Git GUI client that helps manage .gitignore settings.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Versioning",
    "Level": "1",
    "Description": "Versioning involves systematically assigning unique version numbers to software releases. This practice enables tracking of changes, facilitates rollback to previous versions if necessary, and ensures clear communication about the state of the software among team members and stakeholders. Tools like Git, SVN (Apache Subversion), Mercurial, GitHub, GitLab, Bitbucket, Azure DevOps, and Perforce Helix Core support robust versioning practices.",
    "Tools": [
      {
        "name": "Git",
        "description": "Distributed version control system for tracking changes in source code.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "SVN (Apache Subversion)",
        "description": "Centralized version control system for managing files and directories.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Mercurial",
        "description": "Distributed version control system for tracking changes in source code.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "GitHub",
        "description": "Git repository hosting service with versioning and collaboration features.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "GitLab",
        "description": "Git repository manager with comprehensive versioning and CI/CD features.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Bitbucket",
        "description": "Git repository management solution with versioning and collaboration tools.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Azure DevOps",
        "description": "Set of development tools with integrated version control and project management.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Perforce Helix Core",
        "description": "Version control system designed for large-scale projects with high performance.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Immutable infrastructure",
    "Level": "3",
    "Description": "Immutable infrastructure refers to the practice of deploying servers or containers that are never modified after deployment. Instead of updating existing servers, new versions are deployed, and old ones are decommissioned. This approach enhances security by reducing configuration drift and ensuring consistency across environments. Tools like Docker, Kubernetes, HashiCorp Packer, Terraform, Ansible, Immutable Infrastructure Frameworks (e.g., Immutable.js), and OpenShift facilitate the implementation of immutable infrastructure.",
    "Tools": [
      {
        "name": "Docker",
        "description": "Platform for developing, shipping, and running applications in containers, supporting immutable deployments.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Kubernetes",
        "description": "Container orchestration system that facilitates immutable infrastructure by managing container deployments.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "HashiCorp Packer",
        "description": "Tool for creating identical machine images for multiple platforms from a single source configuration.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Terraform",
        "description": "Infrastructure as Code tool that supports immutable infrastructure practices.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Ansible",
        "description": "Automation tool that can enforce immutable infrastructure by redeploying configurations.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Immutable Infrastructure Frameworks (e.g., Immutable.js)",
        "description": "Libraries and frameworks that support immutable data structures and deployment practices.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "OpenShift",
        "description": "Container application platform that supports immutable infrastructure through container orchestration.",
        "opensource": true,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Infrastructure as Code",
    "Level": "3",
    "Description": "Infrastructure as Code (IaC) involves managing and provisioning computing infrastructure through machine-readable configuration files rather than manual processes. This practice ensures consistency, repeatability, and version control of infrastructure deployments, enhancing security and efficiency. Tools like Terraform, Ansible, Puppet, Chef, CloudFormation, Azure Resource Manager (ARM) Templates, Pulumi, SaltStack, and Google Cloud Deployment Manager support IaC implementations.",
    "Tools": [
      {
        "name": "Terraform",
        "description": "Open-source IaC tool for building, changing, and versioning infrastructure safely and efficiently.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Ansible",
        "description": "Automation tool for configuring and managing infrastructure as code.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Puppet",
        "description": "Configuration management tool that supports IaC for automating infrastructure provisioning.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Chef",
        "description": "Automation platform that transforms infrastructure into code.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "CloudFormation",
        "description": "AWS service for modeling and setting up AWS resources using templates.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Azure Resource Manager (ARM) Templates",
        "description": "Defines Azure infrastructure and services using JSON templates.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Pulumi",
        "description": "Infrastructure as Code tool that allows defining cloud resources using programming languages.",
        "opensource": false,
        "languages": ["JavaScript", "TypeScript", "Python", "Go", "C#"]
      },
      {
        "name": "SaltStack",
        "description": "Configuration management and orchestration tool supporting IaC practices.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Google Cloud Deployment Manager",
        "description": "Service for defining and deploying Google Cloud infrastructure using configuration files.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Usage of a chaos monkey",
    "Level": "4",
    "Description": "Using a chaos monkey involves intentionally introducing failures into a system to test its resilience and ability to recover from unexpected disruptions. This practice helps identify weaknesses, improve fault tolerance, and ensure that the infrastructure can handle real-world incidents effectively. While specific tools are not directly integrated into the DevSecOps pipeline, platforms like Chaos Monkey, Gremlin, Chaos Toolkit, LitmusChaos, Pumba, Simian Army, and Kube-monkey can be utilized during chaos engineering exercises.",
    "Tools": []
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Centralized application logging",
    "Level": "3",
    "Description": "Centralized application logging involves aggregating logs from various applications into a single system. This facilitates easier monitoring, analysis, and correlation of events across different applications, enhancing the ability to detect and respond to security incidents. Tools like the ELK Stack (Elasticsearch, Logstash, Kibana), Splunk, Graylog, Fluentd, Loggly, Papertrail, and Datadog Logs can be used to implement centralized logging for applications.",
    "Tools": [
      {
        "name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "description": "Comprehensive logging solution for aggregating, searching, and visualizing logs.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Splunk",
        "description": "Platform for searching, monitoring, and analyzing machine-generated data.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Graylog",
        "description": "Open-source log management platform with centralized logging capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Fluentd",
        "description": "Open-source data collector for unified logging.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Loggly",
        "description": "Cloud-based log management and analytics service.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Papertrail",
        "description": "Cloud-hosted log management service for centralized application logging.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Datadog Logs",
        "description": "Logging service integrated with Datadog's monitoring platform.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Centralized system logging",
    "Level": "1",
    "Description": "Centralized system logging involves aggregating logs from various system components into a unified system. This practice simplifies monitoring, troubleshooting, and security analysis by providing a single source of truth for system events. Tools like Syslog-ng, rsyslog, Splunk, Graylog, Logstash, Fluentd, Papertrail, and Loggly facilitate centralized logging for system events.",
    "Tools": [
      {
        "name": "Syslog-ng",
        "description": "Enhanced version of the syslog protocol with advanced filtering and processing capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "rsyslog",
        "description": "High-performance log processing system with advanced filtering capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Splunk",
        "description": "Platform for searching, monitoring, and analyzing machine-generated data, including system logs.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Graylog",
        "description": "Open-source log management platform with centralized system logging capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Logstash",
        "description": "Data processing pipeline that ingests, transforms, and forwards logs.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Fluentd",
        "description": "Open-source data collector for unified logging, suitable for centralized system logs.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Papertrail",
        "description": "Cloud-hosted log management service for centralized system logging.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Loggly",
        "description": "Cloud-based log management and analytics service for centralized system logs.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Correlation of security events",
    "Level": "5",
    "Description": "Correlation of security events involves analyzing and linking related log entries from different sources to identify patterns, anomalies, or potential security incidents. This practice enhances the ability to detect complex attacks and respond promptly. Tools like Splunk, IBM QRadar, ArcSight, AlienVault OSSIM, LogRhythm, Graylog, Elastic Security, and Sumo Logic are effective for correlating security events across various data sources.",
    "Tools": [
      {
        "name": "Splunk",
        "description": "Platform for searching, monitoring, and analyzing machine-generated data with strong event correlation capabilities.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "IBM QRadar",
        "description": "Security Information and Event Management (SIEM) tool for real-time event correlation and threat detection.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "ArcSight",
        "description": "SIEM solution for collecting and correlating security events across the enterprise.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "AlienVault OSSIM",
        "description": "Open-source SIEM tool that combines event correlation, threat detection, and incident response.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "LogRhythm",
        "description": "SIEM platform for log management, event correlation, and threat detection.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Graylog",
        "description": "Open-source log management platform with capabilities for correlating security events.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Elastic Security",
        "description": "SIEM and security analytics solution built on the Elastic Stack for event correlation.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Sumo Logic",
        "description": "Cloud-native SIEM solution for real-time log analysis and event correlation.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "PII logging concept",
    "Level": "5",
    "Description": "PII logging involves capturing and managing Personally Identifiable Information (PII) within logs in a secure and compliant manner. This practice ensures that sensitive data is handled appropriately, minimizing the risk of data breaches and ensuring compliance with data protection regulations. While specific tools are not directly part of the DevSecOps pipeline, solutions like Splunk, LogRhythm, Elastic Security, IBM QRadar, AWS Macie, Microsoft Azure Purview, OneTrust, and BigID can assist in managing and securing PII data within logs.",
    "Tools": []
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Visualized logging",
    "Level": "2",
    "Description": "Visualized logging involves presenting log data in graphical formats such as charts, dashboards, and visualizations. This makes it easier to interpret large volumes of log data, identify trends, and detect anomalies quickly. Tools like Kibana, Grafana, Splunk, Graylog, Datadog Logs, Loggly, Papertrail, and Sumo Logic offer robust visualization capabilities for log data.",
    "Tools": [
      {
        "name": "Kibana",
        "description": "Visualization tool for the ELK Stack, used to create interactive dashboards for log data.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Grafana",
        "description": "Open-source platform for monitoring and observability with strong visualization capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Splunk",
        "description": "Platform for searching, monitoring, and analyzing machine-generated data with advanced visualization features.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Graylog",
        "description": "Open-source log management platform with visualization and dashboard capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Datadog Logs",
        "description": "Logging service with integrated visualization tools for log data.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Loggly",
        "description": "Cloud-based log management and analytics service with visualization and dashboard features.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Papertrail",
        "description": "Cloud-hosted log management service with real-time log visualization capabilities.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Sumo Logic",
        "description": "Cloud-native log management and analytics service with strong visualization tools.",
        "opensource": false,
        "languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Deactivation of unused metrics",
    "Level": "3",
    "Description": "Deactivating unused metrics involves disabling the collection and monitoring of unnecessary data points. This practice reduces storage costs, minimizes noise in monitoring systems, and focuses attention on relevant metrics that are crucial for security and performance analysis. Tools like Prometheus, Grafana, Datadog, Nagios, Zabbix, New Relic, AWS CloudWatch, and Azure Monitor can be configured to deactivate or ignore unused metrics.",
    "Tools": [
      {
        "name": "Prometheus",
        "description": "Open-source monitoring and alerting toolkit that allows selective metric collection.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Grafana",
        "description": "Visualization tool that can be configured to display only relevant metrics.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Datadog",
        "description": "Monitoring and analytics platform with features to disable unused metrics.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Nagios",
        "description": "Monitoring tool that allows configuration to ignore specific metrics.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "Zabbix",
        "description": "Enterprise-class open-source monitoring solution with metric filtering capabilities.",
        "opensource": true,
        "languages": []
      },
      {
        "name": "New Relic",
        "description": "Monitoring and observability platform with options to disable unnecessary metrics.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "AWS CloudWatch",
        "description": "Monitoring and observability service with customizable metric collection.",
        "opensource": false,
        "languages": []
      },
      {
        "name": "Azure Monitor",
        "description": "Comprehensive monitoring service for collecting, analyzing, and acting on telemetry from Azure resources.",
        "opensource": false,
        "languages": []
      }
    ]
  },

  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Role based authentication and authorization",
    "Level": "3",
    "Description": "Implementing role-based authentication and authorization involves defining user roles and permissions to control access to resources within the infrastructure. This ensures that users have only the necessary permissions to perform their tasks, minimizing the risk of unauthorized access. Pipeline-compatible tools such as AWS IAM, Keycloak, and Azure Active Directory can be integrated into CI/CD workflows to automate role management.",
    "Tools": [
      {
        "Name": "AWS IAM",
        "Description": "Provides role-based access control and fine-grained permissions for managing resources in AWS environments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Keycloak",
        "Description": "Open-source identity and access management tool for securing applications and services.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Azure Active Directory",
        "Description": "Microsoft's cloud-based identity and access management service, offering role-based access control and integration with various DevOps tools.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Simple access control for systems",
    "Level": "1",
    "Description": "Implementing simple access control for systems involves setting up basic authentication and authorization mechanisms to restrict access to authorized users only. While pipeline-compatible tools for basic access control are limited, standalone solutions like SSH key management and basic firewall configurations can be employed.",
    "Tools": []
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "MFA",
    "Level": "2",
    "Description": "Implementing Multi-Factor Authentication (MFA) adds an additional layer of security by requiring users to provide multiple forms of verification before gaining access. This enhances security by reducing the risk of compromised credentials. While there are robust MFA solutions like Duo Security, Auth0, and Okta, they are typically used outside of automated DevSecOps pipelines.",
    "Tools": []
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "MFA for admins",
    "Level": "1",
    "Description": "Implementing MFA for admins involves requiring administrative users to authenticate using multiple factors, enhancing the security of privileged accounts. Pipeline-compatible solutions for admin-specific MFA are limited, but standalone tools like Duo Security and Okta can be used to secure administrative access.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Ad-Hoc Security trainings for software developers",
    "Level": "1",
    "Description": "Conducting ad-hoc security trainings for software developers involves providing occasional training sessions focused on security best practices and awareness to enhance the security skills of the development team. While not directly pipeline-compatible, platforms like Pluralsight and Udemy offer security training modules that can be integrated into developer onboarding processes.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of build-it, break-it, fix-it contests",
    "Level": "3",
    "Description": "Conducting build-it, break-it, fix-it contests involves organizing events where teams build applications, attempt to break them by identifying vulnerabilities, and then fix the issues. This hands-on approach promotes practical security skills and fosters a culture of continuous improvement. While not pipeline-compatible, tools like GitHub Actions can automate parts of the contest workflows.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Office Hours",
    "Level": "3",
    "Description": "Organizing office hours involves setting aside dedicated time for team members to seek guidance, ask questions, and discuss security-related concerns with security experts or coaches, promoting an open and supportive security culture. This activity does not typically involve pipeline-compatible tools.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Regular security training for all",
    "Level": "2",
    "Description": "Providing regular security training for all employees ensures that everyone is aware of security policies, best practices, and emerging threats, fostering a security-conscious organizational culture. While pipeline-compatible tools are not directly applicable, Learning Management Systems (LMS) like Moodle or Coursera can facilitate regular training sessions.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Regular security training for externals",
    "Level": "4",
    "Description": "Conducting regular security training for externals, such as contractors or third-party vendors, ensures that they adhere to the organization's security standards and understand their responsibilities in maintaining security. Tools like LinkedIn Learning and external LMS platforms can support these training initiatives.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Information security targets are communicated",
    "Level": "2",
    "Description": "Communicating information security targets involves clearly conveying the organization's security goals, policies, and expectations to all stakeholders, ensuring alignment and understanding across the board. This activity primarily relies on documentation and communication tools rather than pipeline-compatible tools.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Aligning security in teams",
    "Level": "4",
    "Description": "Aligning security in teams involves integrating security objectives and responsibilities into the workflows and culture of various teams, ensuring that security is a shared responsibility and is embedded in daily operations. Tools like Confluence and Jira can facilitate the integration of security tasks into team workflows.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can integrate security tasks and track their progress within team workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Confluence",
        "Description": "Collaboration tool for creating and sharing security documentation and guidelines across teams.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Grouping of metrics",
    "Level": "3",
    "Description": "Grouping of metrics involves categorizing various monitoring metrics into logical groups based on their relevance and functionality. This helps in organizing data for better analysis and reporting, ensuring that related metrics are viewed together for more insightful monitoring.",
    "Tools": [
      {
        "Name": "Grafana",
        "Description": "Open-source platform for monitoring and observability with robust metric grouping and visualization capabilities.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Prometheus",
        "Description": "Open-source monitoring system and time series database that allows for effective metric grouping and querying.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Datadog",
        "Description": "Monitoring and analytics platform that supports grouping of metrics for comprehensive dashboards.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "New Relic",
        "Description": "Application performance monitoring tool with capabilities to group and visualize metrics effectively.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Zabbix",
        "Description": "Enterprise-class open-source monitoring solution that supports metric grouping and comprehensive dashboards.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Nagios",
        "Description": "Open-source monitoring tool that allows for the grouping and alerting of related metrics.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "Description": "Comprehensive logging and monitoring solution that facilitates the grouping and visualization of metrics.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Screens with metric visualization",
    "Level": "4",
    "Description": "Screens with metric visualization involve creating dashboards and graphical representations of monitoring data to provide real-time insights into system performance, security, and operational health. Pipeline-compatible tools like Grafana and Kibana can be integrated into CI/CD pipelines to automatically update and display relevant metrics.",
    "Tools": [
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating interactive and visually appealing dashboards for metric visualization.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kibana",
        "Description": "Visualization tool for the ELK Stack, used to create dashboards and graphs from log and metric data.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Platform for searching, monitoring, and analyzing machine-generated data with advanced visualization features.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Datadog",
        "Description": "Monitoring and analytics platform with robust dashboard and visualization capabilities.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "New Relic",
        "Description": "Application performance monitoring tool that offers comprehensive dashboards for metric visualization.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Graylog",
        "Description": "Open-source log management platform with dashboard and visualization features.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Prometheus",
        "Description": "Open-source monitoring system that integrates with Grafana for advanced metric visualization.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Targeted alerting",
    "Level": "3",
    "Description": "Targeted alerting involves configuring alerts to notify relevant stakeholders about specific events or thresholds that require attention. This ensures that alerts are meaningful and actionable, reducing alert fatigue and improving response times. Pipeline-compatible tools like Prometheus Alertmanager and Grafana Alerting can be integrated into CI/CD pipelines to automate alert configurations.",
    "Tools": [
      {
        "Name": "Prometheus Alertmanager",
        "Description": "Handles alerts sent by Prometheus server and manages silencing, inhibition, and routing of alerts.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana Alerting",
        "Description": "Integrated alerting system within Grafana for creating and managing alerts based on dashboard metrics.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Datadog Alerts",
        "Description": "Provides customizable alerting based on various metrics and events within the Datadog platform.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "PagerDuty",
        "Description": "Incident management platform that integrates with monitoring tools to deliver targeted alerts and manage responses.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OpsGenie",
        "Description": "Alerting and incident management tool that integrates with various monitoring solutions for targeted alerting.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Nagios",
        "Description": "Open-source monitoring tool that supports configurable alerting for various system metrics and events.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Zabbix",
        "Description": "Enterprise-class open-source monitoring solution with advanced alerting and notification features.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Integration of vulnerability issues into the development process",
    "Level": "3",
    "Description": "Integrating vulnerability issues into the development process involves embedding security checks and vulnerability assessments into the software development lifecycle (SDLC). This ensures that vulnerabilities are identified and addressed early, promoting a proactive approach to security. Pipeline-compatible tools like SonarQube, GitLab CI/CD, and Snyk can be integrated to automate vulnerability tracking and remediation.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that identifies vulnerabilities and integrates with development pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub Issues",
        "Description": "Issue tracking system integrated with GitHub repositories for managing vulnerability reports.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool integrated with GitLab repositories for managing vulnerability tracking.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps Boards",
        "Description": "Work tracking system within Azure DevOps for managing vulnerability issues and integration into development workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that finds and fixes vulnerabilities in dependencies and container images.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "WhiteSource",
        "Description": "Open-source security and license compliance management tool integrated into development processes.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Simple false positive treatment",
    "Level": "1",
    "Description": "Simple false positive treatment involves identifying and dismissing alerts or findings that are incorrectly flagged as vulnerabilities. This helps in reducing noise and focusing on genuine security issues. Pipeline-compatible tools like SonarQube and GitLab SAST can automate the dismissal of false positives within CI/CD workflows.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that allows for marking certain alerts as false positives to reduce noise.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab SAST",
        "Description": "Static Application Security Testing integrated within GitLab for scanning code and managing false positives.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub Advanced Security",
        "Description": "Provides features to mark certain security alerts as false positives within GitHub repositories.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that can be configured to ignore certain warnings or errors.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PyLint",
        "Description": "Static code analysis tool for Python that detects security vulnerabilities and code quality issues.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "IDE Plugins (e.g., PyCharm, VSCode)",
        "Description": "Integrated development environment plugins that allow developers to mark specific findings as false positives.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Dead code elimination",
    "Level": "5",
    "Description": "Dead code elimination involves identifying and removing portions of code that are never executed or are redundant. This helps in reducing the codebase size, improving maintainability, and minimizing potential security vulnerabilities associated with unused code. Pipeline-compatible tools like SonarQube, ESLint, and PyLint can automate dead code detection and removal within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that detects dead code among other code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that identifies unused variables and dead code.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PyLint",
        "Description": "Static code analysis tool for Python that detects dead code and unused variables.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "Coverity",
        "Description": "Static analysis tool that identifies dead code and other code quality issues.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "FindBugs",
        "Description": "Static analysis tool for Java that helps detect dead code and potential bugs.",
        "Opensource": true,
        "Languages": ["Java"]
      },
      {
        "Name": "PMD",
        "Description": "Source code analyzer that identifies dead code and other potential issues in Java, JavaScript, and other languages.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Unused",
        "Description": "Tool for identifying and removing unused code in various programming languages.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Visual Studio Code Extensions",
        "Description": "Extensions available for VSCode that help detect and remove dead code in multiple languages.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Exclusion of source code duplicates",
    "Level": "5",
    "Description": "Exclusion of source code duplicates involves identifying and removing duplicated code segments within the codebase. This enhances code maintainability, reduces the risk of inconsistencies, and minimizes the surface area for potential vulnerabilities. Pipeline-compatible tools like SonarQube, PMD, and Checkstyle can automate duplicate code detection and exclusion within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that detects code duplication and other code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "PMD",
        "Description": "Source code analyzer that identifies duplicate code and other potential issues in various languages.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Checkstyle",
        "Description": "Static code analysis tool for Java that can detect duplicated code segments.",
        "Opensource": true,
        "Languages": ["Java"]
      },
      {
        "Name": "CodeClimate",
        "Description": "Platform that offers code analysis for duplication, complexity, and other quality metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Simian",
        "Description": "Tool for detecting duplicate code in multiple programming languages.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "DupFinder",
        "Description": "Tool by JetBrains for finding duplicate code in .NET projects.",
        "Opensource": false,
        "Languages": [".NET"]
      },
      {
        "Name": "IntelliJ IDEA's Built-in Duplicate Detection",
        "Description": "Integrated feature within IntelliJ IDEA IDE to detect and manage duplicate code.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Patch Deployment Time",
    "Level": "3",
    "Description": "Testing for patch deployment time involves measuring the duration it takes to deploy security patches across the infrastructure. This ensures that patches are applied promptly to mitigate vulnerabilities effectively. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and Ansible can automate patch deployment tracking within CI/CD workflows.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate and track patch deployment pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool integrated with GitLab repositories for managing patch deployments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps",
        "Description": "Set of development tools with CI/CD pipelines for automating patch deployments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automation tool for orchestrating patch deployments across multiple systems.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that can automate patch deployments and track their progress.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Chef",
        "Description": "Automation platform for managing infrastructure and deploying patches efficiently.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Rundeck",
        "Description": "Automation service for running patch deployment jobs and tracking their execution times.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Time to Patch",
    "Level": "2",
    "Description": "Testing for Time to Patch involves measuring the time taken from identifying a vulnerability to successfully applying a patch. This metric helps in assessing the efficiency of the patch management process. Pipeline-compatible tools like GitLab CI/CD and Jenkins can automate the tracking of patch application timelines within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool that can automate and measure patch deployment processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can track vulnerability identification and patch application timelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps",
        "Description": "Set of development tools with built-in analytics to track patch deployment times.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ServiceNow",
        "Description": "IT service management tool that can be configured to track time to patch metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Platform for monitoring and analyzing patch deployment times through log data.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can track vulnerability identification and patch application timelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test libyear",
    "Level": "2",
    "Description": "Testing libyear involves assessing the longevity and maintenance status of third-party libraries and dependencies used within the application. This ensures that libraries are actively maintained, receive timely security updates, and are compatible with the application's future development. Pipeline-compatible tools like Renovate and GitHub Dependabot can automate dependency health monitoring within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Renovate",
        "Description": "Automated tool that manages and updates dependencies across various languages and platforms.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Dependabot",
        "Description": "GitHub-integrated tool that automatically creates pull requests to update dependencies.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitHub Dependabot",
        "Description": "Integrated tool within GitHub for monitoring and updating dependencies automatically.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Conduction of simple threat modeling on technical level",
    "Level": "1",
    "Description": "Conducting simple threat modeling on a technical level involves identifying potential security threats and vulnerabilities in the system's architecture and design. This helps in proactively addressing security concerns during the design phase. While pipeline-compatible tools for threat modeling are limited, methodologies like STRIDE and tools like Microsoft Threat Modeling Tool can be utilized.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of advanced abuse stories",
    "Level": "5",
    "Description": "Creating advanced abuse stories involves developing detailed and complex scenarios where malicious actors attempt to exploit system vulnerabilities. These stories help in understanding potential attack vectors, enhancing security measures, and improving incident response strategies. While not directly pipeline-compatible, frameworks like MITRE ATT&CK can inform the creation of these abuse stories.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of simple abuse stories",
    "Level": "3",
    "Description": "Creating simple abuse stories involves developing basic scenarios where attackers exploit common vulnerabilities. These stories assist in identifying fundamental security gaps and informing the development of effective security controls. Tools like OWASP Threat Dragon can aid in visualizing these scenarios within development workflows.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of threat modeling processes and standards",
    "Level": "3",
    "Description": "Creating threat modeling processes and standards involves establishing structured methodologies and guidelines for identifying, assessing, and mitigating security threats during the system design and development phases. This ensures consistency and thoroughness in threat modeling efforts across the organization. Pipeline-compatible tools like Microsoft Threat Modeling Tool can be integrated to standardize threat modeling within development pipelines.",
    "Tools": [
      {
        "Name": "Microsoft Threat Modeling Tool",
        "Description": "Tool for creating and managing threat models to identify and mitigate security risks.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Microservice-architecture",
    "Level": "5",
    "Description": "Adopting a microservice architecture involves structuring an application as a collection of loosely coupled, independently deployable services. This approach enhances scalability, flexibility, and resilience, but also introduces new security considerations such as inter-service communication, service discovery, and container security. Pipeline-compatible tools like Kubernetes, Docker, Istio, and Helm can automate the deployment and management of microservices within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages the deployment, scaling, and operations of application containers.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Docker",
        "Description": "Platform for developing, shipping, and running applications in containers, essential for microservice deployments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Istio",
        "Description": "Service mesh that provides a uniform way to secure, connect, and observe microservices.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Linkerd",
        "Description": "Lightweight service mesh for Kubernetes, focusing on simplicity and performance.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Consul",
        "Description": "Service networking solution that provides service discovery, configuration, and segmentation.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Envoy",
        "Description": "High-performance proxy designed for cloud-native applications, used in service meshes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Helm",
        "Description": "Package manager for Kubernetes that simplifies the deployment and management of microservices.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of collaborative team security checks",
    "Level": "4",
    "Description": "Conducting collaborative team security checks involves teams working together to review and assess the security posture of their applications and infrastructure. This collaborative approach fosters a shared responsibility for security, enhances knowledge sharing, and ensures that diverse perspectives are considered in identifying and mitigating security risks. While not directly pipeline-compatible, tools like Jira and Confluence can facilitate collaboration and tracking of security checks.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track and manage collaborative security check tasks.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Confluence",
        "Description": "Collaboration tool for documenting and sharing security check findings and strategies.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of collaborative security checks with developers and system administrators",
    "Level": "5",
    "Description": "Conducting collaborative security checks with developers and system administrators involves joint efforts to evaluate and enhance the security measures of applications and infrastructure. This collaboration ensures that both development and operations teams are aligned on security best practices, facilitates the identification of vulnerabilities, and promotes a culture of continuous security improvement. Pipeline-compatible tools like GitLab CI/CD and Jenkins can integrate security checks into collaborative workflows.",
    "Tools": [
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool that can integrate security checks into collaborative development workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate collaborative security check pipelines involving multiple teams.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Security code review",
    "Level": "2",
    "Description": "Conducting security code reviews involves systematically examining source code to identify and remediate security vulnerabilities. This practice ensures that code adheres to security best practices and reduces the risk of introducing vulnerabilities into the application. Pipeline-compatible tools like SonarQube, GitHub CodeQL, and GitLab SAST can automate security code reviews within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for security vulnerabilities and code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub CodeQL",
        "Description": "Semantic code analysis engine for identifying vulnerabilities in codebases hosted on GitHub.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab SAST",
        "Description": "Static Application Security Testing integrated within GitLab for scanning code for vulnerabilities.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Checkmarx",
        "Description": "Static Application Security Testing (SAST) tool that scans code for security vulnerabilities.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Fortify",
        "Description": "Comprehensive application security testing tool that identifies vulnerabilities in source code.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that finds and fixes vulnerabilities in dependencies and container images.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that can be configured with security-focused rules.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Analyze logs",
    "Level": "3",
    "Description": "Analyzing logs involves examining system and application log data to identify patterns, detect anomalies, and uncover potential security incidents. This practice is crucial for incident detection, troubleshooting, and ensuring compliance with security policies. Pipeline-compatible tools like ELK Stack, Splunk, and Graylog can automate log analysis within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "Description": "Comprehensive logging and monitoring solution for collecting, searching, and visualizing logs.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Platform for searching, monitoring, and analyzing machine-generated data, including logs.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Graylog",
        "Description": "Open-source log management platform with advanced log analysis and visualization capabilities.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Fluentd",
        "Description": "Open-source data collector for unified logging and log processing.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Loggly",
        "Description": "Cloud-based log management and analytics service for real-time log analysis.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Papertrail",
        "Description": "Cloud-hosted log management service for centralized log analysis and monitoring.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Datadog Logs",
        "Description": "Logging service integrated with Datadog's monitoring platform for comprehensive log analysis.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test of virtualized environments",
    "Level": "2",
    "Description": "Testing virtualized environments involves verifying that virtual machines and containers are configured securely and operate within defined security parameters. This ensures that the virtual infrastructure is resilient, compliant with security standards, and free from misconfigurations that could lead to vulnerabilities. Pipeline-compatible tools like Docker, Kubernetes, Ansible, and Terraform can automate the testing and validation of virtualized environments within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Docker",
        "Description": "Platform for developing, shipping, and running applications in containers, essential for virtual environment testing.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that facilitates the testing and validation of containerized environments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automation tool for configuring and managing virtual environments securely.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that automates the provisioning and hardening of virtual environments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Chef",
        "Description": "Automation platform for managing infrastructure and ensuring secure virtual environment configurations.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that supports the provisioning and testing of secure virtual environments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "VirtualBox",
        "Description": "Open-source virtualization tool for testing and verifying virtual environments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "VMware vSphere",
        "Description": "Virtualization platform for managing virtual machines and ensuring secure configurations.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Application Hardening",
    "Activity": "App. Hardening Level 1",
    "Level": "2",
    "Description": "Application Hardening Level 1 involves implementing basic security measures to protect applications from common vulnerabilities. This includes practices such as input validation, secure authentication mechanisms, encryption of sensitive data, and adherence to secure coding standards. Pipeline-compatible tools like SonarQube and ESLint can automate the enforcement of these security measures within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for security vulnerabilities and code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that can be configured with security-focused rules.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Application Hardening",
    "Activity": "App. Hardening Level 1 (50%)",
    "Level": "1",
    "Description": "App. Hardening Level 1 (50%) indicates partial implementation of basic security measures to protect applications. This may involve addressing some but not all common vulnerabilities, ensuring that foundational security practices are in place while further hardening is still required. Pipeline-compatible tools like SonarQube can assist in automating partial security checks within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for security vulnerabilities and code quality issues.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Hardening of the Environment",
    "Level": "4",
    "Description": "Hardening of the environment involves implementing advanced security measures to secure the infrastructure and systems. This includes configuring firewalls, applying security patches, enforcing strict access controls, disabling unnecessary services, and implementing intrusion detection systems. Pipeline-compatible tools like Ansible, Puppet, and Terraform can automate these hardening processes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Ansible",
        "Description": "Automation tool for orchestrating environment hardening tasks across multiple systems.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that automates the provisioning and hardening of environments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that supports the provisioning and hardening of secure environments.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "WAF Advanced",
    "Level": "5",
    "Description": "Implementing an advanced Web Application Firewall (WAF) involves configuring and deploying sophisticated WAF solutions to protect web applications from a wide range of threats, including SQL injection, cross-site scripting (XSS), and other OWASP Top Ten vulnerabilities. Pipeline-compatible tools like AWS WAF, Cloudflare WAF, and ModSecurity can be integrated into CI/CD pipelines to automate WAF configurations and updates.",
    "Tools": [
      {
        "Name": "AWS WAF",
        "Description": "Web Application Firewall that helps protect web applications from common web exploits.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Cloudflare WAF",
        "Description": "Cloud-based Web Application Firewall that provides protection against a wide range of web threats.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ModSecurity",
        "Description": "Open-source Web Application Firewall that can be integrated with various web servers to protect against attacks.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Local development security checks performed",
    "Level": "3",
    "Description": "Performing local development security checks involves integrating security scans and validations into the local development environment to identify and remediate vulnerabilities early in the development process. Pipeline-compatible tools like SonarLint, ESLint, and Brakeman can be integrated into IDEs to provide real-time security feedback during development.",
    "Tools": [
      {
        "Name": "SonarLint",
        "Description": "IDE extension that provides real-time feedback on code quality and security issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that can be configured with security-focused rules.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PyLint",
        "Description": "Static code analysis tool for Python that detects security vulnerabilities and code quality issues.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "Brakeman",
        "Description": "Static analysis tool specifically for Ruby on Rails applications to detect security vulnerabilities.",
        "Opensource": true,
        "Languages": ["Ruby"]
      },
      {
        "Name": "Checkmarx",
        "Description": "Static Application Security Testing (SAST) tool that scans code for security vulnerabilities.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },

  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Weak password test",
    "Level": "3",
    "Description": "Conducting weak password tests involves assessing the strength of passwords used within the infrastructure to ensure they meet security standards and are resistant to brute-force or guessing attacks. While tools like Hydra, John the Ripper, and Hashcat are effective for password cracking and strength testing, pipeline-compatible tools such as Burp Suite and OWASP ZAP can be integrated into CI/CD workflows to automate password strength assessments.",
    "Tools": [
      {
        "Name": "Burp Suite",
        "Description": "Web vulnerability scanner that includes password strength testing features and can be integrated into CI/CD pipelines for automated security assessments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can be configured for automated password strength testing within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Build and Deployment",
    "Sub Dimension": "Deployment",
    "Activity": "Inventory of production components",
    "Level": "1",
    "Description": "Maintaining an inventory of production components involves tracking and managing all software and hardware elements deployed in the production environment. This ensures visibility, facilitates maintenance, and aids in compliance and auditing processes. Pipeline-compatible tools such as Ansible, Puppet, Terraform, and AWS Config can automate the inventory management within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Ansible",
        "Description": "Automation tool that can manage and maintain an inventory of production components through playbooks integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["YAML"]
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that automates the inventory and management of production components within deployment pipelines.",
        "Opensource": true,
        "Languages": ["Ruby"]
      },
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can provision and manage production components, maintaining an up-to-date inventory integrated into CI/CD workflows.",
        "Opensource": true,
        "Languages": ["HCL"]
      },
      {
        "Name": "AWS Config",
        "Description": "Service that enables assessment, auditing, and evaluation of the configurations of AWS resources, maintaining an inventory of production components.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Build and Deployment",
    "Sub Dimension": "Deployment",
    "Activity": "Inventory of production dependencies",
    "Level": "3",
    "Description": "Maintaining an inventory of production dependencies involves tracking all third-party libraries, frameworks, and services that applications depend on in the production environment. This ensures that dependencies are up-to-date, secure, and compliant with organizational standards. Pipeline-compatible tools such as Dependabot, Renovate, and Snyk can automate the monitoring and management of production dependencies within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Dependabot",
        "Description": "GitHub-integrated tool that automatically creates pull requests to update dependencies, ensuring the production environment uses secure and up-to-date libraries.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Renovate",
        "Description": "Automated tool that manages and updates dependencies across various languages and platforms, integrated into CI/CD pipelines for continuous dependency management.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that scans for vulnerabilities in dependencies and monitors library health within CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Conduction of simple threat modeling on technical level",
    "Level": "1",
    "Description": "Conducting simple threat modeling on a technical level involves identifying potential security threats and vulnerabilities in the system's architecture and design. This helps in proactively addressing security concerns during the design phase. While pipeline-compatible tools for threat modeling are limited, methodologies like STRIDE and tools such as Microsoft Threat Modeling Tool can be utilized to standardize threat identification processes.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of advanced abuse stories",
    "Level": "5",
    "Description": "Creating advanced abuse stories involves developing detailed and complex scenarios where malicious actors attempt to exploit system vulnerabilities. These stories help in understanding potential attack vectors, enhancing security measures, and improving incident response strategies. While not directly pipeline-compatible, frameworks like MITRE ATT&CK can inform the creation of these abuse stories.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of simple abuse stories",
    "Level": "3",
    "Description": "Creating simple abuse stories involves developing basic scenarios where attackers exploit common vulnerabilities. These stories assist in identifying fundamental security gaps and informing the development of effective security controls. Tools like OWASP Threat Dragon can aid in visualizing these scenarios within development workflows.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of threat modeling processes and standards",
    "Level": "3",
    "Description": "Creating threat modeling processes and standards involves establishing structured methodologies and guidelines for identifying, assessing, and mitigating security threats during the system design and development phases. This ensures consistency and thoroughness in threat modeling efforts across the organization. Pipeline-compatible tools like Microsoft Threat Modeling Tool can be integrated to standardize threat modeling within development pipelines.",
    "Tools": [
      {
        "Name": "Microsoft Threat Modeling Tool",
        "Description": "Tool for creating and managing threat models to identify and mitigate security risks.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of advanced abuse stories",
    "Level": "5",
    "Description": "Creating advanced abuse stories involves developing detailed and complex scenarios where malicious actors attempt to exploit system vulnerabilities. These stories help in understanding potential attack vectors, enhancing security measures, and improving incident response strategies. While not directly pipeline-compatible, frameworks like MITRE ATT&CK can inform the creation of these abuse stories.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of simple abuse stories",
    "Level": "3",
    "Description": "Creating simple abuse stories involves developing basic scenarios where attackers exploit common vulnerabilities. These stories assist in identifying fundamental security gaps and informing the development of effective security controls. Tools like OWASP Threat Dragon can aid in visualizing these scenarios within development workflows.",
    "Tools": []
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Test KPI",
    "Activity": "Generation of response statistics",
    "Level": "3",
    "Description": "Generating response statistics involves collecting and analyzing data related to security incident responses to evaluate the effectiveness and efficiency of the incident management process. Pipeline-compatible tools like Prometheus and Grafana can automate the collection and visualization of response metrics within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "Open-source monitoring system and time series database that can collect response metrics for analysis.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating dashboards and visualizing response statistics collected by Prometheus.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Advanced visualization of defects",
    "Level": "4",
    "Description": "Advanced visualization of defects involves creating detailed and interactive dashboards that display defect metrics, trends, and patterns to provide deeper insights into the quality and security of the software. Pipeline-compatible tools like SonarQube, Jira, and Grafana can automate the aggregation and visualization of defect data within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that aggregates defect data and provides advanced visualization through dashboards.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can integrate with SonarQube to visualize defect trends and metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating detailed dashboards that visualize defect data from various sources.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Fix based on severity",
    "Level": "1",
    "Description": "Fixing defects based on severity involves prioritizing and addressing defects according to their impact and criticality. High-severity defects are resolved promptly to mitigate significant risks, while lower-severity issues are scheduled accordingly. Pipeline-compatible tools like Jira, GitLab, and SonarQube can automate the prioritization and tracking of defect fixes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track and prioritize defects based on severity levels.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated CI/CD tool that can manage and automate the prioritization of defect fixes based on severity.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that categorizes defects by severity and integrates with CI/CD pipelines for automated tracking.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Reproducible defect tickets",
    "Level": "4",
    "Description": "Creating reproducible defect tickets involves documenting defects in a manner that allows developers to consistently replicate and understand the issues. This ensures efficient resolution and prevents recurrence. Pipeline-compatible tools like Jira, GitHub Issues, and GitLab Issues can automate the creation and management of reproducible defect tickets within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can automate the creation and tracking of reproducible defect tickets.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitHub Issues",
        "Description": "Issue tracking system integrated with GitHub repositories for managing reproducible defect reports.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab Issues",
        "Description": "Issue tracking feature within GitLab for managing and automating reproducible defect tickets.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Simple visualization of defects",
    "Level": "2",
    "Description": "Simple visualization of defects involves creating basic charts and graphs to display defect metrics, such as defect count over time or defect distribution by category. This provides a straightforward overview of the defect landscape. Pipeline-compatible tools like SonarQube and Grafana can automate the generation of simple defect visualizations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that provides basic visualizations of defect metrics through dashboards.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating simple charts and graphs to visualize defect data from various sources.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Advanced visualization of defects",
    "Level": "4",
    "Description": "Advanced visualization of defects involves creating detailed and interactive dashboards that display defect metrics, trends, and patterns to provide deeper insights into the quality and security of the software. Pipeline-compatible tools like SonarQube, Jira, and Grafana can automate the aggregation and visualization of defect data within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that aggregates defect data and provides advanced visualization through dashboards.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can integrate with SonarQube to visualize defect trends and metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating detailed dashboards that visualize defect data from various sources.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Reproducible defect tickets",
    "Level": "4",
    "Description": "Creating reproducible defect tickets involves documenting defects in a manner that allows developers to consistently replicate and understand the issues. This ensures efficient resolution and prevents recurrence. Pipeline-compatible tools like Jira, GitHub Issues, and GitLab Issues can automate the creation and management of reproducible defect tickets within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can automate the creation and tracking of reproducible defect tickets.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitHub Issues",
        "Description": "Issue tracking system integrated with GitHub repositories for managing reproducible defect reports.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab Issues",
        "Description": "Issue tracking feature within GitLab for managing and automating reproducible defect tickets.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Simple visualization of defects",
    "Level": "2",
    "Description": "Simple visualization of defects involves creating basic charts and graphs to display defect metrics, such as defect count over time or defect distribution by category. This provides a straightforward overview of the defect landscape. Pipeline-compatible tools like SonarQube and Grafana can automate the generation of simple defect visualizations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that provides basic visualizations of defect metrics through dashboards.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating simple charts and graphs to visualize defect data from various sources.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Conduction of simple threat modeling on technical level",
    "Level": "1",
    "Description": "Conducting simple threat modeling on a technical level involves identifying potential security threats and vulnerabilities in the system's architecture and design. This helps in proactively addressing security concerns during the design phase. While pipeline-compatible tools for threat modeling are limited, methodologies like STRIDE and tools such as Microsoft Threat Modeling Tool can be utilized to standardize threat identification processes.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of threat modeling processes and standards",
    "Level": "3",
    "Description": "Creating threat modeling processes and standards involves establishing structured methodologies and guidelines for identifying, assessing, and mitigating security threats during the system design and development phases. This ensures consistency and thoroughness in threat modeling efforts across the organization. Pipeline-compatible tools like Microsoft Threat Modeling Tool can be integrated to standardize threat modeling within development pipelines.",
    "Tools": [
      {
        "Name": "Microsoft Threat Modeling Tool",
        "Description": "Tool for creating and managing threat models to identify and mitigate security risks.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Advanced visualization of defects",
    "Level": "4",
    "Description": "Advanced visualization of defects involves creating detailed and interactive dashboards that display defect metrics, trends, and patterns to provide deeper insights into the quality and security of the software. Pipeline-compatible tools like SonarQube, Jira, and Grafana can automate the aggregation and visualization of defect data within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that aggregates defect data and provides advanced visualization through dashboards.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can integrate with SonarQube to visualize defect trends and metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating detailed dashboards that visualize defect data from various sources.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Reproducible defect tickets",
    "Level": "4",
    "Description": "Creating reproducible defect tickets involves documenting defects in a manner that allows developers to consistently replicate and understand the issues. This ensures efficient resolution and prevents recurrence. Pipeline-compatible tools like Jira, GitHub Issues, and GitLab Issues can automate the creation and management of reproducible defect tickets within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can automate the creation and tracking of reproducible defect tickets.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitHub Issues",
        "Description": "Issue tracking system integrated with GitHub repositories for managing reproducible defect reports.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab Issues",
        "Description": "Issue tracking feature within GitLab for managing and automating reproducible defect tickets.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Simple visualization of defects",
    "Level": "2",
    "Description": "Simple visualization of defects involves creating basic charts and graphs to display defect metrics, such as defect count over time or defect distribution by category. This provides a straightforward overview of the defect landscape. Pipeline-compatible tools like SonarQube and Grafana can automate the generation of simple defect visualizations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that provides basic visualizations of defect metrics through dashboards.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating simple charts and graphs to visualize defect data from various sources.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of advanced abuse stories",
    "Level": "5",
    "Description": "Creating advanced abuse stories involves developing detailed and complex scenarios where malicious actors attempt to exploit system vulnerabilities. These stories help in understanding potential attack vectors, enhancing security measures, and improving incident response strategies. While not directly pipeline-compatible, frameworks like MITRE ATT&CK can inform the creation of these abuse stories.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of simple abuse stories",
    "Level": "3",
    "Description": "Creating simple abuse stories involves developing basic scenarios where attackers exploit common vulnerabilities. These stories assist in identifying fundamental security gaps and informing the development of effective security controls. Tools like OWASP Threat Dragon can aid in visualizing these scenarios within development workflows.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of collaborative security checks with developers and system administrators",
    "Level": "5",
    "Description": "Conducting collaborative security checks with developers and system administrators involves joint efforts to evaluate and enhance the security measures of applications and infrastructure. This collaboration ensures that both development and operations teams are aligned on security best practices, facilitates the identification of vulnerabilities, and promotes a culture of continuous security improvement. Pipeline-compatible tools like GitLab CI/CD and Jenkins can integrate security checks into collaborative workflows.",
    "Tools": [
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool that can integrate security checks into collaborative development workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate collaborative security check pipelines involving multiple teams.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of collaborative team security checks",
    "Level": "4",
    "Description": "Conducting collaborative team security checks involves teams working together to review and assess the security posture of their applications and infrastructure. This collaborative approach fosters a shared responsibility for security, enhances knowledge sharing, and ensures that diverse perspectives are considered in identifying and mitigating security risks. While not directly pipeline-compatible, tools like Jira and Confluence can facilitate collaboration and tracking of security checks.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track and manage collaborative security check tasks.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Confluence",
        "Description": "Collaboration tool for documenting and sharing security check findings and strategies.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of war games",
    "Level": "4",
    "Description": "Conducting war games involves simulating real-world cyberattack scenarios to test the organization's incident response capabilities and identify potential security weaknesses. This practice enhances preparedness, improves coordination among teams, and strengthens overall security posture. Pipeline-compatible tools like SimSpace and BattleEye can facilitate the automation and integration of war games within CI/CD pipelines.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of advanced abuse stories",
    "Level": "5",
    "Description": "Creating advanced abuse stories involves developing detailed and complex scenarios where malicious actors attempt to exploit system vulnerabilities. These stories help in understanding potential attack vectors, enhancing security measures, and improving incident response strategies. While not directly pipeline-compatible, frameworks like MITRE ATT&CK can inform the creation of these abuse stories.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of simple abuse stories",
    "Level": "3",
    "Description": "Creating simple abuse stories involves developing basic scenarios where attackers exploit common vulnerabilities. These stories assist in identifying fundamental security gaps and informing the development of effective security controls. Tools like OWASP Threat Dragon can aid in visualizing these scenarios within development workflows.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Information security targets are communicated",
    "Level": "2",
    "Description": "Communicating information security targets involves clearly conveying the organization's security goals, policies, and expectations to all stakeholders, ensuring alignment and understanding across the board. This activity primarily relies on documentation and communication tools rather than pipeline-compatible tools.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of war games",
    "Level": "4",
    "Description": "Conducting war games involves simulating real-world cyberattack scenarios to test the organization's incident response capabilities and identify potential security weaknesses. This practice enhances preparedness, improves coordination among teams, and strengthens overall security posture. Pipeline-compatible tools like SimSpace and BattleEye can facilitate the automation and integration of war games within CI/CD pipelines.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Reward of good communication",
    "Level": "2",
    "Description": "Rewarding good communication involves recognizing and incentivizing effective information sharing and collaboration among team members. This fosters a culture of transparency, encourages proactive security practices, and enhances overall team cohesion. Pipeline-compatible tools like Slack and Microsoft Teams can facilitate communication, while platforms like Bonusly can manage rewards and recognition within CI/CD workflows.",
    "Tools": []
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Fix based on accessibility",
    "Level": "3",
    "Description": "Fixing defects based on accessibility involves prioritizing and addressing defects that impact the accessibility of the application, ensuring it is usable by individuals with disabilities. This enhances the user experience and ensures compliance with accessibility standards. Pipeline-compatible tools like Axe, Lighthouse, and SonarQube can automate the detection and tracking of accessibility-related defects within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Axe",
        "Description": "Accessibility testing tool that can be integrated into CI/CD pipelines to detect and fix accessibility issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Lighthouse",
        "Description": "Automated tool for improving the quality of web pages, including accessibility audits within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that can categorize and track accessibility-related defects within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Fix based on accessibility",
    "Level": "3",
    "Description": "Fixing defects based on accessibility involves prioritizing and addressing defects that impact the accessibility of the application, ensuring it is usable by individuals with disabilities. This enhances the user experience and ensures compliance with accessibility standards. Pipeline-compatible tools like Axe, Lighthouse, and SonarQube can automate the detection and tracking of accessibility-related defects within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Axe",
        "Description": "Accessibility testing tool that can be integrated into CI/CD pipelines to detect and fix accessibility issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Lighthouse",
        "Description": "Automated tool for improving the quality of web pages, including accessibility audits within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that can categorize and track accessibility-related defects within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Fix based on severity",
    "Level": "1",
    "Description": "Fixing defects based on severity involves prioritizing and addressing defects according to their impact and criticality. High-severity defects are resolved promptly to mitigate significant risks, while lower-severity issues are scheduled accordingly. Pipeline-compatible tools like Jira, GitLab, and SonarQube can automate the prioritization and tracking of defect fixes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track and prioritize defects based on severity levels.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated CI/CD tool that can manage and automate the prioritization of defect fixes based on severity.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that categorizes defects by severity and integrates with CI/CD pipelines for automated tracking.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Fix based on accessibility",
    "Level": "3",
    "Description": "Fixing defects based on accessibility involves prioritizing and addressing defects that impact the accessibility of the application, ensuring it is usable by individuals with disabilities. This enhances the user experience and ensures compliance with accessibility standards. Pipeline-compatible tools like Axe, Lighthouse, and SonarQube can automate the detection and tracking of accessibility-related defects within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Axe",
        "Description": "Accessibility testing tool that can be integrated into CI/CD pipelines to detect and fix accessibility issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Lighthouse",
        "Description": "Automated tool for improving the quality of web pages, including accessibility audits within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that can categorize and track accessibility-related defects within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Fix based on severity",
    "Level": "1",
    "Description": "Fixing defects based on severity involves prioritizing and addressing defects according to their impact and criticality. High-severity defects are resolved promptly to mitigate significant risks, while lower-severity issues are scheduled accordingly. Pipeline-compatible tools like Jira, GitLab, and SonarQube can automate the prioritization and tracking of defect fixes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track and prioritize defects based on severity levels.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated CI/CD tool that can manage and automate the prioritization of defect fixes based on severity.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that categorizes defects by severity and integrates with CI/CD pipelines for automated tracking.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Each team has a security champion",
    "Level": "2",
    "Description": "Assigning a security champion to each team involves designating a team member responsible for advocating and integrating security best practices within their respective teams. This fosters a security-first mindset and ensures continuous security oversight. Pipeline-compatible tools like Confluence and Jira can support the role of security champions by providing documentation and tracking capabilities.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track security tasks and responsibilities assigned to security champions.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Confluence",
        "Description": "Collaboration tool for documenting security best practices and guidelines accessible to security champions.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Regular security training of security champions",
    "Level": "2",
    "Description": "Providing regular security training to security champions ensures they are well-equipped with the latest security knowledge and best practices. This enables them to effectively guide their teams and address emerging security challenges. Pipeline-compatible tools like Learning Management Systems (LMS) such as Moodle or Coursera can facilitate ongoing training and certification for security champions.",
    "Tools": [
      {
        "Name": "Moodle",
        "Description": "Open-source Learning Management System that can deliver regular security training modules to security champions.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Coursera",
        "Description": "Online learning platform offering security training courses that can be integrated into training schedules for security champions.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Each team has a security champion",
    "Level": "2",
    "Description": "Assigning a security champion to each team involves designating a team member responsible for advocating and integrating security best practices within their respective teams. This fosters a security-first mindset and ensures continuous security oversight. Pipeline-compatible tools like Confluence and Jira can support the role of security champions by providing documentation and tracking capabilities.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track security tasks and responsibilities assigned to security champions.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Confluence",
        "Description": "Collaboration tool for documenting security best practices and guidelines accessible to security champions.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Security consulting on request",
    "Level": "1",
    "Description": "Providing security consulting on request involves offering expert guidance and support to teams as needed to address specific security challenges or queries. This ensures that teams have access to specialized knowledge when implementing security measures. Pipeline-compatible tools like Slack and Microsoft Teams can facilitate communication and consultation requests within CI/CD workflows.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Security consulting on request",
    "Level": "1",
    "Description": "Providing security consulting on request involves offering expert guidance and support to teams as needed to address specific security challenges or queries. This ensures that teams have access to specialized knowledge when implementing security measures. Pipeline-compatible tools like Slack and Microsoft Teams can facilitate communication and consultation requests within CI/CD workflows.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Process",
    "Activity": "Approval by reviewing any new version",
    "Level": "3",
    "Description": "Implementing an approval process by reviewing any new version involves mandating security and quality checks before deploying new software versions. This ensures that each release meets the organization's security standards and reduces the risk of introducing vulnerabilities. Pipeline-compatible tools like GitHub Actions, GitLab CI/CD, and Jenkins can automate the approval and review process within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitHub Actions",
        "Description": "CI/CD tool that can automate the approval and review process for new software versions.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can enforce approval workflows and security checks before deploying new versions.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate approval and review processes for new software versions within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Dismiss stale PR approvals",
    "Level": "3",
    "Description": "Dismissing stale Pull Request (PR) approvals involves automatically revoking approvals that are no longer valid due to subsequent changes in the codebase. This ensures that PRs are re-reviewed to maintain code quality and security standards. Pipeline-compatible tools like GitHub Actions, GitLab CI/CD, and Jenkins can automate the dismissal of stale PR approvals within CI/CD workflows.",
    "Tools": [
      {
        "Name": "GitHub Actions",
        "Description": "CI/CD tool that can automate the dismissal of stale PR approvals based on predefined criteria.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can manage and automate the dismissal of stale PR approvals.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate the dismissal of stale PR approvals within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Require a PR before merging",
    "Level": "2",
    "Description": "Requiring a Pull Request (PR) before merging ensures that all code changes are reviewed and approved by peers, maintaining code quality and security standards. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can enforce PR requirements and integrate automated checks within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitHub",
        "Description": "Version control platform that can enforce PR requirements and integrate automated checks within CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated version control and CI/CD tool that can mandate PRs and automate review processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Bitbucket",
        "Description": "Version control platform that can enforce PR requirements and integrate automated security checks within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Security consulting on request",
    "Level": "1",
    "Description": "Providing security consulting on request involves offering expert guidance and support to teams as needed to address specific security challenges or queries. This ensures that teams have access to specialized knowledge when implementing security measures. Pipeline-compatible tools like Slack and Microsoft Teams can facilitate communication and consultation requests within CI/CD workflows.",
    "Tools": []
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Production near environments are used by developers",
    "Level": "4",
    "Description": "Using production-like environments for development involves creating environments that closely mirror the production setup to ensure that applications behave consistently across development and production stages. This practice enhances the reliability and security of deployments by identifying issues early. Pipeline-compatible tools like Docker, Kubernetes, and Terraform can automate the provisioning and management of production-like environments within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Docker",
        "Description": "Platform for developing, shipping, and running applications in containers, enabling production-like environment setups within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages production-like environments by deploying and scaling containerized applications within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the provisioning of production-like environments within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Usage of test and production environments",
    "Level": "2",
    "Description": "Using separate test and production environments involves isolating development and testing activities from the live production environment. This ensures that testing does not impact production stability and security. Pipeline-compatible tools like Docker, Kubernetes, and Terraform can automate the provisioning and management of distinct test and production environments within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Docker",
        "Description": "Platform for developing, shipping, and running applications in containers, enabling isolated test and production environments within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages isolated test and production environments by deploying and scaling containerized applications within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the provisioning of separate test and production environments within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Integration of vulnerability issues into the development process",
    "Level": "3",
    "Description": "Integrating vulnerability issues into the development process involves embedding security checks and vulnerability assessments into the software development lifecycle (SDLC). This ensures that vulnerabilities are identified and addressed early, promoting a proactive approach to security. Pipeline-compatible tools like SonarQube, GitLab CI/CD, and Snyk can be integrated to automate vulnerability tracking and remediation.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that identifies vulnerabilities and integrates with development pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool integrated with GitLab repositories for managing vulnerability tracking.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that finds and fixes vulnerabilities in dependencies and container images.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Simple false positive treatment",
    "Level": "1",
    "Description": "Simple false positive treatment involves identifying and dismissing alerts or findings that are incorrectly flagged as vulnerabilities. This helps in reducing noise and focusing on genuine security issues. Pipeline-compatible tools like SonarQube and GitLab SAST can automate the dismissal of false positives within CI/CD workflows.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that allows for marking certain alerts as false positives to reduce noise.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab SAST",
        "Description": "Static Application Security Testing integrated within GitLab for scanning code and managing false positives.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub Advanced Security",
        "Description": "Provides features to mark certain security alerts as false positives within GitHub repositories.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that can be configured to ignore certain warnings or errors.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PyLint",
        "Description": "Static code analysis tool for Python that detects security vulnerabilities and code quality issues.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "IDE Plugins (e.g., PyCharm, VSCode)",
        "Description": "Integrated development environment plugins that allow developers to mark specific findings as false positives.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Dead code elimination",
    "Level": "5",
    "Description": "Dead code elimination involves identifying and removing portions of code that are never executed or are redundant. This helps in reducing the codebase size, improving maintainability, and minimizing potential security vulnerabilities associated with unused code. Pipeline-compatible tools like SonarQube, ESLint, and PyLint can automate dead code detection and removal within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that detects dead code among other code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that identifies unused variables and dead code.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PyLint",
        "Description": "Static code analysis tool for Python that detects dead code and unused variables.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "Coverity",
        "Description": "Static analysis tool that identifies dead code and other code quality issues.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "FindBugs",
        "Description": "Static analysis tool for Java that helps detect dead code and potential bugs.",
        "Opensource": true,
        "Languages": ["Java"]
      },
      {
        "Name": "PMD",
        "Description": "Source code analyzer that identifies dead code and other potential issues in Java, JavaScript, and other languages.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Unused",
        "Description": "Tool for identifying and removing unused code in various programming languages.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Visual Studio Code Extensions",
        "Description": "Extensions available for VSCode that help detect and remove dead code in multiple languages.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Exclusion of source code duplicates",
    "Level": "5",
    "Description": "Exclusion of source code duplicates involves identifying and removing duplicated code segments within the codebase. This enhances code maintainability, reduces the risk of inconsistencies, and minimizes the surface area for potential vulnerabilities. Pipeline-compatible tools like SonarQube, PMD, and Checkstyle can automate duplicate code detection and exclusion within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that detects code duplication and other code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "PMD",
        "Description": "Source code analyzer that identifies duplicate code and other potential issues in various languages.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Checkstyle",
        "Description": "Static code analysis tool for Java that can detect duplicated code segments.",
        "Opensource": true,
        "Languages": ["Java"]
      },
      {
        "Name": "CodeClimate",
        "Description": "Platform that offers code analysis for duplication, complexity, and other quality metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Simian",
        "Description": "Tool for detecting duplicate code in multiple programming languages.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "DupFinder",
        "Description": "Tool by JetBrains for finding duplicate code in .NET projects.",
        "Opensource": false,
        "Languages": [".NET"]
      },
      {
        "Name": "IntelliJ IDEA's Built-in Duplicate Detection",
        "Description": "Integrated feature within IntelliJ IDEA IDE to detect and manage duplicate code.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Patch Deployment Time",
    "Level": "3",
    "Description": "Testing for patch deployment time involves measuring the duration it takes to deploy security patches across the infrastructure. This ensures that patches are applied promptly to mitigate vulnerabilities effectively. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and Ansible can automate patch deployment tracking within CI/CD workflows.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate and track patch deployment pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool integrated with GitLab repositories for managing patch deployments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps",
        "Description": "Set of development tools with CI/CD pipelines for automating patch deployments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automation tool for orchestrating patch deployments across multiple systems.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that can automate patch deployments and track their progress.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Chef",
        "Description": "Automation platform for managing infrastructure and deploying patches efficiently.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Rundeck",
        "Description": "Automation service for running patch deployment jobs and tracking their execution times.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Time to Patch",
    "Level": "2",
    "Description": "Testing for Time to Patch involves measuring the time taken from identifying a vulnerability to successfully applying a patch. This metric helps in assessing the efficiency of the patch management process. Pipeline-compatible tools like GitLab CI/CD and Jenkins can automate the tracking of patch application timelines within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool that can automate and measure patch deployment processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can track vulnerability identification and patch application timelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps",
        "Description": "Set of development tools with built-in analytics to track patch deployment times.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ServiceNow",
        "Description": "IT service management tool that can be configured to track time to patch metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Platform for monitoring and analyzing patch deployment times through log data.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can track vulnerability identification and patch application timelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of war games",
    "Level": "4",
    "Description": "Conducting war games involves simulating real-world cyberattack scenarios to test the organization's incident response capabilities and identify potential security weaknesses. This practice enhances preparedness, improves coordination among teams, and strengthens overall security posture. Pipeline-compatible tools like SimSpace and BattleEye can facilitate the automation and integration of war games within CI/CD pipelines.",
    "Tools": []
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Integration of vulnerability issues into the development process",
    "Level": "3",
    "Description": "Integrating vulnerability issues into the development process involves embedding security checks and vulnerability assessments into the software development lifecycle (SDLC). This ensures that vulnerabilities are identified and addressed early, promoting a proactive approach to security. Pipeline-compatible tools like SonarQube, GitLab CI/CD, and Snyk can be integrated to automate vulnerability tracking and remediation.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that identifies vulnerabilities and integrates with development pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool integrated with GitLab repositories for managing vulnerability tracking.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that finds and fixes vulnerabilities in dependencies and container images.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Simple false positive treatment",
    "Level": "1",
    "Description": "Simple false positive treatment involves identifying and dismissing alerts or findings that are incorrectly flagged as vulnerabilities. This helps in reducing noise and focusing on genuine security issues. Pipeline-compatible tools like SonarQube and GitLab SAST can automate the dismissal of false positives within CI/CD workflows.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that allows for marking certain alerts as false positives to reduce noise.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab SAST",
        "Description": "Static Application Security Testing integrated within GitLab for scanning code and managing false positives.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub Advanced Security",
        "Description": "Provides features to mark certain security alerts as false positives within GitHub repositories.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that can be configured to ignore certain warnings or errors.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PyLint",
        "Description": "Static code analysis tool for Python that detects security vulnerabilities and code quality issues.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "IDE Plugins (e.g., PyCharm, VSCode)",
        "Description": "Integrated development environment plugins that allow developers to mark specific findings as false positives.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Dead code elimination",
    "Level": "5",
    "Description": "Dead code elimination involves identifying and removing portions of code that are never executed or are redundant. This helps in reducing the codebase size, improving maintainability, and minimizing potential security vulnerabilities associated with unused code. Pipeline-compatible tools like SonarQube, ESLint, and PyLint can automate dead code detection and removal within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that detects dead code among other code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that identifies unused variables and dead code.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PyLint",
        "Description": "Static code analysis tool for Python that detects dead code and unused variables.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "Coverity",
        "Description": "Static analysis tool that identifies dead code and other code quality issues.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "FindBugs",
        "Description": "Static analysis tool for Java that helps detect dead code and potential bugs.",
        "Opensource": true,
        "Languages": ["Java"]
      },
      {
        "Name": "PMD",
        "Description": "Source code analyzer that identifies dead code and other potential issues in Java, JavaScript, and other languages.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Unused",
        "Description": "Tool for identifying and removing unused code in various programming languages.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Visual Studio Code Extensions",
        "Description": "Extensions available for VSCode that help detect and remove dead code in multiple languages.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Exclusion of source code duplicates",
    "Level": "5",
    "Description": "Exclusion of source code duplicates involves identifying and removing duplicated code segments within the codebase. This enhances code maintainability, reduces the risk of inconsistencies, and minimizes the surface area for potential vulnerabilities. Pipeline-compatible tools like SonarQube, PMD, and Checkstyle can automate duplicate code detection and exclusion within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that detects code duplication and other code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "PMD",
        "Description": "Source code analyzer that identifies duplicate code and other potential issues in various languages.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Checkstyle",
        "Description": "Static code analysis tool for Java that can detect duplicated code segments.",
        "Opensource": true,
        "Languages": ["Java"]
      },
      {
        "Name": "CodeClimate",
        "Description": "Platform that offers code analysis for duplication, complexity, and other quality metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Simian",
        "Description": "Tool for detecting duplicate code in multiple programming languages.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "DupFinder",
        "Description": "Tool by JetBrains for finding duplicate code in .NET projects.",
        "Opensource": false,
        "Languages": [".NET"]
      },
      {
        "Name": "IntelliJ IDEA's Built-in Duplicate Detection",
        "Description": "Integrated feature within IntelliJ IDEA IDE to detect and manage duplicate code.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Patch Deployment Time",
    "Level": "3",
    "Description": "Testing for patch deployment time involves measuring the duration it takes to deploy security patches across the infrastructure. This ensures that patches are applied promptly to mitigate vulnerabilities effectively. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and Ansible can automate patch deployment tracking within CI/CD workflows.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate and track patch deployment pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool integrated with GitLab repositories for managing patch deployments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps",
        "Description": "Set of development tools with CI/CD pipelines for automating patch deployments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automation tool for orchestrating patch deployments across multiple systems.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that can automate patch deployments and track their progress.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Chef",
        "Description": "Automation platform for managing infrastructure and deploying patches efficiently.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Rundeck",
        "Description": "Automation service for running patch deployment jobs and tracking their execution times.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Time to Patch",
    "Level": "2",
    "Description": "Testing for Time to Patch involves measuring the time taken from identifying a vulnerability to successfully applying a patch. This metric helps in assessing the efficiency of the patch management process. Pipeline-compatible tools like GitLab CI/CD and Jenkins can automate the tracking of patch application timelines within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool that can automate and measure patch deployment processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can track vulnerability identification and patch application timelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps",
        "Description": "Set of development tools with built-in analytics to track patch deployment times.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ServiceNow",
        "Description": "IT service management tool that can be configured to track time to patch metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Platform for monitoring and analyzing patch deployment times through log data.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can track vulnerability identification and patch application timelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of war games",
    "Level": "4",
    "Description": "Conducting war games involves simulating real-world cyberattack scenarios to test the organization's incident response capabilities and identify potential security weaknesses. This practice enhances preparedness, improves coordination among teams, and strengthens overall security posture. Pipeline-compatible tools like SimSpace and BattleEye can facilitate the automation and integration of war games within CI/CD pipelines.",
    "Tools": []
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Integration of vulnerability issues into the development process",
    "Level": "3",
    "Description": "Integrating vulnerability issues into the development process involves embedding security checks and vulnerability assessments into the software development lifecycle (SDLC). This ensures that vulnerabilities are identified and addressed early, promoting a proactive approach to security. Pipeline-compatible tools like SonarQube, GitLab CI/CD, and Snyk can be integrated to automate vulnerability tracking and remediation.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that identifies vulnerabilities and integrates with development pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool integrated with GitLab repositories for managing vulnerability tracking.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that finds and fixes vulnerabilities in dependencies and container images.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Reproducible defect tickets",
    "Level": "4",
    "Description": "Creating reproducible defect tickets involves documenting defects in a manner that allows developers to consistently replicate and understand the issues. This ensures efficient resolution and prevents recurrence. Pipeline-compatible tools like Jira, GitHub Issues, and GitLab Issues can automate the creation and management of reproducible defect tickets within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can automate the creation and tracking of reproducible defect tickets.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitHub Issues",
        "Description": "Issue tracking system integrated with GitHub repositories for managing reproducible defect reports.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab Issues",
        "Description": "Issue tracking feature within GitLab for managing and automating reproducible defect tickets.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Simple visualization of defects",
    "Level": "2",
    "Description": "Simple visualization of defects involves creating basic charts and graphs to display defect metrics, such as defect count over time or defect distribution by category. This provides a straightforward overview of the defect landscape. Pipeline-compatible tools like SonarQube and Grafana can automate the generation of simple defect visualizations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that provides basic visualizations of defect metrics through dashboards.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating simple charts and graphs to visualize defect data from various sources.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Treatment of all defects",
    "Level": "5",
    "Description": "Treatment of all defects involves systematically addressing every identified defect, regardless of severity, to ensure comprehensive software quality and security. This approach minimizes the risk of vulnerabilities and enhances the overall reliability of the application. Pipeline-compatible tools like SonarQube, Jira, and GitLab can automate the tracking and resolution of all defects within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that tracks and manages all defects, ensuring comprehensive treatment within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can integrate with SonarQube to track and resolve all defects systematically.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated CI/CD tool that can manage and automate the resolution of all defects through its issue tracking system.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Treatment of defects with severity high or higher",
    "Level": "1",
    "Description": "Treatment of defects with severity high or higher involves prioritizing and resolving the most critical defects that pose significant security or functionality risks. This ensures that high-impact issues are addressed promptly to maintain system integrity. Pipeline-compatible tools like SonarQube, Jira, and GitLab can automate the prioritization and resolution of high-severity defects within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that categorizes defects by severity and automates the tracking of high-severity issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can prioritize and track the resolution of high-severity defects.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated CI/CD tool that can manage and automate the resolution of high-severity defects through its issue tracking system.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Treatment of defects with severity middle",
    "Level": "3",
    "Description": "Treatment of defects with severity middle involves addressing defects that have a moderate impact on the application's functionality or security. This ensures that mid-level issues are resolved in a timely manner without disrupting critical operations. Pipeline-compatible tools like SonarQube, Jira, and GitLab can automate the tracking and resolution of mid-severity defects within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that categorizes defects by severity and automates the tracking of mid-severity issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can prioritize and track the resolution of mid-severity defects.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated CI/CD tool that can manage and automate the resolution of mid-severity defects through its issue tracking system.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Application tests",
    "Activity": "High coverage of security related module and integration tests",
    "Level": "5",
    "Description": "Ensuring high coverage of security-related module and integration tests involves thoroughly testing security functionalities and their interactions within the application. This practice helps in identifying and mitigating security vulnerabilities early in the development process. Pipeline-compatible tools like Selenium, OWASP ZAP, and SonarQube can automate security module and integration tests within CI/CD pipelines, ensuring comprehensive test coverage.",
    "Tools": [
      {
        "Name": "Selenium",
        "Description": "Automation tool for testing web applications, including security-related functionalities within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["Java", "Python", "C#"]
      },
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can perform automated security module and integration tests within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for security vulnerabilities and integrates security module tests within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Application tests",
    "Activity": "Security integration tests for important components",
    "Level": "3",
    "Description": "Conducting security integration tests for important components involves testing the security aspects of key application modules and their interactions to ensure they function securely together. This practice helps in identifying and addressing vulnerabilities that may arise from component integrations. Pipeline-compatible tools like OWASP ZAP, Selenium, and SonarQube can automate security integration tests within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can perform security integration tests on key components within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Selenium",
        "Description": "Automation tool for testing web applications, including security integration tests for important components within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["Java", "Python", "C#"]
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for security vulnerabilities and integrates security integration tests within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Application tests",
    "Activity": "Security unit tests for important components",
    "Level": "2",
    "Description": "Conducting security unit tests for important components involves testing individual units or functions of the application for security vulnerabilities. This ensures that each component adheres to security best practices and functions securely in isolation. Pipeline-compatible tools like Jest (with security plugins), SonarQube, and Snyk can automate security unit tests within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jest",
        "Description": "JavaScript testing framework that can be extended with security plugins to perform security unit tests within CI/CD workflows.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for security vulnerabilities and integrates security unit tests within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that scans dependencies for vulnerabilities and can integrate security unit tests within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Application tests",
    "Activity": "Smoke Test",
    "Level": "4",
    "Description": "Conducting smoke tests involves performing basic checks to ensure that the most critical functionalities of the application are working as expected after a deployment. This helps in quickly identifying major issues before proceeding with more extensive testing. Pipeline-compatible tools like Selenium, Cypress, and Jenkins can automate smoke tests within CI/CD pipelines, ensuring rapid validation of deployments.",
    "Tools": [
      {
        "Name": "Selenium",
        "Description": "Automation tool for testing web applications, suitable for implementing smoke tests within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["Java", "Python", "C#"]
      },
      {
        "Name": "Cypress",
        "Description": "End-to-end testing framework that can automate smoke tests for web applications within CI/CD workflows.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate and run smoke tests as part of the CI/CD pipeline.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Regular automated tests",
    "Level": "2",
    "Description": "Implementing regular automated tests involves scheduling and executing a suite of tests consistently to ensure ongoing code quality and security. This practice helps in early detection of issues and maintains the reliability of the application. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and GitHub Actions can automate the execution of regular tests within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can schedule and run regular automated tests as part of the CI/CD pipeline.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can automate the execution of regular test suites within deployment workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub Actions",
        "Description": "CI/CD tool that can automate regular test executions through workflow configurations.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Creation and application of a testing concept",
    "Level": "4",
    "Description": "Creating and applying a testing concept involves developing a comprehensive testing strategy that outlines the types of tests, methodologies, and tools to be used to ensure application quality and security. This structured approach ensures consistency and thoroughness in testing efforts. Pipeline-compatible tools like TestRail, Jenkins, and GitLab CI/CD can automate the implementation and management of the testing concept within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "TestRail",
        "Description": "Test case management tool that can integrate with CI/CD pipelines to implement and manage testing concepts.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate the execution of testing concepts through pipeline scripts and plugins.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can automate the application of comprehensive testing strategies within deployment workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Deactivating of unneeded tests",
    "Level": "3",
    "Description": "Deactivating unneeded tests involves identifying and disabling tests that are no longer relevant or necessary, thereby optimizing the testing process and reducing resource consumption. This ensures that the test suite remains efficient and focused on critical areas. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and CircleCI can automate the management and deactivation of unnecessary tests within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can manage and deactivate unneeded tests through pipeline configurations and plugins.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can automate the identification and deactivation of irrelevant tests within deployment workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "Continuous integration and delivery platform that can automate the management of test suites, including deactivation of unneeded tests.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Default settings for intensity",
    "Level": "1",
    "Description": "Setting default test intensity involves establishing baseline configurations for the frequency and depth of tests to be executed. This ensures that testing is consistent and meets minimum quality and security standards. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and GitHub Actions can automate the application of default test settings within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can enforce default test intensity settings through pipeline configurations.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can apply default test intensity settings within deployment workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub Actions",
        "Description": "CI/CD tool that can automate the enforcement of default test settings through workflow configurations.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "High test intensity",
    "Level": "1",
    "Description": "Implementing high test intensity involves increasing the frequency and depth of tests to ensure thorough coverage and early detection of issues. This approach enhances the reliability and security of the application by subjecting it to rigorous testing scenarios. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and Selenium can automate high-intensity testing within CI/CD pipelines to ensure comprehensive test coverage.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate high-intensity testing by scheduling frequent and comprehensive test runs within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can automate high-intensity testing through advanced pipeline configurations and test scheduling.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Selenium",
        "Description": "Automation tool for browser-based testing that can execute high-intensity test suites within CI/CD workflows.",
        "Opensource": true,
        "Languages": ["Java", "Python", "C#"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Regular automated tests",
    "Level": "2",
    "Description": "Implementing regular automated tests involves scheduling and executing a suite of tests consistently to ensure ongoing code quality and security. This practice helps in early detection of issues and maintains the reliability of the application. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and GitHub Actions can automate the execution of regular tests within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can schedule and run regular automated tests as part of the CI/CD pipeline.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can automate the execution of regular test suites within deployment workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub Actions",
        "Description": "CI/CD tool that can automate regular test executions through workflow configurations.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": ".gitignore",
    "Level": "4",
    "Description": "Configuring a .gitignore file involves specifying files and directories that should be excluded from version control to prevent sensitive information, build artifacts, and unnecessary files from being tracked. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can utilize .gitignore configurations to streamline version control processes within CI/CD pipelines.",
    "Tools": []
  },

  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Versioning",
    "Level": "1",
    "Description": "Implementing versioning involves managing changes to the source code over time, enabling tracking, collaboration, and rollback capabilities. Proper versioning ensures that all code changes are documented and that teams can collaborate effectively. Pipeline-compatible tools like Git, GitHub, GitLab, and Bitbucket can automate version control processes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Git",
        "Description": "Distributed version control system for tracking changes in source code during software development.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub",
        "Description": "Web-based platform that uses Git for version control and offers collaboration features like pull requests and issue tracking.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated DevOps platform that provides Git repository management, CI/CD pipelines, and version control.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Bitbucket",
        "Description": "Git repository management solution designed for professional teams, offering features like pull requests and branch permissions.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Conduction of simple threat modeling on technical level",
    "Level": "1",
    "Description": "Conducting simple threat modeling on a technical level involves identifying potential security threats and vulnerabilities in the system's architecture and design. This helps in proactively addressing security concerns during the design phase. While pipeline-compatible tools for threat modeling are limited, methodologies like STRIDE and tools such as Microsoft Threat Modeling Tool can be utilized to standardize threat identification processes.",
    "Tools": []
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Design",
    "Activity": "Creation of threat modeling processes and standards",
    "Level": "3",
    "Description": "Creating threat modeling processes and standards involves establishing structured methodologies and guidelines for identifying, assessing, and mitigating security threats during the system design and development phases. This ensures consistency and thoroughness in threat modeling efforts across the organization. Pipeline-compatible tools like Microsoft Threat Modeling Tool can be integrated to standardize threat modeling within development pipelines.",
    "Tools": [
      {
        "Name": "Microsoft Threat Modeling Tool",
        "Description": "Tool for creating and managing threat models to identify and mitigate security risks.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Process",
    "Activity": "Approval by reviewing any new version",
    "Level": "3",
    "Description": "Implementing an approval process by reviewing any new version involves mandating security and quality checks before deploying new software versions. This ensures that each release meets the organization's security standards and reduces the risk of introducing vulnerabilities. Pipeline-compatible tools like GitHub Actions, GitLab CI/CD, and Jenkins can automate the approval and review process within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitHub Actions",
        "Description": "CI/CD tool that can automate the approval and review process for new software versions.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can enforce approval workflows and security checks before deploying new versions.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate approval and review processes for new software versions within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Block force pushes",
    "Level": "3",
    "Description": "Blocking force pushes involves preventing users from overwriting commit history in the version control system, ensuring the integrity and traceability of the codebase. This enhances security by avoiding unauthorized or accidental changes that could introduce vulnerabilities. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can enforce branch protection rules to block force pushes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitHub",
        "Description": "Version control platform that can enforce branch protection rules to block force pushes and ensure code integrity.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated DevOps platform that allows setting branch protection to block force pushes and maintain commit history.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Bitbucket",
        "Description": "Git repository management solution that can configure branch permissions to block force pushes.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Dismiss stale PR approvals",
    "Level": "3",
    "Description": "Dismissing stale Pull Request (PR) approvals involves automatically revoking approvals that are no longer valid due to subsequent changes in the codebase. This ensures that PRs are re-reviewed to maintain code quality and security standards. Pipeline-compatible tools like GitHub Actions, GitLab CI/CD, and Jenkins can automate the dismissal of stale PR approvals within CI/CD workflows.",
    "Tools": [
      {
        "Name": "GitHub Actions",
        "Description": "CI/CD tool that can automate the dismissal of stale PR approvals based on predefined criteria.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can manage and automate the dismissal of stale PR approvals.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate the dismissal of stale PR approvals within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Require a PR before merging",
    "Level": "2",
    "Description": "Requiring a Pull Request (PR) before merging ensures that all code changes are reviewed and approved by peers, maintaining code quality and security standards. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can enforce PR requirements and integrate automated checks within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitHub",
        "Description": "Version control platform that can enforce PR requirements and integrate automated checks within CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated version control and CI/CD tool that can mandate PRs and automate review processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Bitbucket",
        "Description": "Version control platform that can enforce PR requirements and integrate automated security checks within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Require status checks to pass",
    "Level": "3",
    "Description": "Requiring status checks to pass before merging ensures that all automated tests, security scans, and quality assessments have successfully completed, maintaining high code standards. Pipeline-compatible tools like GitHub Actions, GitLab CI/CD, and Jenkins can enforce status checks within CI/CD workflows.",
    "Tools": [
      {
        "Name": "GitHub Actions",
        "Description": "CI/CD tool that can enforce status checks by running automated tests and scans before allowing merges.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated CI/CD tool that can enforce status checks by running automated pipelines before merging code changes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate status checks by running automated tasks before permitting merges.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Application Hardening",
    "Activity": "App. Hardening Level 1",
    "Level": "2",
    "Description": "Application Hardening Level 1 involves implementing basic security measures to protect applications from common threats. This includes practices like input validation, error handling, and enforcing secure coding standards. Pipeline-compatible tools like ESLint, SonarQube, and OWASP ZAP can automate the enforcement of these basic security measures within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that enforces coding standards and identifies security vulnerabilities.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for quality and security issues, supporting basic hardening practices.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can identify basic security vulnerabilities during CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Application Hardening",
    "Activity": "App. Hardening Level 1 (50%)",
    "Level": "1",
    "Description": "Application Hardening Level 1 (50%) signifies partial implementation of basic security measures to protect applications. This includes some practices like input validation and error handling but may lack comprehensive coverage. Pipeline-compatible tools like ESLint and SonarQube can assist in automating the enforcement of these partial security measures within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that can enforce partial coding standards and identify some security vulnerabilities.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that can analyze code for partial quality and security issues.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Application Hardening",
    "Activity": "App. Hardening Level 2",
    "Level": "4",
    "Description": "Application Hardening Level 2 involves implementing advanced security measures to protect applications from a broader range of threats. This includes practices like implementing security headers, using secure authentication mechanisms, and ensuring proper session management. Pipeline-compatible tools like OWASP ZAP, Fortify, and Snyk can automate the enforcement of these advanced security measures within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can identify advanced security vulnerabilities during CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Fortify",
        "Description": "Comprehensive security tool that performs static and dynamic analysis to identify and mitigate advanced security vulnerabilities.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that scans for vulnerabilities in dependencies and container images, supporting advanced hardening.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Application Hardening",
    "Activity": "App. Hardening Level 2 (75%)",
    "Level": "3",
    "Description": "Application Hardening Level 2 (75%) indicates substantial implementation of advanced security measures to protect applications. This includes comprehensive practices like enforcing strong authentication, implementing robust authorization controls, and ensuring secure data storage. Pipeline-compatible tools like OWASP ZAP, Fortify, and Snyk can assist in automating these advanced security measures within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can identify advanced security vulnerabilities during CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Fortify",
        "Description": "Comprehensive security tool that performs static and dynamic analysis to identify and mitigate advanced security vulnerabilities.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that scans for vulnerabilities in dependencies and container images, supporting advanced hardening.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Application Hardening",
    "Activity": "App. Hardening Level 3",
    "Level": "5",
    "Description": "Application Hardening Level 3 represents the full implementation of advanced security measures to protect applications comprehensively. This includes integrating security into every stage of the development lifecycle, continuous monitoring, and adopting a security-first approach. Pipeline-compatible tools like OWASP ZAP, Fortify, Snyk, and SonarQube can automate and enforce these comprehensive security measures within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that identifies comprehensive security vulnerabilities during CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Fortify",
        "Description": "Comprehensive security tool that performs extensive static and dynamic analysis to identify and mitigate all security vulnerabilities.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that scans for vulnerabilities in dependencies and container images, supporting full-scale hardening.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that provides in-depth analysis of code quality and security, supporting comprehensive hardening efforts.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Application Hardening",
    "Activity": "Contextualized Encoding",
    "Level": "1",
    "Description": "Contextualized Encoding involves encoding data based on its context to prevent security vulnerabilities like injection attacks. This ensures that data is handled securely depending on where and how it is used within the application. Pipeline-compatible tools like ESLint and SonarQube can assist in enforcing encoding standards within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that can enforce contextual encoding practices to prevent injection attacks.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for proper encoding practices based on context to prevent security vulnerabilities.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Applications are running in virtualized environments",
    "Level": "2",
    "Description": "Running applications in virtualized environments involves deploying applications within virtual machines or containers to enhance scalability, flexibility, and security. This approach allows for efficient resource utilization and isolation of applications, reducing the risk of cross-application vulnerabilities. Pipeline-compatible tools like Docker, Kubernetes, and VMware vSphere can automate the deployment and management of applications within virtualized environments in CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Docker",
        "Description": "Platform for developing, shipping, and running applications in containers, essential for deploying applications in virtualized environments within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages the deployment and scaling of applications within virtualized environments in CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "VMware vSphere",
        "Description": "Virtualization platform for managing virtual machines and deploying applications within isolated environments.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Defense metrics",
    "Level": "4",
    "Description": "Defense metrics involve collecting and analyzing data related to the effectiveness of security measures and defenses in place. This helps in assessing the performance of security controls and identifying areas for improvement. Pipeline-compatible tools like Prometheus, Grafana, and ELK Stack can automate the collection and visualization of defense-related metrics within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "Open-source monitoring system and time series database that collects defense metrics for analysis.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating dashboards and visualizing defense metrics collected by Prometheus and other monitoring tools.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "Description": "Comprehensive logging and monitoring solution for collecting, searching, and visualizing defense metrics.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of collaborative security checks with developers and system administrators",
    "Level": "5",
    "Description": "Conducting collaborative security checks with developers and system administrators involves joint efforts to evaluate and enhance the security measures of applications and infrastructure. This collaboration ensures that both development and operations teams are aligned on security best practices, facilitates the identification of vulnerabilities, and promotes a culture of continuous security improvement. Pipeline-compatible tools like GitLab CI/CD and Jenkins can integrate security checks into collaborative workflows.",
    "Tools": [
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool that can integrate security checks into collaborative development workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate collaborative security check pipelines involving multiple teams.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Education and Guidance",
    "Activity": "Conduction of collaborative security checks with developers and system administrators",
    "Level": "5",
    "Description": "Conducting collaborative security checks with developers and system administrators involves joint efforts to evaluate and enhance the security measures of applications and infrastructure. This collaboration ensures that both development and operations teams are aligned on security best practices, facilitates the identification of vulnerabilities, and promotes a culture of continuous security improvement. Pipeline-compatible tools like GitLab CI/CD and Jenkins can integrate security checks into collaborative workflows.",
    "Tools": [
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool that can integrate security checks into collaborative development workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate collaborative security check pipelines involving multiple teams.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Audit of system events",
    "Level": "3",
    "Description": "Auditing system events involves recording and reviewing logs and activities within the infrastructure to detect and investigate security incidents. This ensures accountability, compliance, and timely identification of suspicious activities. Pipeline-compatible tools like ELK Stack, Splunk, and Graylog can automate the collection and analysis of system event audits within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "Description": "Comprehensive logging and monitoring solution for collecting, searching, and visualizing system event audits.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Platform for searching, monitoring, and analyzing machine-generated data, including system event logs.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Graylog",
        "Description": "Open-source log management platform with advanced log analysis and visualization capabilities for auditing system events.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Exploit likelihood estimation",
    "Level": "3",
    "Description": "Estimating exploit likelihood involves assessing the probability that identified vulnerabilities can be exploited by attackers. This helps prioritize remediation efforts based on risk levels. Pipeline-compatible tools like Snyk, SonarQube, and OWASP Dependency-Check can automate the estimation of exploit likelihood within CI/CD pipelines by analyzing vulnerabilities and their potential impact.",
    "Tools": [
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that finds and fixes vulnerabilities in dependencies and estimates their exploit likelihood.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that analyzes code for vulnerabilities and estimates the likelihood of their exploitation.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "OWASP Dependency-Check",
        "Description": "Software composition analysis tool that identifies vulnerabilities in project dependencies and assesses their exploit likelihood.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Build and Deployment",
    "Sub Dimension": "Deployment",
    "Activity": "Rolling update on deployment",
    "Level": "3",
    "Description": "Implementing rolling updates involves updating applications incrementally across servers or instances to minimize downtime and ensure continuous availability. This approach allows for seamless deployments and quick rollbacks in case of issues. Pipeline-compatible tools like Kubernetes, Terraform, and Jenkins can automate rolling updates within CI/CD pipelines, ensuring smooth and reliable deployments.",
    "Tools": [
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages rolling updates to ensure seamless application deployments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate rolling updates by managing infrastructure changes incrementally within CI/CD workflows.",
        "Opensource": true,
        "Languages": ["HCL"]
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate rolling updates through pipeline scripts and plugins.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Process",
    "Activity": "Definition of a change management process",
    "Level": "3",
    "Description": "Defining a change management process involves establishing structured procedures for requesting, reviewing, approving, and implementing changes to the infrastructure and applications. This ensures that changes are made systematically, reducing the risk of introducing vulnerabilities or disruptions. Pipeline-compatible tools like Jira, ServiceNow, and GitLab can automate aspects of the change management process within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track and manage change requests and approvals within CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ServiceNow",
        "Description": "IT service management tool that can automate change management processes and integrate with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated CI/CD tool that can manage and automate change requests and approvals through its issue tracking and merge request features.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Culture and Organization",
    "Sub Dimension": "Process",
    "Activity": "Definition of a change management process",
    "Level": "3",
    "Description": "Defining a change management process involves establishing structured procedures for requesting, reviewing, approving, and implementing changes to the infrastructure and applications. This ensures that changes are made systematically, reducing the risk of introducing vulnerabilities or disruptions. Pipeline-compatible tools like Jira, ServiceNow, and GitLab can automate aspects of the change management process within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Project management tool that can track and manage change requests and approvals within CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ServiceNow",
        "Description": "IT service management tool that can automate change management processes and integrate with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated CI/CD tool that can manage and automate change requests and approvals through its issue tracking and merge request features.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": ".gitignore",
    "Level": "4",
    "Description": "Configuring a .gitignore file involves specifying files and directories that should be excluded from version control to prevent sensitive information, build artifacts, and unnecessary files from being tracked. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can utilize .gitignore configurations to streamline version control processes within CI/CD pipelines.",
    "Tools": []
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Versioning",
    "Level": "1",
    "Description": "Implementing versioning involves managing changes to the source code over time, enabling tracking, collaboration, and rollback capabilities. Proper versioning ensures that all code changes are documented and that teams can collaborate effectively. Pipeline-compatible tools like Git, GitHub, GitLab, and Bitbucket can automate version control processes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Git",
        "Description": "Distributed version control system for tracking changes in source code during software development.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub",
        "Description": "Web-based platform that uses Git for version control and offers collaboration features like pull requests and issue tracking.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated DevOps platform that provides Git repository management, CI/CD pipelines, and version control.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Bitbucket",
        "Description": "Git repository management solution designed for professional teams, offering features like pull requests and branch permissions.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": ".gitignore",
    "Level": "4",
    "Description": "Configuring a .gitignore file involves specifying files and directories that should be excluded from version control to prevent sensitive information, build artifacts, and unnecessary files from being tracked. Pipeline-compatible tools like GitHub, GitLab, and Bitbucket can utilize .gitignore configurations to streamline version control processes within CI/CD pipelines.",
    "Tools": []
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Development and Source Control",
    "Activity": "Versioning",
    "Level": "1",
    "Description": "Implementing versioning involves managing changes to the source code over time, enabling tracking, collaboration, and rollback capabilities. Proper versioning ensures that all code changes are documented and that teams can collaborate effectively. Pipeline-compatible tools like Git, GitHub, GitLab, and Bitbucket can automate version control processes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Git",
        "Description": "Distributed version control system for tracking changes in source code during software development.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitHub",
        "Description": "Web-based platform that uses Git for version control and offers collaboration features like pull requests and issue tracking.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab",
        "Description": "Integrated DevOps platform that provides Git repository management, CI/CD pipelines, and version control.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Bitbucket",
        "Description": "Git repository management solution designed for professional teams, offering features like pull requests and branch permissions.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Backup",
    "Level": "2",
    "Description": "Implementing backups involves creating copies of critical data and system configurations to ensure recovery in case of data loss, corruption, or disasters. This practice enhances data resilience and business continuity. Pipeline-compatible tools like Veeam, AWS Backup, and Azure Backup can automate backup processes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Veeam",
        "Description": "Backup and recovery solution that automates data protection and ensures business continuity.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "AWS Backup",
        "Description": "Managed backup service that centralizes and automates data protection across AWS services.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Backup",
        "Description": "Cloud-based backup solution that automates and manages data protection for Azure and on-premises environments.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "MFA",
    "Level": "2",
    "Description": "Implementing Multi-Factor Authentication (MFA) enhances security by requiring multiple forms of verification before granting access. This reduces the risk of unauthorized access due to compromised credentials. Pipeline-compatible tools like Azure Active Directory, Okta, and Duo Security can automate MFA enforcement within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Azure Active Directory",
        "Description": "Cloud-based identity and access management service that enforces MFA for secure user authentication.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Okta",
        "Description": "Identity management service that provides MFA to secure user access across applications.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Duo Security",
        "Description": "MFA solution that integrates with various platforms to provide secure user authentication.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "MFA for admins",
    "Level": "1",
    "Description": "Implementing Multi-Factor Authentication (MFA) specifically for administrators ensures that privileged accounts are secured with additional verification layers, reducing the risk of unauthorized access and potential system compromises. Pipeline-compatible tools like Azure Active Directory, Okta, and Duo Security can enforce MFA for admin accounts within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Azure Active Directory",
        "Description": "Cloud-based identity and access management service that enforces MFA for administrative accounts.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Okta",
        "Description": "Identity management service that provides MFA for securing admin access across applications.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Duo Security",
        "Description": "MFA solution that integrates with various platforms to provide secure authentication for admin accounts.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Immutable infrastructure",
    "Level": "3",
    "Description": "Implementing immutable infrastructure involves designing systems where components are never modified after deployment. Instead, any updates or changes result in new deployments. This approach enhances security by reducing the attack surface and ensuring consistency across environments. Pipeline-compatible tools like Terraform, Kubernetes, and Docker can automate the deployment of immutable infrastructure within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that automates the provisioning of immutable infrastructure by managing infrastructure changes incrementally.",
        "Opensource": true,
        "Languages": ["HCL"]
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages immutable deployments by deploying and scaling containerized applications without modifying existing instances.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Docker",
        "Description": "Platform for developing, shipping, and running applications in containers, supporting the creation of immutable infrastructure.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Usage of a chaos monkey",
    "Level": "4",
    "Description": "Using a chaos monkey involves intentionally introducing failures into the system to test its resilience and fault tolerance. This practice helps identify weaknesses and ensures that the infrastructure can withstand unexpected disruptions. Pipeline-compatible tools like Gremlin, Chaos Toolkit, and AWS Fault Injection Simulator can automate chaos engineering experiments within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Gremlin",
        "Description": "Chaos engineering tool that safely introduces failures to test system resilience and fault tolerance.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Chaos Toolkit",
        "Description": "Open-source tool for running chaos experiments to improve system reliability and resilience.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "AWS Fault Injection Simulator",
        "Description": "Managed service that enables running chaos engineering experiments on AWS infrastructure.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Backup",
    "Level": "2",
    "Description": "Implementing backups involves creating copies of critical data and system configurations to ensure recovery in case of data loss, corruption, or disasters. This practice enhances data resilience and business continuity. Pipeline-compatible tools like Veeam, AWS Backup, and Azure Backup can automate backup processes within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Veeam",
        "Description": "Backup and recovery solution that automates data protection and ensures business continuity.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "AWS Backup",
        "Description": "Managed backup service that centralizes and automates data protection across AWS services.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Backup",
        "Description": "Cloud-based backup solution that automates and manages data protection for Azure and on-premises environments.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "MFA",
    "Level": "2",
    "Description": "Implementing Multi-Factor Authentication (MFA) enhances security by requiring multiple forms of verification before granting access. This reduces the risk of unauthorized access due to compromised credentials. Pipeline-compatible tools like Azure Active Directory, Okta, and Duo Security can automate MFA enforcement within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Azure Active Directory",
        "Description": "Cloud-based identity and access management service that enforces MFA for secure user authentication.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Okta",
        "Description": "Identity management service that provides MFA to secure user access across applications.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Duo Security",
        "Description": "MFA solution that integrates with various platforms to provide secure user authentication.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "MFA for admins",
    "Level": "1",
    "Description": "Implementing Multi-Factor Authentication (MFA) specifically for administrators ensures that privileged accounts are secured with additional verification layers, reducing the risk of unauthorized access and potential system compromises. Pipeline-compatible tools like Azure Active Directory, Okta, and Duo Security can enforce MFA for admin accounts within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Azure Active Directory",
        "Description": "Cloud-based identity and access management service that enforces MFA for administrative accounts.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Okta",
        "Description": "Identity management service that provides MFA for securing admin access across applications.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Duo Security",
        "Description": "MFA solution that integrates with various platforms to provide secure authentication for admin accounts.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Baseline Hardening of the environment",
    "Level": "2",
    "Description": "Baseline hardening of the environment involves establishing a secure configuration baseline for systems and infrastructure components. This ensures that all environments adhere to organizational security standards and reduces the risk of vulnerabilities. Pipeline-compatible tools like Ansible, Puppet, and Chef can automate the enforcement of baseline configurations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Ansible",
        "Description": "Automation tool that can enforce baseline security configurations across multiple systems within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["YAML"]
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that automates the application of baseline security standards across environments.",
        "Opensource": true,
        "Languages": ["Ruby"]
      },
      {
        "Name": "Chef",
        "Description": "Automation platform that can manage and enforce baseline security configurations within CI/CD workflows.",
        "Opensource": true,
        "Languages": ["Ruby"]
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Filter outgoing traffic",
    "Level": "3",
    "Description": "Filtering outgoing traffic involves implementing network controls to restrict and monitor the data leaving the organization's network. This enhances security by preventing unauthorized data exfiltration and reducing the risk of malware communication. Pipeline-compatible tools like AWS Network Firewall, Azure Firewall, and Cisco ASA can automate the configuration and management of outbound traffic filters within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "AWS Network Firewall",
        "Description": "Managed service that provides essential network protections to filter outgoing traffic within AWS environments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Firewall",
        "Description": "Managed, cloud-based network security service that protects Azure Virtual Network resources by filtering outgoing traffic.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Cisco ASA",
        "Description": "Adaptive Security Appliance that provides advanced firewall capabilities to filter outgoing traffic and enhance network security.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Hardening of the Environment",
    "Level": "4",
    "Description": "Hardening the environment involves applying comprehensive security measures to systems and infrastructure to reduce vulnerabilities and protect against threats. This includes configuring secure settings, removing unnecessary services, and implementing robust access controls. Pipeline-compatible tools like Ansible, Puppet, and Chef can automate the hardening process within CI/CD pipelines to ensure consistent and secure configurations across environments.",
    "Tools": [
      {
        "Name": "Ansible",
        "Description": "Automation tool that can enforce comprehensive security configurations and hardening measures across multiple systems within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["YAML"]
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that automates the application of advanced security hardening measures across environments.",
        "Opensource": true,
        "Languages": ["Ruby"]
      },
      {
        "Name": "Chef",
        "Description": "Automation platform that can manage and enforce comprehensive security hardening configurations within CI/CD workflows.",
        "Opensource": true,
        "Languages": ["Ruby"]
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Isolated networks for virtual environments",
    "Level": "2",
    "Description": "Implementing isolated networks for virtual environments involves segmenting network traffic to ensure that different virtual environments do not interfere with each other. This enhances security by preventing unauthorized access and limiting the spread of potential threats across environments. Pipeline-compatible tools like AWS VPC, Azure Virtual Network, and VMware NSX can automate the creation and management of isolated networks within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "AWS VPC",
        "Description": "Virtual Private Cloud service that allows the creation of isolated networks within AWS environments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Virtual Network",
        "Description": "Service that enables the creation of isolated networks within Azure, providing secure communication channels.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "VMware NSX",
        "Description": "Network virtualization platform that provides advanced network isolation and security features for virtual environments.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "PII logging concept",
    "Level": "5",
    "Description": "Developing a PII (Personally Identifiable Information) logging concept involves establishing guidelines and mechanisms to securely log and handle sensitive personal data. This ensures compliance with data protection regulations and protects individuals' privacy. Pipeline-compatible tools like ELK Stack, Splunk, and LogRhythm can automate the implementation and management of PII logging within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "ELK Stack (Elasticsearch, Logstash, Kibana)",
        "Description": "Comprehensive logging and monitoring solution that can securely handle and visualize PII logs.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Platform for searching, monitoring, and analyzing machine-generated data, including PII logs.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "LogRhythm",
        "Description": "Security Information and Event Management (SIEM) platform that manages and analyzes PII logs for compliance and security.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Virtual environments are limited",
    "Level": "2",
    "Description": "Limiting virtual environments involves restricting the creation and use of virtual machines or containers to essential instances only. This reduces the attack surface and ensures efficient resource utilization. Pipeline-compatible tools like Terraform, VMware vSphere, and Kubernetes can automate the management and limitation of virtual environments within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the provisioning and limitation of virtual environments within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      },
      {
        "Name": "VMware vSphere",
        "Description": "Virtualization platform that manages virtual machines and enforces limitations on virtual environment usage.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages and limits containerized environments within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Screens with metric visualization",
    "Level": "4",
    "Description": "Creating screens with metric visualization involves designing and implementing dashboards that display key performance and security metrics. This provides real-time insights into system performance and security posture, enabling timely decision-making and response. Pipeline-compatible tools like Grafana, Kibana, and Datadog can automate the creation and updating of metric visualization dashboards within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Grafana",
        "Description": "Open-source platform for creating detailed dashboards that visualize performance and security metrics from various data sources.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kibana",
        "Description": "Visualization tool for the ELK Stack that creates interactive dashboards for monitoring metrics and logs.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Datadog",
        "Description": "Monitoring and analytics platform that provides customizable dashboards for visualizing key metrics.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Advanced app. metrics",
    "Level": "4",
    "Description": "Collecting advanced application metrics involves gathering detailed performance and security data to gain deeper insights into application behavior and health. This aids in optimizing performance, identifying bottlenecks, and detecting security anomalies. Pipeline-compatible tools like Prometheus, Grafana, and New Relic can automate the collection and visualization of advanced application metrics within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "Open-source monitoring system that collects detailed application metrics for analysis.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "Open-source platform for visualizing advanced application metrics collected by Prometheus and other monitoring tools.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "New Relic",
        "Description": "Application performance monitoring tool that offers comprehensive metrics and insights for advanced application monitoring.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Targeted alerting",
    "Level": "3",
    "Description": "Implementing targeted alerting involves setting up specific alerts for critical events or thresholds to ensure prompt responses to significant issues. This enhances security and operational efficiency by focusing attention on high-impact events. Pipeline-compatible tools like PagerDuty, Opsgenie, and Datadog can automate targeted alerting within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "PagerDuty",
        "Description": "Incident response platform that manages and routes alerts for prompt issue resolution.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Opsgenie",
        "Description": "Alerting and incident management tool that ensures critical alerts are promptly addressed.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Datadog",
        "Description": "Monitoring and analytics platform that provides customizable alerting based on specific metrics and events.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Dead code elimination",
    "Level": "5",
    "Description": "Dead code elimination involves identifying and removing portions of code that are never executed or are redundant. This helps in reducing the codebase size, improving maintainability, and minimizing potential security vulnerabilities associated with unused code. Pipeline-compatible tools like SonarQube, ESLint, and PyLint can automate dead code detection and removal within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that detects dead code among other code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Linting tool for JavaScript that identifies unused variables and dead code.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PyLint",
        "Description": "Static code analysis tool for Python that detects dead code and unused variables.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "Coverity",
        "Description": "Static analysis tool that identifies dead code and other code quality issues.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "FindBugs",
        "Description": "Static analysis tool for Java that helps detect dead code and potential bugs.",
        "Opensource": true,
        "Languages": ["Java"]
      },
      {
        "Name": "PMD",
        "Description": "Source code analyzer that identifies dead code and other potential issues in Java, JavaScript, and other languages.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Unused",
        "Description": "Tool for identifying and removing unused code in various programming languages.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Visual Studio Code Extensions",
        "Description": "Extensions available for VSCode that help detect and remove dead code in multiple languages.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Exclusion of source code duplicates",
    "Level": "5",
    "Description": "Exclusion of source code duplicates involves identifying and removing duplicated code segments within the codebase. This enhances code maintainability, reduces the risk of inconsistencies, and minimizes the surface area for potential vulnerabilities. Pipeline-compatible tools like SonarQube, PMD, and Checkstyle can automate duplicate code detection and exclusion within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Continuous inspection tool that detects code duplication and other code quality issues.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "PMD",
        "Description": "Source code analyzer that identifies duplicate code and other potential issues in various languages.",
        "Opensource": true,
        "Languages": ["Java", "JavaScript"]
      },
      {
        "Name": "Checkstyle",
        "Description": "Static code analysis tool for Java that can detect duplicated code segments.",
        "Opensource": true,
        "Languages": ["Java"]
      },
      {
        "Name": "CodeClimate",
        "Description": "Platform that offers code analysis for duplication, complexity, and other quality metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Simian",
        "Description": "Tool for detecting duplicate code in multiple programming languages.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "DupFinder",
        "Description": "Tool by JetBrains for finding duplicate code in .NET projects.",
        "Opensource": false,
        "Languages": [".NET"]
      },
      {
        "Name": "IntelliJ IDEA's Built-in Duplicate Detection",
        "Description": "Integrated feature within IntelliJ IDEA IDE to detect and manage duplicate code.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Patch Deployment Time",
    "Level": "3",
    "Description": "Testing for patch deployment time involves measuring the duration it takes to deploy security patches across the infrastructure. This ensures that patches are applied promptly to mitigate vulnerabilities effectively. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and Ansible can automate patch deployment tracking within CI/CD workflows.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automation server that can orchestrate and track patch deployment pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool integrated with GitLab repositories for managing patch deployments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps",
        "Description": "Set of development tools with CI/CD pipelines for automating patch deployments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automation tool for orchestrating patch deployments across multiple systems.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Puppet",
        "Description": "Configuration management tool that can automate patch deployments and track their progress.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Chef",
        "Description": "Automation platform for managing infrastructure and deploying patches efficiently.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Rundeck",
        "Description": "Automation service for running patch deployment jobs and tracking their execution times.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Time to Patch",
    "Level": "2",
    "Description": "Testing for Time to Patch involves measuring the time taken from identifying a vulnerability to successfully applying a patch. This metric helps in assessing the efficiency of the patch management process. Pipeline-compatible tools like GitLab CI/CD and Jenkins can automate the tracking of patch application timelines within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "GitLab CI/CD",
        "Description": "Continuous integration and delivery tool that can automate and measure patch deployment processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automation server that can track vulnerability identification and patch application timelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Azure DevOps",
        "Description": "Set of development tools with built-in analytics to track patch deployment times.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ServiceNow",
        "Description": "IT service management tool that can be configured to track time to patch metrics.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Platform for monitoring and analyzing patch deployment times through log data.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Jira",
        "Description": "Project management tool that can track vulnerability identification and patch application timelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test libyear",
    "Level": "2",
    "Description": "Testing LibYear involves assessing the years since a library was last updated to identify outdated dependencies that may pose security risks. This helps in maintaining an up-to-date and secure codebase by ensuring that all libraries are actively maintained and free from known vulnerabilities. Pipeline-compatible tools like Snyk, Dependabot, and Renovate can automate LibYear assessments within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Snyk",
        "Description": "Developer-first security tool that scans for outdated dependencies and known vulnerabilities.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Dependabot",
        "Description": "GitHub-integrated tool that automatically creates pull requests to update outdated dependencies.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Renovate",
        "Description": "Automated tool that manages and updates dependencies across various languages and platforms within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Coverage of client side dynamic components",
    "Level": "2",
    "Description": "Ensuring coverage of client-side dynamic components involves thoroughly testing frontend elements that dynamically update based on user interactions or data changes. This enhances the reliability and security of the user interface by identifying and addressing vulnerabilities in dynamic components. Pipeline-compatible tools like Selenium, Cypress, and Jest can automate the testing of client-side dynamic components within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Selenium",
        "Description": "Automation tool for testing web applications, including client-side dynamic components within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["Java", "Python", "C#"]
      },
      {
        "Name": "Cypress",
        "Description": "End-to-end testing framework that automates the testing of dynamic frontend components within CI/CD workflows.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "Jest",
        "Description": "JavaScript testing framework that can be extended with security plugins to perform unit tests on dynamic frontend components.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Coverage of sequential operations",
    "Level": "3",
    "Description": "Ensuring coverage of sequential operations involves testing the execution of processes that occur in a specific order within the application. This helps in identifying vulnerabilities and ensuring the correct functioning of multi-step workflows. Pipeline-compatible tools like Selenium, Cypress, and JUnit can automate the testing of sequential operations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Selenium",
        "Description": "Automation tool for testing web applications, including sequential operation workflows within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["Java", "Python", "C#"]
      },
      {
        "Name": "Cypress",
        "Description": "End-to-end testing framework that automates the testing of sequential operations within CI/CD workflows.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "JUnit",
        "Description": "Java testing framework that can automate the testing of sequential operations within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["Java"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Coverage of service to service communication",
    "Level": "5",
    "Description": "Ensuring coverage of service-to-service communication involves thoroughly testing the interactions between different microservices or components within the application. This enhances the reliability and security of the overall system by identifying and addressing vulnerabilities in inter-service communication. Pipeline-compatible tools like Postman, SoapUI, and Pact can automate the testing of service-to-service interactions within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Postman",
        "Description": "API testing tool that can automate the testing of service-to-service communication within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "SoapUI",
        "Description": "API testing tool for SOAP and REST services that can automate service-to-service communication tests within CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Pact",
        "Description": "Consumer-driven contract testing tool that ensures reliable service-to-service interactions within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Simple Scan",
    "Level": "2",
    "Description": "Conducting simple scans involves performing basic security and vulnerability assessments on the application to identify common issues. This helps in maintaining a baseline level of security and ensuring that fundamental vulnerabilities are addressed. Pipeline-compatible tools like OWASP ZAP, Nessus, and Nikto can automate simple scans within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can perform simple vulnerability scans within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Nessus",
        "Description": "Vulnerability assessment tool that can automate simple security scans within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Nikto",
        "Description": "Open-source web server scanner that performs comprehensive tests against web servers for multiple items, including over 6700 potentially dangerous files.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Usage of different roles",
    "Level": "2",
    "Description": "Implementing the usage of different roles involves defining and enforcing role-based access controls (RBAC) within the application to ensure that users have appropriate permissions based on their roles. This enhances security by limiting access to sensitive functionalities and data. Pipeline-compatible tools like Auth0, Okta, and AWS IAM can automate the enforcement of role-based access controls within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Auth0",
        "Description": "Identity management platform that provides RBAC features to enforce role-based access controls within applications.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Okta",
        "Description": "Identity and access management service that supports RBAC to control user permissions based on roles.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "AWS IAM",
        "Description": "Identity and Access Management service that allows defining roles and policies to enforce RBAC within AWS environments.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Load tests",
    "Level": "4",
    "Description": "Conducting load tests involves simulating high traffic and usage scenarios to assess the system's performance and scalability under stress. This helps in identifying performance bottlenecks and ensuring that the infrastructure can handle peak loads. Pipeline-compatible tools like JMeter, Gatling, and Locust can automate load testing within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "JMeter",
        "Description": "Open-source load testing tool that can simulate heavy loads on servers, networks, or objects to test their strength and analyze overall performance.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Gatling",
        "Description": "Load and performance testing tool designed for ease of use, maintainability, and high performance.",
        "Opensource": true,
        "Languages": ["Scala"]
      },
      {
        "Name": "Locust",
        "Description": "Open-source load testing tool that allows writing test scenarios in Python to simulate user behavior.",
        "Opensource": true,
        "Languages": ["Python"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test for exposed services",
    "Level": "2",
    "Description": "Testing for exposed services involves identifying and assessing services that are accessible from external networks to ensure they are properly secured and not vulnerable to unauthorized access. This helps in minimizing the attack surface and protecting critical services from potential threats. Pipeline-compatible tools like Nmap, Nessus, and OWASP ZAP can automate the detection and assessment of exposed services within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Nmap",
        "Description": "Open-source network scanner used to discover hosts and services on a computer network, thus building a map of the network.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Nessus",
        "Description": "Vulnerability assessment tool that can scan for exposed services and identify potential security risks.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can identify exposed services and vulnerabilities within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test for unused Resources",
    "Level": "5",
    "Description": "Testing for unused resources involves identifying and decommissioning infrastructure components that are no longer in use. This reduces the attack surface, lowers operational costs, and enhances overall system security by eliminating unnecessary points of failure. Pipeline-compatible tools like Terraform, AWS Config, and Azure Resource Manager can automate the detection and removal of unused resources within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the detection and removal of unused resources within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      },
      {
        "Name": "AWS Config",
        "Description": "Service that enables assessment, auditing, and evaluation of the configurations of AWS resources, helping identify unused resources.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Resource Manager",
        "Description": "Service that provides a management layer for Azure resources, enabling automation of resource cleanup and management.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test network segmentation",
    "Level": "2",
    "Description": "Testing network segmentation involves verifying that network boundaries are properly enforced to restrict unauthorized access and contain potential breaches. This ensures that different network zones are isolated and that sensitive data and critical systems are protected. Pipeline-compatible tools like Nmap, Nessus, and Wireshark can automate the assessment of network segmentation within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Nmap",
        "Description": "Open-source network scanner used to verify proper network segmentation and identify unauthorized access points.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Nessus",
        "Description": "Vulnerability assessment tool that can scan network segments to ensure proper isolation and security.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Wireshark",
        "Description": "Network protocol analyzer that can monitor and analyze network traffic to verify segmentation.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test the configuration of cloud environments",
    "Level": "2",
    "Description": "Testing the configuration of cloud environments involves verifying that cloud resources are set up securely and according to best practices. This includes checking configurations for compute instances, storage, networking, and access controls to ensure they meet security standards. Pipeline-compatible tools like AWS Config, Azure Policy, and Terraform can automate the testing and validation of cloud environment configurations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "AWS Config",
        "Description": "Service that enables assessment, auditing, and evaluation of the configurations of AWS resources, ensuring secure cloud setups.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Policy",
        "Description": "Service that allows the creation, assignment, and management of policies to enforce specific rules and effects on Azure resources.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the provisioning and testing of secure cloud environment configurations within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Load tests",
    "Level": "4",
    "Description": "Conducting load tests involves simulating high traffic and usage scenarios to assess the system's performance and scalability under stress. This helps in identifying performance bottlenecks and ensuring that the infrastructure can handle peak loads. Pipeline-compatible tools like JMeter, Gatling, and Locust can automate load testing within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "JMeter",
        "Description": "Open-source load testing tool that can simulate heavy loads on servers, networks, or objects to test their strength and analyze overall performance.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Gatling",
        "Description": "Load and performance testing tool designed for ease of use, maintainability, and high performance.",
        "Opensource": true,
        "Languages": ["Scala"]
      },
      {
        "Name": "Locust",
        "Description": "Open-source load testing tool that allows writing test scenarios in Python to simulate user behavior.",
        "Opensource": true,
        "Languages": ["Python"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test for exposed services",
    "Level": "2",
    "Description": "Testing for exposed services involves identifying and assessing services that are accessible from external networks to ensure they are properly secured and not vulnerable to unauthorized access. This helps in minimizing the attack surface and protecting critical services from potential threats. Pipeline-compatible tools like Nmap, Nessus, and OWASP ZAP can automate the detection and assessment of exposed services within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Nmap",
        "Description": "Open-source network scanner used to discover hosts and services on a computer network, thus building a 'map' of the network.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Nessus",
        "Description": "Vulnerability assessment tool that can scan for exposed services and identify potential security risks.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OWASP ZAP",
        "Description": "Open-source web application security scanner that can identify exposed services and vulnerabilities within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test the definition of virtualized environments",
    "Level": "2",
    "Description": "Testing the definition of virtualized environments involves verifying that virtual machines or containers are configured correctly and securely. This ensures that the virtualized environments are optimized for performance, security, and scalability. Pipeline-compatible tools like Terraform, VMware vSphere, and Kubernetes can automate the testing and validation of virtualized environment configurations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the provisioning and testing of virtualized environment configurations within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      },
      {
        "Name": "VMware vSphere",
        "Description": "Virtualization platform that manages and verifies virtual machine configurations for optimal performance and security.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages and validates containerized environment configurations within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test cluster deployment resources",
    "Level": "2",
    "Description": "Testing cluster deployment resources involves verifying that resources allocated for cluster deployments are sufficient and properly configured to support application workloads. This ensures that clusters are scalable, reliable, and secure. Pipeline-compatible tools like Terraform, Kubernetes, and Ansible can automate the testing and validation of cluster deployment resources within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the provisioning and testing of cluster deployment resources within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages and verifies the resources allocated for cluster deployments within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automation tool that can manage and test cluster deployment resources to ensure they meet required specifications.",
        "Opensource": true,
        "Languages": ["YAML"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test the cloud configuration",
    "Level": "2",
    "Description": "Testing the cloud configuration involves verifying that cloud resources are set up according to best practices and organizational security standards. This includes checking configurations for compute instances, storage, networking, and access controls to ensure they are secure and optimized. Pipeline-compatible tools like AWS Config, Azure Policy, and Terraform can automate the testing and validation of cloud configurations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "AWS Config",
        "Description": "Service that enables assessment, auditing, and evaluation of the configurations of AWS resources, ensuring secure cloud setups.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Policy",
        "Description": "Service that allows the creation, assignment, and management of policies to enforce specific rules and effects on Azure resources.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the provisioning and testing of secure cloud environment configurations within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test the definition of virtualized environments",
    "Level": "2",
    "Description": "Testing the definition of virtualized environments involves verifying that virtual machines or containers are configured correctly and securely. This ensures that the virtualized environments are optimized for performance, security, and scalability. Pipeline-compatible tools like Terraform, VMware vSphere, and Kubernetes can automate the testing and validation of virtualized environment configurations within CI/CD pipelines.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code tool that can automate the provisioning and testing of virtualized environment configurations within CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["HCL"]
      },
      {
        "Name": "VMware vSphere",
        "Description": "Virtualization platform that manages and verifies virtual machine configurations for optimal performance and security.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Container orchestration system that manages and validates containerized environment configurations within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },

  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Creation and application of a testing concept",
    "Level": "4",
    "Description": "Creation and application of a testing concept involves defining a comprehensive testing strategy that aligns with the project's objectives and ensures quality and security throughout the software development lifecycle. This includes selecting appropriate testing methodologies, defining test cases, and integrating them into the DevSecOps pipeline. Tools like Jenkins, GitLab CI/CD, and CircleCI facilitate the automation and integration of testing processes into CI/CD workflows.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "An open-source automation server that facilitates CI/CD pipeline integration, allowing automated execution of testing scripts and processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated part of GitLab that provides robust CI/CD pipeline capabilities, enabling automated testing and deployment processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "A CI/CD platform that automates testing and deployment, supporting seamless integration with various development tools.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Creation and application of a testing concept",
    "Level": "4",
    "Description": "Creation and application of a testing concept involves defining a comprehensive testing strategy that aligns with the project's objectives and ensures quality and security throughout the software development lifecycle. This includes selecting appropriate testing methodologies, defining test cases, and integrating them into the DevSecOps pipeline. Tools like Jenkins, GitLab CI/CD, and CircleCI facilitate the automation and integration of testing processes into CI/CD workflows.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "An open-source automation server that facilitates CI/CD pipeline integration, allowing automated execution of testing scripts and processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated part of GitLab that provides robust CI/CD pipeline capabilities, enabling automated testing and deployment processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "A CI/CD platform that automates testing and deployment, supporting seamless integration with various development tools.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "API design validation",
    "Level": "3",
    "Description": "API design validation involves verifying that the API designs meet the required specifications, adhere to best practices, and maintain security standards. This ensures that APIs are robust, maintainable, and can be effectively integrated into the overall system architecture. Tools like Postman, Swagger (OpenAPI), and Apigee can be integrated into DevSecOps pipelines to automate API testing and validation during the CI/CD process.",
    "Tools": [
      {
        "Name": "Postman",
        "Description": "A collaboration platform for API development that allows automated testing and validation of API endpoints within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Swagger (OpenAPI)",
        "Description": "A framework for API design and documentation that supports automated validation and testing of API specifications within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Apigee",
        "Description": "A full lifecycle API management platform that facilitates API design, security, and analytics, integrated into CI/CD pipelines for automated API validation.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Dead code elimination",
    "Level": "5",
    "Description": "Dead code elimination involves identifying and removing unused or redundant code from the codebase to improve maintainability, reduce potential vulnerabilities, and optimize performance. This process can be integrated into DevSecOps pipelines using static analysis tools that automatically detect and flag dead code during the CI/CD process. Tools like SonarQube, ESLint, and PMD support automated dead code detection and elimination.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "A static analysis tool that detects dead code and other code quality issues, integrating seamlessly with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "A static code analysis tool for identifying and eliminating dead code in JavaScript projects, easily integrated into CI/CD workflows.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PMD",
        "Description": "A source code analyzer that identifies dead code and other potential issues in Java and other languages, compatible with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Exclusion of source code duplicates",
    "Level": "5",
    "Description": "Excluding source code duplicates involves identifying and removing duplicate code segments to enhance code quality, maintainability, and security. This practice reduces the risk of inconsistencies and vulnerabilities across the codebase. Tools like SonarQube, PMD, and CodeClimate can be integrated into DevSecOps pipelines to automate the detection and exclusion of duplicate code during the CI/CD process.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Detects duplicate code and other code quality issues, integrating with CI/CD pipelines for automated monitoring.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "PMD",
        "Description": "Analyzes source code to identify duplicates and other issues, compatible with various CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CodeClimate",
        "Description": "Provides duplicate code detection and quality metrics, seamlessly integrating into CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Stylistic analysis",
    "Level": "5",
    "Description": "Stylistic analysis involves enforcing coding standards and best practices to maintain code consistency, readability, and quality. This process ensures that the codebase adheres to predefined style guidelines, facilitating easier maintenance and collaboration. Tools like ESLint, Prettier, and StyleCop can be integrated into DevSecOps pipelines to automate stylistic checks and enforce coding standards during the CI/CD process.",
    "Tools": [
      {
        "Name": "ESLint",
        "Description": "A static analysis tool for identifying and enforcing coding styles in JavaScript projects, easily integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "Prettier",
        "Description": "An opinionated code formatter that enforces consistent coding styles across various languages, compatible with CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "StyleCop",
        "Description": "A static analysis tool for enforcing C# coding styles and best practices, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["C#"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Patch Deployment Time",
    "Level": "3",
    "Description": "Testing for patch deployment time involves measuring and optimizing the duration required to deploy security patches to applications. This ensures timely updates and minimizes the window of vulnerability. Tools like Jenkins, GitLab CI/CD, and Ansible can automate patch deployment processes, allowing for continuous monitoring and optimization of deployment times within DevSecOps pipelines.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automates patch deployment processes and measures deployment times within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Facilitates automated patch deployments and provides metrics on deployment times as part of the CI/CD process.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automates patch deployment tasks and integrates with CI/CD pipelines to monitor and optimize deployment times.",
        "Opensource": true,
        "Languages": ["YAML"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test for Time to Patch",
    "Level": "2",
    "Description": "Testing for time to patch involves evaluating the efficiency and speed at which patches are applied to address vulnerabilities. This ensures that critical updates are deployed promptly to mitigate security risks. Tools like Jenkins, GitLab CI/CD, and Puppet can be integrated into DevSecOps pipelines to automate and monitor patch deployment processes, enabling faster response times to identified vulnerabilities.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Automates the patch deployment process and tracks the time taken to apply patches within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Enables automated patch deployments and provides tracking for patch deployment times as part of the CI/CD workflow.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Puppet",
        "Description": "Automates configuration management and patch deployments, integrating with CI/CD pipelines to monitor deployment times.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Test libyear",
    "Level": "2",
    "Description": "Testing libyear involves assessing the usage and maintenance of third-party libraries and dependencies to ensure they are up-to-date and free from known vulnerabilities. This practice helps in maintaining the security and stability of applications. Tools like Snyk, Dependabot, and Renovate can be integrated into DevSecOps pipelines to automate the monitoring and updating of library dependencies.",
    "Tools": [
      {
        "Name": "Snyk",
        "Description": "Monitors and scans dependencies for vulnerabilities, integrating with CI/CD pipelines to ensure libraries are up-to-date and secure.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Dependabot",
        "Description": "Automatically creates pull requests to update dependencies and fix vulnerabilities, seamlessly integrating with CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Renovate",
        "Description": "Automates dependency updates and integrates with CI/CD pipelines to manage and secure library dependencies.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Usage of multiple analyzers",
    "Level": "4",
    "Description": "Usage of multiple analyzers involves employing various static and dynamic analysis tools to comprehensively evaluate the codebase for vulnerabilities, code quality, and adherence to best practices. This multi-tool approach ensures thorough coverage and reduces the likelihood of missing critical issues. Tools like SonarQube, ESLint, and PMD can be integrated into DevSecOps pipelines to provide diverse analysis capabilities and enhance overall security and quality.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Performs comprehensive static code analysis for code quality and security vulnerabilities, integrating seamlessly with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Analyzes JavaScript code for stylistic and security issues, easily integrated into CI/CD workflows for continuous code quality monitoring.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PMD",
        "Description": "Detects code quality issues and potential vulnerabilities in various programming languages, compatible with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Correlate known vulnerabilities in infrastructure with new image versions",
    "Level": "4",
    "Description": "Correlating known vulnerabilities in infrastructure with new image versions involves mapping existing vulnerabilities to updated infrastructure images to ensure that new deployments are free from known security issues. This process enhances the security posture by preventing the introduction of vulnerable components. Tools like Clair, Anchore, and Trivy can be integrated into DevSecOps pipelines to automate vulnerability scanning and correlation with infrastructure image updates.",
    "Tools": [
      {
        "Name": "Clair",
        "Description": "An open-source vulnerability scanner for container images, integrated into CI/CD pipelines to detect and correlate vulnerabilities with image versions.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Anchore",
        "Description": "Provides comprehensive container image scanning and vulnerability assessment, seamlessly integrating with CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Trivy",
        "Description": "A simple and comprehensive vulnerability scanner for containers and other artifacts, compatible with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test of infrastructure components for known vulnerabilities",
    "Level": "4",
    "Description": "Testing infrastructure components for known vulnerabilities involves scanning and assessing all infrastructure elements, such as servers, databases, and networking components, to identify and remediate existing security vulnerabilities. This proactive approach ensures that infrastructure remains secure and resilient against potential threats. Tools like Nessus, OpenVAS, and Qualys can be integrated into DevSecOps pipelines to automate vulnerability scanning and remediation processes.",
    "Tools": [
      {
        "Name": "Nessus",
        "Description": "A comprehensive vulnerability scanner that identifies security vulnerabilities in infrastructure components, integrated into CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OpenVAS",
        "Description": "An open-source vulnerability scanning tool that detects security issues in infrastructure components, compatible with CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Qualys",
        "Description": "Provides cloud-based vulnerability management and scanning for infrastructure components, seamlessly integrating with DevSecOps pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test the definition of virtualized environments",
    "Level": "2",
    "Description": "Testing the definition of virtualized environments involves validating the configurations and settings of virtual environments to ensure they meet security and performance standards. This includes verifying virtualization settings, network configurations, and resource allocations. Tools like Terraform, Ansible, and Packer can be integrated into DevSecOps pipelines to automate the testing and validation of virtual environment definitions.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Allows for the definition and validation of virtualized environments through Infrastructure as Code (IaC), integrating with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automates the configuration and validation of virtual environments, compatible with CI/CD workflows for continuous testing.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Packer",
        "Description": "Automates the creation and testing of machine images for virtual environments, integrating with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Creation and application of a testing concept",
    "Level": "4",
    "Description": "Creation and application of a testing concept involves defining a comprehensive testing strategy that aligns with the project's objectives and ensures quality and security throughout the software development lifecycle. This includes selecting appropriate testing methodologies, defining test cases, and integrating them into the DevSecOps pipeline. Tools like Jenkins, GitLab CI/CD, and CircleCI facilitate the automation and integration of testing processes into CI/CD workflows.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "An open-source automation server that facilitates CI/CD pipeline integration, allowing automated execution of testing scripts and processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated part of GitLab that provides robust CI/CD pipeline capabilities, enabling automated testing and deployment processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "A CI/CD platform that automates testing and deployment, supporting seamless integration with various development tools.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Deactivating of unneeded tests",
    "Level": "3",
    "Description": "Deactivating unneeded tests involves identifying and disabling tests that are redundant, obsolete, or no longer relevant to the current development context. This optimizes the testing process by reducing execution time and resource consumption. Tools like Jenkins and GitLab CI/CD can be configured to selectively run tests based on changes in the codebase, ensuring only necessary tests are executed.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Allows configuration of conditional test execution within CI/CD pipelines to optimize testing processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Provides features to define and manage which tests to run based on pipeline configurations and code changes.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Default settings for intensity",
    "Level": "1",
    "Description": "Default settings for test intensity refer to the baseline configuration of test execution frequency and scope without any optimizations. This ensures that all standard tests are executed uniformly across the pipeline. While not optimized for specific project needs, default settings provide a consistent testing foundation. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and CircleCI use default test configurations out-of-the-box.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Executes predefined test suites with default configurations in CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Runs default test suites as part of the CI/CD process without additional configurations.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "Automatically runs standard test suites with default settings in CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "High test intensity",
    "Level": "1",
    "Description": "High test intensity involves executing an extensive suite of tests, including unit, integration, system, and security tests, to ensure comprehensive coverage and early detection of issues. This approach enhances the reliability and security of the software but may increase pipeline execution time. Tools like Jenkins, GitLab CI/CD, and CircleCI can manage high-intensity test suites by leveraging parallel execution and optimized resource allocation.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Supports parallel test execution and resource optimization to handle high-intensity test suites.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Facilitates high-intensity testing by allowing parallel jobs and efficient pipeline configurations.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "Enables high-intensity testing through concurrent job executions and scalable pipeline resources.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Virtual environments are limited",
    "Level": "2",
    "Description": "Limiting virtual environments involves restricting the use of virtualized resources to enhance security and control over the infrastructure. This ensures that only authorized and necessary virtual environments are deployed, reducing the attack surface. Tools like Terraform and Ansible can manage and enforce policies for virtual environment deployments within DevSecOps pipelines.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code (IaC) tool that allows for the creation, management, and enforcement of virtual environment configurations.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automation tool used for configuration management and enforcing infrastructure policies, including virtual environment restrictions.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "WAF Advanced",
    "Level": "5",
    "Description": "Advanced Web Application Firewall (WAF) implementation involves deploying sophisticated WAF solutions that provide enhanced security features such as real-time threat detection, automated rule updates, and integration with CI/CD pipelines for continuous protection. Tools like AWS WAF, Cloudflare WAF, and Imperva offer advanced capabilities that can be integrated into DevSecOps workflows to ensure robust application security.",
    "Tools": [
      {
        "Name": "AWS WAF",
        "Description": "A scalable WAF service that protects web applications from common web exploits and integrates seamlessly with AWS CI/CD tools.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Cloudflare WAF",
        "Description": "Provides advanced threat protection for web applications with automated rule updates and integration capabilities for CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Imperva",
        "Description": "Delivers comprehensive WAF solutions with real-time threat intelligence and CI/CD pipeline integration for continuous security.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "WAF baseline",
    "Level": "3",
    "Description": "WAF baseline implementation involves setting up a fundamental Web Application Firewall configuration that provides essential protection against common threats. This baseline serves as the foundation for further security enhancements and can be integrated into DevSecOps pipelines using tools like AWS WAF, Cloudflare WAF, and ModSecurity to automate baseline rule deployments and updates.",
    "Tools": [
      {
        "Name": "AWS WAF",
        "Description": "Enables the establishment of baseline security rules for web applications, integrated with AWS CI/CD tools.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Cloudflare WAF",
        "Description": "Provides essential WAF protection with baseline rule sets that can be automated through CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ModSecurity",
        "Description": "An open-source WAF that offers baseline protection rules and can be integrated into various CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "WAF medium",
    "Level": "4",
    "Description": "Medium-level WAF implementation includes deploying WAF configurations with enhanced security rules and monitoring capabilities. This level provides improved protection against a wider range of threats and integrates with CI/CD pipelines for automated updates and continuous monitoring. Tools like AWS WAF, Cloudflare WAF, and Imperva can be configured for medium-level security, offering features like custom rule creation and real-time traffic analysis.",
    "Tools": [
      {
        "Name": "AWS WAF",
        "Description": "Offers medium-level security configurations with custom rules and real-time traffic monitoring, integrated into AWS CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Cloudflare WAF",
        "Description": "Provides advanced WAF features with customizable rules and automated integration with CI/CD pipelines for continuous protection.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Imperva",
        "Description": "Delivers medium-level WAF configurations with enhanced threat detection and CI/CD pipeline integration for ongoing security management.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test for exposed services",
    "Level": "2",
    "Description": "Testing for exposed services involves identifying and assessing services that are accessible externally to ensure they are secure and do not expose vulnerabilities. This process helps in minimizing the attack surface by controlling and securing exposed endpoints. Tools like Nmap, Shodan, and OpenVAS can be integrated into DevSecOps pipelines to automate the detection and assessment of exposed services.",
    "Tools": [
      {
        "Name": "Nmap",
        "Description": "A network scanning tool used to discover exposed services and assess their security within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Shodan",
        "Description": "A search engine for internet-connected devices that can be used to identify exposed services and vulnerabilities, compatible with CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OpenVAS",
        "Description": "An open-source vulnerability scanner that detects exposed services and assesses their security within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test for unused Resources",
    "Level": "5",
    "Description": "Testing for unused resources involves identifying and eliminating infrastructure components that are no longer in use to optimize resource utilization and reduce potential security risks. This practice helps in maintaining a lean and secure infrastructure by removing unnecessary elements. Tools like AWS Trusted Advisor, Azure Resource Manager, and Google Cloud's Resource Manager can be integrated into DevSecOps pipelines to automate the detection and management of unused resources.",
    "Tools": [
      {
        "Name": "AWS Trusted Advisor",
        "Description": "Provides recommendations for optimizing AWS resources, including identifying and managing unused resources, integrated with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Resource Manager",
        "Description": "Manages Azure resources and provides tools to identify and eliminate unused resources, compatible with CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Google Cloud Resource Manager",
        "Description": "Offers management and optimization of Google Cloud resources, including the identification of unused components within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test network segmentation",
    "Level": "2",
    "Description": "Testing network segmentation involves verifying that network boundaries are properly defined and enforced to limit access between different network segments. This enhances security by containing potential breaches and reducing the lateral movement of attackers. Tools like Wireshark, Cisco Network Analyzer, and Nmap can be integrated into DevSecOps pipelines to automate the testing and validation of network segmentation configurations.",
    "Tools": [
      {
        "Name": "Wireshark",
        "Description": "A network protocol analyzer used to verify and troubleshoot network segmentation configurations within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Cisco Network Analyzer",
        "Description": "Provides advanced network analysis and segmentation verification, compatible with CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Nmap",
        "Description": "A network scanning tool that can assess and verify network segmentation, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Local development security checks performed",
    "Level": "3",
    "Description": "Performing local development security checks involves implementing security testing and validation during the development phase on local environments. This practice ensures that security issues are identified and addressed early in the development process. Tools like Git hooks with security linters, Pre-commit hooks, and IDE-integrated security plugins can be used to automate local security checks within DevSecOps workflows.",
    "Tools": [
      {
        "Name": "Git hooks",
        "Description": "Scripts that run automatically during Git operations to enforce security checks, integrated into local development environments.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Pre-commit",
        "Description": "A framework for managing and maintaining multi-language pre-commit hooks, enabling automated security checks in local development.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "IDE Security Plugins",
        "Description": "Plugins for IDEs like Visual Studio Code and IntelliJ IDEA that provide real-time security analysis and recommendations during development.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Treatment of all defects",
    "Level": "5",
    "Description": "Treatment of all defects involves identifying, prioritizing, and addressing every defect detected during testing to ensure the highest quality and security of the software. This comprehensive approach ensures that no issues are left unresolved, thereby enhancing the reliability and integrity of the application. Tools like Jira, Bugzilla, and GitLab Issues can be integrated into DevSecOps pipelines to manage and track defect resolution effectively.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "A project management tool that tracks and manages defects throughout the development lifecycle, integrated with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Bugzilla",
        "Description": "An open-source bug tracking system that manages defect reporting and resolution within DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab Issues",
        "Description": "Integrated issue tracking within GitLab that manages and resolves defects as part of the CI/CD process.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Treatment of defects with severity high or higher",
    "Level": "1",
    "Description": "Treatment of defects with high severity or higher focuses on addressing critical and major issues that pose significant risks to the application’s functionality and security. This prioritization ensures that the most impactful defects are resolved promptly to maintain system integrity. Tools like Jira, GitLab Issues, and Bugzilla can be configured to prioritize and manage high-severity defects within DevSecOps pipelines, ensuring timely resolution.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Allows prioritization and management of high-severity defects, ensuring they are addressed promptly within CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab Issues",
        "Description": "Enables tagging and prioritization of high-severity defects, integrated with CI/CD pipelines for efficient resolution.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Bugzilla",
        "Description": "Supports categorization and prioritization of high-severity defects, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Treatment of defects with severity middle",
    "Level": "3",
    "Description": "Treatment of defects with middle severity involves addressing issues that have a moderate impact on the application’s functionality and security. This ensures that the application maintains a balanced level of quality while prioritizing critical issues. Tools like Jira, GitLab Issues, and Bugzilla can be utilized to manage and track the resolution of middle-severity defects within DevSecOps pipelines, ensuring systematic and timely fixes.",
    "Tools": [
      {
        "Name": "Jira",
        "Description": "Manages and tracks the resolution of middle-severity defects, ensuring systematic handling within CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "GitLab Issues",
        "Description": "Enables tracking and management of middle-severity defects, integrated with CI/CD pipelines for efficient resolution.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Bugzilla",
        "Description": "Supports management and tracking of middle-severity defects, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Consolidation",
    "Activity": "Usage of a vulnerability management system",
    "Level": "3",
    "Description": "Usage of a vulnerability management system involves implementing tools that continuously identify, assess, and remediate vulnerabilities within the application and infrastructure. This proactive approach ensures ongoing security and compliance by managing vulnerabilities throughout the software development lifecycle. Tools like Qualys, Nessus, and Snyk can be integrated into DevSecOps pipelines to automate vulnerability scanning and management processes.",
    "Tools": [
      {
        "Name": "Qualys",
        "Description": "Provides comprehensive vulnerability management and continuous monitoring, integrated into CI/CD pipelines for automated security assessments.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Nessus",
        "Description": "Offers advanced vulnerability scanning and management capabilities, compatible with DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Snyk",
        "Description": "Automates vulnerability scanning and remediation for dependencies and container images, seamlessly integrating with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for applications",
    "Activity": "Usage of multiple scanners",
    "Level": "4",
    "Description": "Usage of multiple scanners involves employing various dynamic analysis tools to comprehensively evaluate applications for security vulnerabilities, performance issues, and compliance with best practices. This multi-scanner approach enhances the detection of diverse issues by leveraging the strengths of different tools. Tools like OWASP ZAP, Burp Suite, and Nikto can be integrated into DevSecOps pipelines to provide layered security testing and thorough application assessments.",
    "Tools": [
      {
        "Name": "OWASP ZAP",
        "Description": "An open-source web application security scanner that identifies vulnerabilities through dynamic analysis, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Burp Suite",
        "Description": "A comprehensive web vulnerability scanner that performs dynamic analysis for security testing, compatible with DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Nikto",
        "Description": "An open-source web server scanner that performs comprehensive tests for security vulnerabilities, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test of the configuration of cloud environments",
    "Level": "2",
    "Description": "Testing the configuration of cloud environments involves verifying that cloud resources are correctly configured according to security and performance standards. This ensures that cloud deployments are secure, efficient, and compliant with organizational policies. Tools like AWS Config, Azure Resource Manager, and Google Cloud Config Connector can be integrated into DevSecOps pipelines to automate the testing and validation of cloud environment configurations.",
    "Tools": [
      {
        "Name": "AWS Config",
        "Description": "Monitors and evaluates the configurations of AWS resources, ensuring compliance and security within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Resource Manager",
        "Description": "Manages and validates Azure resource configurations, integrated with CI/CD workflows for automated configuration testing.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Google Cloud Config Connector",
        "Description": "Enables the management and validation of Google Cloud resource configurations through Infrastructure as Code, compatible with DevSecOps pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Software Composition Analysis (client side)",
    "Level": "3",
    "Description": "Software Composition Analysis (SCA) for the client side involves scanning client-side dependencies and libraries to identify and remediate known vulnerabilities and license compliance issues. This practice ensures that client applications are secure and adhere to legal requirements. Tools like Snyk, WhiteSource, and Dependabot can be integrated into DevSecOps pipelines to automate the analysis and management of client-side software components.",
    "Tools": [
      {
        "Name": "Snyk",
        "Description": "Scans client-side dependencies for vulnerabilities and license issues, integrating seamlessly with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "WhiteSource",
        "Description": "Provides comprehensive SCA for client-side libraries, automating vulnerability detection and license compliance within DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Dependabot",
        "Description": "Automates dependency updates and scans for vulnerabilities in client-side libraries, integrated with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Software Composition Analysis (server side)",
    "Level": "2",
    "Description": "Software Composition Analysis (SCA) for the server side involves examining server-side dependencies and libraries to detect and address known vulnerabilities and license compliance issues. This ensures that server applications are secure and legally compliant. Tools like Snyk, Black Duck, and OWASP Dependency-Check can be integrated into DevSecOps pipelines to automate the analysis and management of server-side software components.",
    "Tools": [
      {
        "Name": "Snyk",
        "Description": "Scans server-side dependencies for vulnerabilities and license issues, integrating seamlessly with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Black Duck",
        "Description": "Provides comprehensive SCA for server-side libraries, automating vulnerability detection and license compliance within DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OWASP Dependency-Check",
        "Description": "An open-source SCA tool that identifies vulnerabilities in server-side dependencies, compatible with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Static analysis for all components/libraries",
    "Level": "5",
    "Description": "Static analysis for all components and libraries involves thoroughly examining the entire codebase, including all third-party libraries, to identify and remediate security vulnerabilities, code quality issues, and compliance violations. This comprehensive approach ensures that both custom and external code maintain high standards of security and performance. Tools like SonarQube, Fortify, and Coverity can be integrated into DevSecOps pipelines to automate the static analysis of all components and libraries during the CI/CD process.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Performs comprehensive static code analysis for code quality and security vulnerabilities, integrating seamlessly with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Fortify",
        "Description": "Offers advanced static analysis for identifying vulnerabilities in all components and libraries, compatible with DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Coverity",
        "Description": "Provides in-depth static analysis for a wide range of languages and libraries, integrated into CI/CD pipelines for continuous quality assurance.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Static analysis for all self written components",
    "Level": "4",
    "Description": "Static analysis for all self-written components involves evaluating custom-developed code to identify security vulnerabilities, code quality issues, and adherence to coding standards. This ensures that internally developed components are secure and maintainable. Tools like SonarQube, ESLint, and PMD can be integrated into DevSecOps pipelines to automate the static analysis of self-written components during the CI/CD process.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Performs static code analysis for custom-developed components, integrating seamlessly with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Analyzes JavaScript code for quality and security issues in self-written components, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PMD",
        "Description": "Detects code quality issues and potential vulnerabilities in custom-developed code, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Static analysis for important client side components",
    "Level": "3",
    "Description": "Static analysis for important client-side components involves scrutinizing critical parts of the client-side codebase to identify and address security vulnerabilities and code quality issues. This ensures that essential client-side functionalities are robust and secure. Tools like ESLint, StyleCop, and SonarQube can be integrated into DevSecOps pipelines to automate the static analysis of key client-side components during the CI/CD process.",
    "Tools": [
      {
        "Name": "ESLint",
        "Description": "Analyzes JavaScript code for security and quality issues in important client-side components, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "StyleCop",
        "Description": "Enforces C# coding styles and best practices in important client-side components, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": ["C#"]
      },
      {
        "Name": "SonarQube",
        "Description": "Performs static code analysis for critical client-side components, ensuring security and quality within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Static analysis for important server side components",
    "Level": "3",
    "Description": "Static analysis for important server-side components involves evaluating critical parts of the server-side codebase to detect and remediate security vulnerabilities, code quality issues, and compliance violations. This ensures that essential server-side functionalities are secure and maintainable. Tools like SonarQube, Fortify, and Coverity can be integrated into DevSecOps pipelines to automate the static analysis of key server-side components during the CI/CD process.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Performs static code analysis for critical server-side components, ensuring security and quality within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Fortify",
        "Description": "Provides advanced static analysis for identifying vulnerabilities in important server-side components, compatible with DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Coverity",
        "Description": "Offers in-depth static analysis for critical server-side code, integrated into CI/CD pipelines for continuous quality assurance.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },

  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for applications",
    "Activity": "Usage of multiple analyzers",
    "Level": "4",
    "Description": "Usage of multiple analyzers involves employing various static and dynamic analysis tools to comprehensively evaluate the codebase for vulnerabilities, code quality, and adherence to best practices. This multi-tool approach ensures thorough coverage and reduces the likelihood of missing critical issues. Tools like SonarQube, ESLint, and PMD can be integrated into DevSecOps pipelines to provide diverse analysis capabilities and enhance overall security and quality.",
    "Tools": [
      {
        "Name": "SonarQube",
        "Description": "Performs comprehensive static code analysis for code quality and security vulnerabilities, integrating seamlessly with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "ESLint",
        "Description": "Analyzes JavaScript code for stylistic and security issues, easily integrated into CI/CD workflows for continuous code quality monitoring.",
        "Opensource": true,
        "Languages": ["JavaScript"]
      },
      {
        "Name": "PMD",
        "Description": "Detects code quality issues and potential vulnerabilities in various programming languages, compatible with CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["Java", "C++", "Python"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Correlate known vulnerabilities in infrastructure with new image versions",
    "Level": "4",
    "Description": "Correlating known vulnerabilities in infrastructure with new image versions involves mapping existing vulnerabilities to updated infrastructure images to ensure that new deployments are free from known security issues. This process enhances the security posture by preventing the introduction of vulnerable components. Tools like Clair, Anchore, and Trivy can be integrated into DevSecOps pipelines to automate vulnerability scanning and correlation with infrastructure image updates.",
    "Tools": [
      {
        "Name": "Clair",
        "Description": "An open-source vulnerability scanner for container images, integrated into CI/CD pipelines to detect and correlate vulnerabilities with image versions.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Anchore",
        "Description": "Provides comprehensive container image scanning and vulnerability assessment, seamlessly integrating with CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Trivy",
        "Description": "A simple and comprehensive vulnerability scanner for containers and other artifacts, compatible with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Software Composition Analysis",
    "Level": "4",
    "Description": "Software Composition Analysis (SCA) involves scanning and analyzing third-party libraries and dependencies to identify known vulnerabilities and license compliance issues. Implementing SCA ensures that all components used within the infrastructure are secure and legally compliant. Tools like Snyk, Black Duck, and OWASP Dependency-Check can be integrated into DevSecOps pipelines to automate the identification and remediation of vulnerabilities in dependencies.",
    "Tools": [
      {
        "Name": "Snyk",
        "Description": "Monitors and scans dependencies for vulnerabilities, integrating with CI/CD pipelines to ensure libraries are up-to-date and secure.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Black Duck",
        "Description": "Provides comprehensive SCA for server-side libraries, automating vulnerability detection and license compliance within DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OWASP Dependency-Check",
        "Description": "An open-source SCA tool that identifies vulnerabilities in server-side dependencies, compatible with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test cluster deployment resources",
    "Level": "2",
    "Description": "Testing cluster deployment resources involves verifying that the resources allocated for cluster deployments are adequate and configured correctly to support application scalability and performance. This ensures that deployments are efficient and resources are optimally utilized. Tools like Terraform, Kubernetes, and Helm can be integrated into DevSecOps pipelines to automate the testing and validation of cluster deployment configurations.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code (IaC) tool that allows for the creation, management, and validation of cluster deployment configurations within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "An open-source container orchestration platform that manages cluster deployments and can be integrated with CI/CD pipelines for automated testing.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Helm",
        "Description": "A package manager for Kubernetes that simplifies the deployment and management of applications within clusters, compatible with CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test for image lifetime",
    "Level": "2",
    "Description": "Testing for image lifetime involves ensuring that infrastructure images (e.g., container images) are updated and maintained within their valid lifespans to prevent security vulnerabilities and ensure compatibility. This practice helps in maintaining a secure and efficient infrastructure by avoiding the use of outdated or unsupported images. Tools like Trivy, Clair, and Docker Hub can be integrated into DevSecOps pipelines to automate the monitoring and management of image lifetimes.",
    "Tools": [
      {
        "Name": "Trivy",
        "Description": "A vulnerability scanner that can assess container image lifetimes and ensure images are up-to-date within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Clair",
        "Description": "An open-source vulnerability scanner for container images that can monitor and enforce image lifetimes within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Docker Hub",
        "Description": "Provides image repository services with automated image updates and lifecycle management, compatible with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test for new image version",
    "Level": "3",
    "Description": "Testing for new image versions involves verifying that new versions of infrastructure images meet security and performance standards before deployment. This ensures that updates do not introduce vulnerabilities or degrade system performance. Tools like Docker Compose, Kubernetes, and Jenkins can be integrated into DevSecOps pipelines to automate the testing and validation of new image versions.",
    "Tools": [
      {
        "Name": "Docker Compose",
        "Description": "Defines and runs multi-container Docker applications, facilitating the testing of new image versions within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Manages containerized applications and can automate the testing of new image versions within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automates the deployment and testing of new image versions within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test of infrastructure components for known vulnerabilities",
    "Level": "4",
    "Description": "Testing infrastructure components for known vulnerabilities involves scanning and assessing all infrastructure elements, such as servers, databases, and networking components, to identify and remediate existing security vulnerabilities. This proactive approach ensures that infrastructure remains secure and resilient against potential threats. Tools like Nessus, OpenVAS, and Qualys can be integrated into DevSecOps pipelines to automate vulnerability scanning and remediation processes.",
    "Tools": [
      {
        "Name": "Nessus",
        "Description": "A comprehensive vulnerability scanner that identifies security vulnerabilities in infrastructure components, integrated into CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OpenVAS",
        "Description": "An open-source vulnerability scanning tool that detects security issues in infrastructure components, compatible with CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Qualys",
        "Description": "Provides cloud-based vulnerability management and scanning for infrastructure components, seamlessly integrating with DevSecOps pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test the cloud configuration",
    "Level": "2",
    "Description": "Testing the cloud configuration involves verifying that cloud resources are correctly configured according to security and performance standards. This ensures that cloud deployments are secure, efficient, and compliant with organizational policies. Tools like AWS Config, Azure Resource Manager, and Google Cloud Config Connector can be integrated into DevSecOps pipelines to automate the testing and validation of cloud environment configurations.",
    "Tools": [
      {
        "Name": "AWS Config",
        "Description": "Monitors and evaluates the configurations of AWS resources, ensuring compliance and security within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Resource Manager",
        "Description": "Manages and validates Azure resource configurations, integrated with CI/CD workflows for automated configuration testing.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Google Cloud Config Connector",
        "Description": "Enables the management and validation of Google Cloud resource configurations through Infrastructure as Code, compatible with DevSecOps pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test the definition of virtualized environments",
    "Level": "2",
    "Description": "Testing the definition of virtualized environments involves validating the configurations and settings of virtual environments to ensure they meet security and performance standards. This includes verifying virtualization settings, network configurations, and resource allocations. Tools like Terraform, Ansible, and Packer can be integrated into DevSecOps pipelines to automate the testing and validation of virtual environment definitions.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Allows for the definition and validation of virtualized environments through Infrastructure as Code (IaC), integrating with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automates the configuration and validation of virtual environments, compatible with CI/CD workflows for continuous testing.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Packer",
        "Description": "Automates the creation and testing of machine images for virtual environments, integrating with CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Creation and application of a testing concept",
    "Level": "4",
    "Description": "Creation and application of a testing concept involves defining a comprehensive testing strategy that aligns with the project's objectives and ensures quality and security throughout the software development lifecycle. This includes selecting appropriate testing methodologies, defining test cases, and integrating them into the DevSecOps pipeline. Tools like Jenkins, GitLab CI/CD, and CircleCI facilitate the automation and integration of testing processes into CI/CD workflows.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "An open-source automation server that facilitates CI/CD pipeline integration, allowing automated execution of testing scripts and processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Integrated part of GitLab that provides robust CI/CD pipeline capabilities, enabling automated testing and deployment processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "A CI/CD platform that automates testing and deployment, supporting seamless integration with various development tools.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Deactivating of unneeded tests",
    "Level": "3",
    "Description": "Deactivating unneeded tests involves identifying and disabling tests that are redundant, obsolete, or no longer relevant to the current development context. This optimizes the testing process by reducing execution time and resource consumption. Tools like Jenkins and GitLab CI/CD can be configured to selectively run tests based on changes in the codebase, ensuring only necessary tests are executed.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Allows configuration of conditional test execution within CI/CD pipelines to optimize testing processes.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Provides features to define and manage which tests to run based on pipeline configurations and code changes.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "Default settings for intensity",
    "Level": "1",
    "Description": "Default settings for test intensity refer to the baseline configuration of test execution frequency and scope without any optimizations. This ensures that all standard tests are executed uniformly across the pipeline. While not optimized for specific project needs, default settings provide a consistent testing foundation. Pipeline-compatible tools like Jenkins, GitLab CI/CD, and CircleCI use default test configurations out-of-the-box.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Executes predefined test suites with default configurations in CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Runs default test suites as part of the CI/CD process without additional configurations.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "Automatically runs standard test suites with default settings in CI/CD workflows.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Test-Intensity",
    "Activity": "High test intensity",
    "Level": "1",
    "Description": "High test intensity involves executing an extensive suite of tests, including unit, integration, system, and security tests, to ensure comprehensive coverage and early detection of issues. This approach enhances the reliability and security of the software but may increase pipeline execution time. Tools like Jenkins, GitLab CI/CD, and CircleCI can manage high-intensity test suites by leveraging parallel execution and optimized resource allocation.",
    "Tools": [
      {
        "Name": "Jenkins",
        "Description": "Supports parallel test execution and resource optimization to handle high-intensity test suites.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "GitLab CI/CD",
        "Description": "Facilitates high-intensity testing by allowing parallel jobs and efficient pipeline configurations.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "CircleCI",
        "Description": "Enables high-intensity testing through concurrent job executions and scalable pipeline resources.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Test for unauthorized installation",
    "Level": "3",
    "Description": "Testing for unauthorized installation involves verifying that no unauthorized software or applications are installed within the infrastructure. This ensures that only approved and secure applications are running, reducing the risk of malicious software compromising the system. Tools like Tripwire, OSSEC, and Sysdig can be integrated into DevSecOps pipelines to automate the detection and prevention of unauthorized installations.",
    "Tools": [
      {
        "Name": "Tripwire",
        "Description": "Monitors and detects unauthorized changes to system files and configurations, integrated into CI/CD pipelines for continuous security.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "OSSEC",
        "Description": "An open-source host-based intrusion detection system that detects unauthorized installations and changes, compatible with CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Sysdig",
        "Description": "Provides runtime security and monitoring to detect unauthorized installations and activities within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Centralized application logging",
    "Level": "3",
    "Description": "Centralized application logging involves aggregating logs from various applications into a single, centralized system. This facilitates easier monitoring, troubleshooting, and analysis of application behavior and security events. Tools like ELK Stack (Elasticsearch, Logstash, Kibana), Splunk, and Fluentd can be integrated into DevSecOps pipelines to automate the collection and centralization of application logs.",
    "Tools": [
      {
        "Name": "ELK Stack",
        "Description": "A powerful set of tools (Elasticsearch, Logstash, Kibana) for centralized logging, visualization, and analysis, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "A comprehensive platform for searching, monitoring, and analyzing machine-generated data, compatible with DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Fluentd",
        "Description": "An open-source data collector for unified logging layers, integrated into CI/CD pipelines for centralized log management.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Centralized system logging",
    "Level": "1",
    "Description": "Centralized system logging involves aggregating logs from various system components into a single, centralized repository. This enables efficient monitoring, analysis, and troubleshooting of system-level events and issues. Tools like Syslog, Graylog, and Splunk can be integrated into DevSecOps pipelines to automate the collection and centralization of system logs.",
    "Tools": [
      {
        "Name": "Syslog",
        "Description": "A standard protocol for message logging that aggregates system logs into a centralized server, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Graylog",
        "Description": "An open-source log management platform that centralizes and analyzes system logs, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "A comprehensive platform for searching, monitoring, and analyzing machine-generated data, integrated into CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Correlation of security events",
    "Level": "5",
    "Description": "Correlation of security events involves analyzing and linking disparate security events from various sources to identify patterns, detect threats, and respond to incidents effectively. This enhances the ability to detect complex attacks and improve overall security posture. Tools like Splunk, IBM QRadar, and ArcSight can be integrated into DevSecOps pipelines to automate the correlation and analysis of security events.",
    "Tools": [
      {
        "Name": "Splunk",
        "Description": "A comprehensive platform for searching, monitoring, and analyzing machine-generated data, enabling correlation of security events within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "IBM QRadar",
        "Description": "A security information and event management (SIEM) solution that correlates security events for threat detection and response, compatible with DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "ArcSight",
        "Description": "Provides advanced SIEM capabilities for correlating and analyzing security events, integrated into CI/CD pipelines for continuous security monitoring.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Logging of security events",
    "Level": "2",
    "Description": "Logging of security events involves capturing and storing security-related activities and incidents within the system. This practice is crucial for auditing, compliance, and forensic investigations. Tools like Logstash, Fluentd, and Splunk can be integrated into DevSecOps pipelines to automate the logging of security events.",
    "Tools": [
      {
        "Name": "Logstash",
        "Description": "A data processing pipeline that ingests, transforms, and sends logs to centralized repositories, integrated into CI/CD pipelines for security event logging.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Fluentd",
        "Description": "An open-source data collector for unified logging layers, facilitating the logging of security events within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "A comprehensive platform for searching, monitoring, and analyzing machine-generated data, including security events, compatible with DevSecOps pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "PII logging concept",
    "Level": "5",
    "Description": "PII logging concept involves establishing guidelines and mechanisms for securely logging Personally Identifiable Information (PII) to ensure compliance with data protection regulations and prevent unauthorized access. This includes implementing data masking, encryption, and access controls for logs containing PII. Tools like Splunk, Logstash, and Fluentd can be configured within DevSecOps pipelines to enforce PII protection measures during logging.",
    "Tools": [
      {
        "Name": "Splunk",
        "Description": "Provides secure logging capabilities with support for data masking and encryption, ensuring PII protection within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Logstash",
        "Description": "A data processing pipeline that can be configured to mask and encrypt PII in logs, integrated into CI/CD workflows for secure logging.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Fluentd",
        "Description": "An open-source data collector that can enforce PII protection measures through data transformation and encryption within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Logging",
    "Activity": "Visualized logging",
    "Level": "2",
    "Description": "Visualized logging involves presenting log data in a visual format, such as dashboards and graphs, to facilitate easier monitoring, analysis, and identification of trends or anomalies. This enhances the ability to quickly interpret and respond to log data. Tools like Kibana, Grafana, and Splunk can be integrated into DevSecOps pipelines to provide visual representations of log data.",
    "Tools": [
      {
        "Name": "Kibana",
        "Description": "A visualization tool for Elasticsearch that creates interactive dashboards and graphs from log data, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "An open-source platform for monitoring and observability that visualizes log and metric data, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "A comprehensive platform for searching, monitoring, and analyzing machine-generated data with built-in visualization capabilities, integrated into CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Defense metrics",
    "Level": "4",
    "Description": "Defense metrics involve tracking and analyzing security-related metrics to assess the effectiveness of defense mechanisms and strategies. This includes metrics like detection rates, response times, and incident counts. Tools like Prometheus, Grafana, and Splunk can be integrated into DevSecOps pipelines to automate the collection and visualization of defense metrics, enabling continuous improvement of security measures.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "An open-source monitoring and alerting toolkit that collects and stores metrics, integrated into CI/CD pipelines for defense metric tracking.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "A visualization tool that creates dashboards for monitoring defense metrics, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Splunk",
        "Description": "Provides comprehensive monitoring and visualization capabilities for defense metrics within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Simple application metrics",
    "Level": "1",
    "Description": "Simple application metrics involve tracking basic performance indicators of applications, such as response times, error rates, and throughput. These metrics provide foundational insights into application performance and health. Tools like Prometheus, Grafana, and New Relic can be integrated into DevSecOps pipelines to automate the collection and visualization of simple application metrics.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "An open-source monitoring and alerting toolkit that collects and stores simple application metrics, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "A visualization tool that creates dashboards for displaying simple application metrics, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "New Relic",
        "Description": "A monitoring and observability platform that tracks simple application metrics, integrated into CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test for malware",
    "Level": "3",
    "Description": "Testing for malware involves scanning and analyzing infrastructure components to detect and remediate malicious software or code. This ensures that the infrastructure remains secure and free from malware threats. Tools like ClamAV, Malwarebytes, and Sophos can be integrated into DevSecOps pipelines to automate malware detection and removal processes.",
    "Tools": [
      {
        "Name": "ClamAV",
        "Description": "An open-source antivirus engine for detecting malware, integrated into CI/CD pipelines for automated malware scanning.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Malwarebytes",
        "Description": "Provides advanced malware detection and removal capabilities, compatible with DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Sophos",
        "Description": "Offers comprehensive malware protection and scanning tools, integrated into CI/CD pipelines for continuous security.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test for new image version",
    "Level": "3",
    "Description": "Testing for new image versions involves verifying that updated infrastructure images comply with security policies and perform as expected before deployment. This ensures that new image versions do not introduce vulnerabilities or degrade system performance. Tools like Docker Compose, Kubernetes, and Jenkins can be integrated into DevSecOps pipelines to automate the testing and validation of new image versions.",
    "Tools": [
      {
        "Name": "Docker Compose",
        "Description": "Defines and runs multi-container Docker applications, facilitating the testing of new image versions within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Manages containerized applications and can automate the testing of new image versions within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Jenkins",
        "Description": "Automates the deployment and testing of new image versions within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Implementation",
    "Sub Dimension": "Infrastructure Hardening",
    "Activity": "Usage of test and production environments",
    "Level": "2",
    "Description": "Usage of test and production environments involves segregating environments to ensure that testing activities do not impact production systems. This separation enhances security and stability by isolating development and testing processes from live operations. Tools like Terraform, Ansible, and Kubernetes can be integrated into DevSecOps pipelines to manage and enforce environment segregation.",
    "Tools": [
      {
        "Name": "Terraform",
        "Description": "Infrastructure as Code (IaC) tool that manages the provisioning and segregation of test and production environments within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Ansible",
        "Description": "Automation tool used for configuration management and enforcing environment segregation, compatible with CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kubernetes",
        "Description": "Manages containerized applications and can enforce environment segregation within CI/CD pipelines for secure deployments.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Alerting",
    "Level": "2",
    "Description": "Alerting involves setting up notifications for specific events or thresholds to ensure timely responses to potential issues or security incidents. This enhances the ability to detect and address problems proactively. Tools like Prometheus, Grafana, and PagerDuty can be integrated into DevSecOps pipelines to automate alerting based on predefined metrics and conditions.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "An open-source monitoring and alerting toolkit that collects metrics and triggers alerts based on predefined rules within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "A visualization tool that can be configured to send alerts based on dashboard metrics, integrated into DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "PagerDuty",
        "Description": "An incident response platform that manages and routes alerts to appropriate teams, compatible with CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Advanced availability and stability metrics",
    "Level": "3",
    "Description": "Advanced availability and stability metrics involve tracking detailed performance indicators to assess the reliability and resilience of systems. This includes metrics like uptime, latency, error rates, and resource utilization. Tools like Prometheus, Grafana, and Datadog can be integrated into DevSecOps pipelines to automate the collection and visualization of advanced availability and stability metrics, enabling proactive system management.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "An open-source monitoring and alerting toolkit that collects and stores advanced availability and stability metrics, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "A visualization tool that creates dashboards for displaying advanced availability and stability metrics, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Datadog",
        "Description": "A monitoring and analytics platform that tracks advanced availability and stability metrics, integrated into CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Deactivation of unused metrics",
    "Level": "3",
    "Description": "Deactivation of unused metrics involves identifying and disabling metrics that are no longer relevant or necessary. This optimization reduces resource consumption and focuses monitoring efforts on critical metrics. Tools like Prometheus, Grafana, and Datadog can be configured within DevSecOps pipelines to automate the identification and deactivation of unused metrics.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "An open-source monitoring and alerting toolkit that can be configured to deactivate unused metrics within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "A visualization tool that can be used to manage and deactivate unused metrics within DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Datadog",
        "Description": "A monitoring and analytics platform that allows for the deactivation of unused metrics to optimize resource usage within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Grouping of metrics",
    "Level": "3",
    "Description": "Grouping of metrics involves categorizing related metrics together to enhance clarity and facilitate more effective monitoring and analysis. This organization helps in identifying trends and correlations within different metric groups. Tools like Grafana, Prometheus, and Datadog can be integrated into DevSecOps pipelines to automate the grouping and visualization of related metrics.",
    "Tools": [
      {
        "Name": "Grafana",
        "Description": "A visualization tool that allows for the grouping and organization of related metrics into dashboards, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Prometheus",
        "Description": "An open-source monitoring and alerting toolkit that supports the grouping of related metrics for organized monitoring within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Datadog",
        "Description": "A monitoring and analytics platform that enables the grouping of related metrics for better organization and analysis within DevSecOps pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Monitoring of costs",
    "Level": "2",
    "Description": "Monitoring of costs involves tracking and analyzing the financial expenditures related to infrastructure and application deployments. This practice helps in optimizing resource usage and managing budgets effectively. Tools like AWS Cost Explorer, Azure Cost Management, and Google Cloud Cost Management can be integrated into DevSecOps pipelines to automate the monitoring and reporting of infrastructure and application costs.",
    "Tools": [
      {
        "Name": "AWS Cost Explorer",
        "Description": "Provides detailed insights into AWS spending and resource usage, integrated into CI/CD pipelines for automated cost monitoring.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Azure Cost Management",
        "Description": "Offers comprehensive cost tracking and management for Azure resources, compatible with DevSecOps workflows.",
        "Opensource": false,
        "Languages": []
      },
      {
        "Name": "Google Cloud Cost Management",
        "Description": "Provides tools for tracking and optimizing Google Cloud expenditures, integrated into CI/CD pipelines for automated cost monitoring.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Simple budget metrics",
    "Level": "1",
    "Description": "Simple budget metrics involve tracking basic financial indicators related to project or infrastructure spending. This includes metrics like monthly expenses, budget adherence, and cost forecasts. Tools like Grafana, Prometheus, and basic reporting features of cloud providers can be integrated into DevSecOps pipelines to automate the collection and visualization of simple budget metrics.",
    "Tools": [
      {
        "Name": "Grafana",
        "Description": "A visualization tool that can display simple budget metrics through customizable dashboards, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Prometheus",
        "Description": "An open-source monitoring and alerting toolkit that can be configured to collect simple budget metrics within CI/CD workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Cloud Provider Reporting",
        "Description": "Basic reporting features of cloud providers (e.g., AWS Cost Explorer, Azure Cost Management) can be used to track simple budget metrics, integrated into CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Simple system metrics",
    "Level": "1",
    "Description": "Simple system metrics involve tracking fundamental performance indicators of system components, such as CPU usage, memory consumption, and disk I/O. These metrics provide basic insights into system health and performance. Tools like Prometheus, Grafana, and Nagios can be integrated into DevSecOps pipelines to automate the collection and visualization of simple system metrics.",
    "Tools": [
      {
        "Name": "Prometheus",
        "Description": "An open-source monitoring and alerting toolkit that collects simple system metrics, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Grafana",
        "Description": "A visualization tool that creates dashboards for displaying simple system metrics, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Nagios",
        "Description": "An open-source monitoring system that tracks simple system metrics and alerts on predefined conditions within CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Information Gathering",
    "Sub Dimension": "Monitoring",
    "Activity": "Visualized metrics",
    "Level": "2",
    "Description": "Visualized metrics involve presenting monitoring data in graphical formats, such as charts and dashboards, to facilitate easier analysis and decision-making. This enhances the ability to quickly interpret complex data and identify trends or anomalies. Tools like Grafana, Kibana, and Datadog can be integrated into DevSecOps pipelines to automate the visualization of various metrics.",
    "Tools": [
      {
        "Name": "Grafana",
        "Description": "A visualization tool that creates interactive dashboards for displaying various metrics, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Kibana",
        "Description": "A visualization tool for Elasticsearch that creates interactive dashboards and graphs from log and metric data, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Datadog",
        "Description": "A monitoring and analytics platform that provides advanced visualization capabilities for various metrics within CI/CD pipelines.",
        "Opensource": false,
        "Languages": []
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Dynamic depth for infrastructure",
    "Activity": "Load tests",
    "Level": "4",
    "Description": "Load tests involve simulating high traffic and usage scenarios to evaluate how infrastructure and applications perform under stress. This ensures that systems can handle peak loads without performance degradation or failures. Tools like JMeter, Locust, and Gatling can be integrated into DevSecOps pipelines to automate load testing and performance evaluation.",
    "Tools": [
      {
        "Name": "JMeter",
        "Description": "An open-source tool designed to load test functional behavior and measure performance, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Locust",
        "Description": "An open-source load testing tool that allows writing test scenarios in Python, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": ["Python"]
      },
      {
        "Name": "Gatling",
        "Description": "A high-performance load testing tool that uses Scala for writing test scenarios, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": ["Scala"]
      }
    ]
  },
  {
    "Dimension": "Test and Verification",
    "Sub Dimension": "Static depth for infrastructure",
    "Activity": "Test for stored secrets",
    "Level": "1",
    "Description": "Testing for stored secrets involves verifying that sensitive information, such as API keys, passwords, and certificates, are securely stored and not exposed in code repositories or configuration files. This practice prevents unauthorized access and potential security breaches. Tools like GitSecrets, TruffleHog, and Vault can be integrated into DevSecOps pipelines to automate the detection and secure storage of secrets.",
    "Tools": [
      {
        "Name": "GitSecrets",
        "Description": "A tool that scans Git repositories for sensitive information and prevents commits containing secrets, integrated into CI/CD pipelines.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "TruffleHog",
        "Description": "Searches through Git repositories for high-entropy strings and secrets, compatible with DevSecOps workflows.",
        "Opensource": true,
        "Languages": []
      },
      {
        "Name": "Vault",
        "Description": "A tool for securely storing and accessing secrets, integrated into CI/CD pipelines to manage sensitive information.",
        "Opensource": true,
        "Languages": []
      }
    ]
  }
]
